import{_ as s,r as e,o as t,a as l,d as n,e as i,F as o,f as r,b as p}from"./app.99d695aa.js";const c={},u=r(`<h1 id="c-\u4F53\u7CFB\u7B80\u6613\u5165\u95E81" tabindex="-1"><a class="header-anchor" href="#c-\u4F53\u7CFB\u7B80\u6613\u5165\u95E81" aria-hidden="true">#</a> C++ \u4F53\u7CFB\u7B80\u6613\u5165\u95E81</h1><h2 id="c-\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#c-\u7B80\u4ECB" aria-hidden="true">#</a> C++ \u7B80\u4ECB</h2><h3 id="\u7279\u70B9" tabindex="-1"><a class="header-anchor" href="#\u7279\u70B9" aria-hidden="true">#</a> <strong>\u7279\u70B9</strong></h3><ul><li>\u4E00\u95E8\u9AD8\u7EA7\u8BED\u8A00</li><li>\u5B66\u4E60\u4F7F\u7528C ++\u5B66\u4E60\u7ED3\u6784\u5316\u7F16\u7A0B <ul><li>\u4E00\u79CD\u7EAA\u5F8B\u6027\u7684\u7F16\u5199\u7A0B\u5E8F\u7684\u65B9\u6CD5</li></ul></li><li>\u81EA\u4E0A\u800C\u4E0B\u7684\u8BBE\u8BA1\u6A21\u578B <ul><li>\u5927\u95EE\u9898\u5206\u4E3A\u5C0F\u95EE\u9898</li><li>\u6BCF\u4E2A\u5C0F\u95EE\u9898\u90FD\u6309\u4EE3\u7801\u6BB5/\u529F\u80FD\u5206\u5F00\u89E3\u51B3</li><li>\u5C06\u8F83\u5C0F\u7684\u95EE\u9898\u7684\u89E3\u51B3\u65B9\u6848\u96C6\u6210\u5728\u4E00\u8D77\uFF0C\u4EE5\u5F62\u6210\u6700\u7EC8\u7A0B\u5E8F</li><li>\u7A0B\u5E8F\u5458\u66F4\u597D\u5730\u7406\u89E3\u5E76\u4E14\u6613\u4E8E\u7EF4\u62A4</li></ul></li><li>C\u7684\u6269\u5C55 <ul><li>1980\u5E74\u4EE3\u521D\u671F\uFF1ABjarne Stroustrup\uFF08\u8D1D\u5C14\u5B9E\u9A8C\u5BA4\uFF09</li><li>\u201C\u52A0\u5FEB\u53D1\u5C55\u201D C</li><li>\u63D0\u4F9B\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u7684\u529F\u80FD\uFF08OOP\uFF09</li></ul></li><li>\u6DF7\u5408\u8BED\u8A00 <ul><li>C\u98CE\u683C</li><li>\u9762\u5411\u5BF9\u8C61\u7684\u98CE\u683C</li><li>\u4E24\u8005\u6DF7\u5408</li></ul></li></ul><h3 id="\u5F00\u53D1\u73AF\u5883" tabindex="-1"><a class="header-anchor" href="#\u5F00\u53D1\u73AF\u5883" aria-hidden="true">#</a> \u5F00\u53D1\u73AF\u5883</h3><p>\u4E09\u4E2A\u4E3B\u8981\u7EC4\u6210\u90E8\u5206 1.\u7A0B\u5E8F\u5F00\u53D1\u73AF\u5883 2.\u8BED\u8A00\uFF08\u8BED\u6CD5\uFF09 3.C ++\u6807\u51C6\u5E93</p><p>\u5B89\u88C5\u8BF7\u89C1\uFF1Ahttps://www.hanjiaming.com.cn/archives/1892</p><p>\u5373 \u7528\u4E8E\u7F16\u5199\u7A0B\u5E8F\u7684\u7B26\u53F7\u548C\u89C4\u5219\u7CFB\u7EDF</p><p><strong>\u5F62\u6210C ++\u7A0B\u5E8F\u7684\u516D\u4E2A\u9636\u6BB5</strong></p><ol><li>\u7F16\u8F91\uFF08edit\uFF09 <ul><li>\u7A0B\u5E8F\u662F\u5728\u57FA\u4E8E\u6587\u672C\u7684\u7F16\u8F91\u5668\u4E2D\u521B\u5EFA\u7684\uFF0C\u5E76\u5B58\u50A8\u5728\u78C1\u76D8\u4E0A</li></ul></li><li>\u9884\u5904\u7406\uFF08preprocess\uFF09 <ul><li>\u540D\u4E3A\u9884\u5904\u7406\u7A0B\u5E8F\u7684\u7A0B\u5E8F\u5904\u7406\u4EE3\u7801</li><li>\u4F8B\u5982\uFF0C\u5C06\u67D0\u4E9B\u6807\u8BB0\u66FF\u6362\u4E3A\u5B57\u7B26\u4E32\uFF08\u6587\u672C\uFF09\u6216\u6570\u503C</li></ul></li><li>\u7F16\u8BD1\uFF08compile\uFF09 <ul><li>\u7F16\u8BD1\u5668\u521B\u5EFA\u76EE\u6807\u4EE3\u7801\u5E76\u5C06\u5176\u5B58\u50A8\u5728\u78C1\u76D8\u4E0A</li></ul></li><li>\u94FE\u63A5\uFF08link\uFF09 <ul><li>\u7ED3\u5408\u5E93/\u5176\u4ED6\u529F\u80FD\u5F62\u6210\u53EF\u6267\u884C\u7A0B\u5E8F</li></ul></li></ol><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203033747641.png" alt="img" loading="lazy"><strong>\u8FD0\u884C C++ \u5F62\u6210\u7684\u53EF\u6267\u884C\u6587\u4EF6</strong></p><ol><li>\u52A0\u8F7D\uFF08load\uFF09 <ul><li>\u52A0\u8F7D\u7A0B\u5E8F\u5C06\u7A0B\u5E8F\u653E\u5165\u5185\u5B58</li></ul></li><li>\u6267\u884C\uFF08execute\uFF09 <ul><li>CPU\u63A5\u53D7\u5E76\u6267\u884C\u6BCF\u6761\u6307\u4EE4\uFF0C\u53EF\u80FD\u4F1A\u5B58\u50A8\u65B0\u7684\u6570\u636E\u503C</li></ul></li></ol><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203033801808.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203033712317.png" alt="img" loading="lazy"></p><h2 id="\u9884\u5907\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u9884\u5907\u77E5\u8BC6" aria-hidden="true">#</a> \u9884\u5907\u77E5\u8BC6</h2><h3 id="\u8F6C\u4E49\u7B26" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u4E49\u7B26" aria-hidden="true">#</a> \u8F6C\u4E49\u7B26</h3><p>\u6240\u6709\u7684ASCII\u7801\u90FD\u53EF\u4EE5\u7528\u201C\\\u201D\u52A0\u6570\u5B57\uFF08\u4E00\u822C\u662F8\u8FDB\u5236\u6570\u5B57\uFF09\u6765\u8868\u793A\u3002\u800CC\u4E2D\u5B9A\u4E49\u4E86\u4E00\u4E9B\u5B57\u6BCD\u524D\u52A0\\\u6765\u8868\u793A\u5E38\u89C1\u7684\u90A3\u4E9B\u4E0D\u80FD\u663E\u793A\u7684ASCII\u5B57\u7B26\uFF0C\u5982\\0,\\t,\\n\u7B49\uFF0C\u5C31\u79F0\u4E3A\u8F6C\u4E49\u5B57\u7B26\uFF0C\u56E0\u4E3A\u540E\u9762\u7684\u5B57\u7B26\uFF0C\u90FD\u4E0D\u662F\u5B83\u672C\u6765\u7684ASCII\u5B57\u7B26\u610F\u601D\u4E86\u3002</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203040950670.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203040621658.png" alt="img" loading="lazy"></p><h2 id="\u6CE8\u610F\u4E8B\u9879" tabindex="-1"><a class="header-anchor" href="#\u6CE8\u610F\u4E8B\u9879" aria-hidden="true">#</a> \u6CE8\u610F\u4E8B\u9879</h2><ul><li>\u6587\u4EF6\u5355\u4F4D\u662FProject\uFF08\u5DE5\u7A0B\uFF09\u3002\u4E00\u4E2A\u5DE5\u7A0B\u5BF9\u5E94\u4E00\u4E2A\u6587\u4EF6\u5939\u3002\u4E00\u4E2A\u5DE5\u7A0B\u4E2D\u6709\u5F88\u591Acpp\u6216h\u6587\u4EF6\u3002</li><li>\u6587\u4EF6\u540D\u79F0\u548C\u8DEF\u5F84\u4E0D\u80FD\u5305\u542B\u4E2D\u6587\u3002</li><li><strong>\u5199\u4EE3\u7801\u65F6,\u52A1\u5FC5\u5207\u6362\u5230\u82F1\u6587\u8F93\u5165\u6CD5\u3002</strong></li><li>\u4EE3\u7801\u4E2D\u4E0D\u80FD\u5305\u542B\u4E2D\u6587\u548C\u4E2D\u6587\u7B26\u53F7</li></ul><h2 id="\u7B2C\u4E00\u4E2Ac-\u7A0B\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E00\u4E2Ac-\u7A0B\u5E8F" aria-hidden="true">#</a> \u7B2C\u4E00\u4E2AC++\u7A0B\u5E8F</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// Your first program in C++</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token comment">// function main begins program execution</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> Welcome to C<span class="token operator">++</span><span class="token operator">!</span>\\n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// indicate that program ended successfully</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u8FD0\u884C\u7ED3\u679C\uFF1A<code>Welcome to C++!</code></p><h3 id="\u4EE3\u7801\u89E3\u91CA" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u89E3\u91CA" aria-hidden="true">#</a> \u4EE3\u7801\u89E3\u91CA</h3><ul><li><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// Your first program in C++
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Comments start with: // <ul><li>Comments are ignored by compiler</li></ul></li><li>Traditional comments (in C):<code>/* \u2026 */</code></li><li>Improve program readability</li></ul></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* This is a traditional
comment. It can be 
split over multiple lines */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p><code>#include &lt;iostreams&gt;</code></p></li><li><p>Preprocessing directive</p><ul><li><p>Tells the preprocessor to perform a specific action</p></li><li><p>Format: a line begins with <code>#</code></p></li><li><p>Where to put a directive?</p><ul><li><p>Anywhere in a source file, with effect from that point onwards</p></li><li><p><code>#include &lt;filename&gt;</code> means:</p></li></ul></li></ul></li><li><p>To add the contents of the library file \u2013 filename to the source program during preprocessing</p></li><li><p><code>&lt; &gt;</code> means to find the library file in the default location</p></li><li><p>Blank lines, spaces, and tabs are white-space characters</p><ul><li>Ignored by compiler</li></ul></li><li><p><code>using namespace std;</code></p><ul><li>Namespace</li><li>a set of names in which all names are unique</li><li>to prevent ambiguity(\u53CC\u5173) of names <ul><li>E.g., cout is defined in the namespace of std in iostream</li></ul></li><li>if this line is not written explicitly, we can write like this <ul><li><code>std::cout</code></li></ul></li></ul></li><li><p>int main() {</p><ul><li>C++ programs begin executing at <code>main</code></li><li>Parenthesis <code>()</code>indicates <code>main</code> is a function</li><li>C++ programs contain one or more functions</li></ul></li><li><p>Functions can perform tasks and return information</p><ul><li><code>int</code> means <code>main</code> returns an integer when the <code>main</code> function finishes execution(more on this later)</li></ul></li><li><p>Left brace <code>{</code>begins body of function declaration. Ended by right brace <code>}</code></p></li><li><p><code>cout &lt;&lt; Welcome to C++!\\n;</code></p><ul><li><p>A program statement</p></li><li><p>instructs the computer to perform a task</p></li><li><p>must be ended with semicolon <code>;</code></p></li><li><p>Standard output stream object</p><ul><li>cout - Connected to screen</li><li><code>&lt;&lt;</code><ul><li>Stream insertion operator</li></ul></li></ul></li><li><p>Value on the right-hand side (right operand) inserted into output stream</p></li><li><p>Escape characters</p></li></ul></li><li><p><code>\\</code> Indicates \u201Cspecial\u201D character output</p></li></ul><p>\u8BF7\u8BB0\u4F4F\uFF0C\u53F3\u8FDB\u5DE6\u51FA\u3002</p><ul><li><p>Input/output</p><ul><li>cout <ul><li>Standard output stream to \u201CThe computer screen\u201D</li></ul></li><li>cin <ul><li>Standard input stream</li><li>Normally from the keyboard</li></ul></li></ul></li><li><p><code>return 0; // indicate that program ended successfully</code></p><ul><li>End of the main function</li><li>Return an integer</li></ul></li><li><p><code>0</code> : indicates that program ended successfully</p></li><li><p><code>}</code> : A right brace</p></li><li><p>Signifies the end of the <code>main</code> function</p></li></ul><h2 id="introduction-to-variables" tabindex="-1"><a class="header-anchor" href="#introduction-to-variables" aria-hidden="true">#</a> Introduction to Variables</h2><ul><li>Remember one aim of programming is to perform mathematical calculations</li><li>Some calculations may require intermediate steps and therefore there are intermediate values for subsequent calculations</li><li>How do we store these intermediate values in programming? <ul><li>Variables</li></ul></li></ul><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h3><ul><li><p>Areas in memory where values can be stored</p><ul><li>Informal thought: A box that can be stored a value</li></ul></li><li><p>Common data types</p><ul><li>int \u2013 integer numbers (e.g., -3, 0, 8)</li><li>char \u2013 character or symbol (e.g., H, d, ?, %)</li></ul></li><li><p>double \u2013 floating point numbers (e.g., 3.14, 1.618)</p><ul><li>Declare variables with name and data type before use (Imagine as creating a box before putting something into it)</li></ul></li><li><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> integer1<span class="token punctuation">;</span> <span class="token keyword">int</span> integer2<span class="token punctuation">;</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Can declare several variables of the same type in one declaration Comma-separated list</li></ul></li><li><p><code>int integer1, integer2, sum;</code></p></li></ul><h3 id="variable-names" tabindex="-1"><a class="header-anchor" href="#variable-names" aria-hidden="true">#</a> Variable names</h3><p>Variable names ( also known as identifier\u300C\u6807\u8BC6\u7B26\u300D)</p><ul><li><p>Rules of naming a variable</p><ul><li>Series of characters</li></ul></li><li><p>letters, digits, underscores ( _ )</p></li><li><p>No space in-between</p><ul><li>E.g., <code>thickness_of_wall, baseArea, flat_widthRatio</code> are ok</li></ul></li><li><p>Cannot begin with digit</p><ul><li><code>7button</code> is invalid</li></ul></li><li><p>Case sensitive</p><ul><li>a1 and A1 are two different variables</li><li>As a norm, variable names begin with lowercase letters</li></ul></li></ul><p><strong>Cannot be used as identifiers (variable names)</strong> ![CleanShot 2021-02-19 at 21.43.19@2x](/Users/hanjiaming/Library/Application Support/CleanShot/media/media_34WboypUoO/CleanShot 2021-02-19 at 21.43.19@2x.png)</p><h2 id="common-operators" tabindex="-1"><a class="header-anchor" href="#common-operators" aria-hidden="true">#</a> common operators</h2><ul><li><p><code>&gt;&gt;</code> stream extraction operator</p><ul><li>Used with cin <ul><li>Also in the namespace std</li></ul></li></ul></li><li><p>Waits for user to input value, then press Enter key</p><ul><li>Stores value in variable to right of operator</li></ul></li><li><p>E.g., <code>cin &gt;&gt; radius</code></p></li><li><p><code>=</code>(assignment operator)</p><ul><li>Assigns value to variable (from right to left)</li><li>Binary operator (two operands)</li></ul></li><li><p>E.g.,</p></li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203043204589.png" alt="img" loading="lazy"></p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// A program for summing two input number.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token comment">// function main begins program execution</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> integer1<span class="token punctuation">;</span>    
    <span class="token comment">// </span>
first number to be input by user
    <span class="token keyword">int</span> integer2<span class="token punctuation">;</span>
    <span class="token comment">// second number to be input by user</span>
    <span class="token keyword">int</span>    sum<span class="token punctuation">;</span>
    <span class="token comment">// variable in which sum will be stored</span>

    cout <span class="token operator">&lt;&lt;</span> Enter first integer\\n<span class="token punctuation">;</span>        
    cin <span class="token operator">&gt;&gt;</span> integer1<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> Enter second integer\\n<span class="token punctuation">;</span> 
    cin <span class="token operator">&gt;&gt;</span> integer2<span class="token punctuation">;</span>
    sum <span class="token operator">=</span> integer1 <span class="token operator">+</span> integer2<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> Sum is  <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>\u8FD0\u884C\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Enter first integer
45
Enter second integer
72

Sum is 117
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="other-arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#other-arithmetic-operators" aria-hidden="true">#</a> Other Arithmetic Operators</h3><ul><li><ul><li>Multiplication</li></ul></li><li>/Division <ul><li>Integer division truncates the decimal value <ul><li>7 / 5 evaluates to 1</li></ul></li></ul></li><li>%\uFF1AModulus operator returns remainder <ul><li>7 % 5 evaluates to 2</li></ul></li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203054424421.png" alt="img" loading="lazy"></p><h2 id="variable-and-memory" tabindex="-1"><a class="header-anchor" href="#variable-and-memory" aria-hidden="true">#</a> Variable and Memory</h2><ul><li>Variable names <ul><li>Correspond to actual locations in computer&#39;s memory</li><li>Every variable has <strong>name, type, size and value</strong></li></ul></li><li>When new value placed into variable, overwrites previous value</li><li>Reading variables from memory non-destructive</li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203052751555.png" alt="img" loading="lazy"></p><p>integer1, integer2 and sum are created in the program and memory spaces are allocated to them (even they are not used yet)</p><p>In most C++ environment, variables are not initialized to default values (e.g., 0, NULL)</p><p>Try\uFF1A <code>int integer1;cout &lt;&lt; integer1 &lt;&lt; endl;</code></p><p>outcome\uFF1A\u4E00\u4E2A\u957F9\u4F4D\u7684\u968F\u673A\u6570</p><p>E.g., number1 + number2 * (number3 % number4 - number5)</p><p>How to evaluate above?</p><ul><li>Rules: Operators in parentheses evaluated first</li><li>Nested/embedded parentheses: Operators in innermost pair first Multiplication, division, modulus applied next</li><li>Operators applied from left to right</li><li>Addition, subtraction applied last</li><li>Operators applied from left to right</li></ul><p>\u6240\u4EE5\uFF0C\u6211\u4EEC\u5DF2\u7ECF\u4E86\u89E3\u5982\u4F55\u7F16\u5199\u4E00\u4E2A\u7B80\u5355\u7684C++\u7A0B\u5E8F</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203054807266.png" alt="img" loading="lazy"></p><h2 id="pseudocode-\u4F2A\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#pseudocode-\u4F2A\u4EE3\u7801" aria-hidden="true">#</a> Pseudocode(\u4F2A\u4EE3\u7801\uFF09</h2><p>Artificial, informal language used to develop algorithms</p><p>\u6211\u4EEC\u5199\u4EE3\u7801\u4E4B\u524D\u8981\u5148\u5199\u4F2A\u4EE3\u7801\uFF0C\u4E4B\u540E\u6211\u4EEC\u628A\u4F2A\u4EE3\u7801\u8F6C\u5199\u4E3AC++\u4EE3\u7801\u3002\u8FD9\u5BF9\u6211\u4EEC\u5199\u4EE3\u7801\u6709\u5E2E\u52A9\u3002</p><ul><li>Similar to everyday English</li><li>Not executed on computers <ul><li>Used to think out the logic of program before coding <ul><li>Easy to convert into C++ syntax</li></ul></li><li>Only executable statements <ul><li>No need to declare variables</li></ul></li></ul></li><li>More or less like a real computer program: assignment statements, arithmetic expressions, control structures (if, if/else, while, for, etc.), and so on</li><li>no strict rules for the syntax</li><li>OK as long as it is clear, readable and understandable</li><li>Enables you to concentrate on the algorithm instead of details of syntax</li></ul><p>\u4F8B\u5982\uFF0C\u7F16\u5199\u4E00\u4E2A\u63A5\u53D7\u4E24\u4E2A\u6574\u6570\u7684\u7A0B\u5E8F\uFF0C\u8BA1\u7B97\u5E76\u663E\u793A\u603B\u548C\u3002</p><ul><li><code>Prompt the user to input integer1</code></li><li><code>Prompt the user to input integer2</code></li><li><code>Calculate sum = integer1 + integer2</code></li><li><code>Print sum to the screen</code></li></ul><p>\u4F8B\u5982\uFF1A\u7F16\u5199\u7A0B\u5E8F\u4EE5\u8BA1\u7B97\u4E09\u4E2A\u5B66\u751F\u7684\u8003\u8BD5\u5E73\u5747\u5206\u6570</p><ul><li><code>Prompt the user to input score1</code></li><li><code>Prompt the user to input score2</code></li><li><code>Prompt the user to input score3</code></li><li><code>Calculate sum = score1 + score2 + score3</code></li><li><code>Calculate average = sum / 3</code></li><li><code>Print average to the screen</code></li></ul><h3 id="\u4F2A\u4EE3\u7801\u7684\u5199\u4F5C\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#\u4F2A\u4EE3\u7801\u7684\u5199\u4F5C\u6280\u5DE7" aria-hidden="true">#</a> \u4F2A\u4EE3\u7801\u7684\u5199\u4F5C\u6280\u5DE7</h3><ul><li>\u203A Always think about the sequence\uFF1AInput \u21E8 Processing \u21E8 Output</li><li>Input <ul><li>What data does the user need to provide to the program?</li><li>E.g., an integer value? student\u2019s scores?</li></ul></li><li>Processing <ul><li>What does the program calculate?</li><li>E.g., calculating the sum? calculating the average?</li></ul></li><li>Output <ul><li>What does the program display to the user?</li><li>E.g., calculation result? sum? average?</li></ul></li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203081951815.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203082008543.png" alt="img" loading="lazy"></p><h2 id="introduction-to-control-structures" tabindex="-1"><a class="header-anchor" href="#introduction-to-control-structures" aria-hidden="true">#</a> Introduction to Control Structures</h2><p>Introduction to Control Structures\uFF08\u63A7\u5236\u7ED3\u6784\u4ECB\u7ECD\uFF09</p><ul><li>By default, statements in a program are executed in sequential order\uFF08\u6309\u987A\u5E8F\uFF09 <ul><li>All programs studied so far behave in this way</li></ul></li><li>C++ provides control structures to achieve transfer of control <ul><li>Next statement executed not necessarily next one in sequence</li></ul></li><li>2 kinds of control structures <ul><li>Selection structures\uFF1A<code>if, if/else, switch</code></li></ul></li><li>Repetition structures\uFF1A<code>while, do-while, for</code></li><li>Indenting makes programs/pseudocode easier to read <ul><li>Note: C++ ignores whitespace characters (tabs, spaces, etc.)</li></ul></li></ul><p>Let&#39;s see an example.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter x and y: &quot;</span><span class="token punctuation">;</span>
	cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>

 	<span class="token comment">// if selection structure</span>
  
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x is greater.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x is smaller.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  
<span class="token keyword">else</span> <span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x and y are equal.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Please enter x and y: 10 20
x is smaller.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="if-selection-structure" tabindex="-1"><a class="header-anchor" href="#if-selection-structure" aria-hidden="true">#</a> if Selection Structure</h3><ul><li><p>Choose among alternative courses of action.</p></li><li><p>Pseudocode example</p><ul><li><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>If student\u2019s grade is greater than or equal to 60
Print \u201CPassed\u201D
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Translate to C++\uFF1A<code>if (grade &gt;= 60) cout &lt;&lt; Passed;</code></li><li>If the condition is true\uFF1APrint statement executed, program continues to next statement</li><li>If the condition is false\uFF1APrint statement ignored, program continues</li></ul></li></ul></li><li><p>Indenting makes programs/pseudocode easier to read</p><ul><li>Note: C++ ignores whitespace characters (tabs, spaces, etc.)</li></ul></li><li><p>General Structure</p><ul><li><code>if () statement</code></li></ul></li><li><p>A condition is one that, after evaluation, it must be either <em>true or false</em></p><ul><li>E.g., x&lt;=y (ls x less than or equal to y? \uFF09</li><li>E.g., m!=n (is m not equal to n?)</li></ul></li></ul><h3 id="equality-and-relational-operators" tabindex="-1"><a class="header-anchor" href="#equality-and-relational-operators" aria-hidden="true">#</a> Equality and Relational Operators</h3><ul><li>Used to compare the relation of two data items <ul><li>Result in either <strong>true or false</strong></li></ul></li><li>Equality operators<code>==, !=</code></li><li>Relational operators <code>&lt;, &gt;=, &lt;=</code></li></ul><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/19/e0669e83bdb87.png" alt="CleanShot 2021-02-19 at 21.51.28@2x.png" title="CleanShot 2021-02-19 at 21.51.28@2x.png"><h3 id="if-else-selection-structure" tabindex="-1"><a class="header-anchor" href="#if-else-selection-structure" aria-hidden="true">#</a> if/else Selection Structure</h3><p>If grade is 54, what will the output be?</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Passed&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>grade &gt;= 60 will be evaluated to false and Passed will not be printed.</p><p>Different actions if conditions <strong>true</strong> or <strong>false</strong></p><p>Pseudocode</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if student\u2019s grade is greater than or equal to 60
Print \u201CPassed\u201D
else
Print \u201CFailed\u201D
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>C++ code</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Passed&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Failed&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="general-structure" tabindex="-1"><a class="header-anchor" href="#general-structure" aria-hidden="true">#</a> General Structure</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (&lt;condition&gt;)
	statement
else
	statement
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>No condition after the \u201Celse\u201D keyword, \u201Celse\u201D means \u201Cotherwise\u201D.</p><h3 id="nested-if-else-structures" tabindex="-1"><a class="header-anchor" href="#nested-if-else-structures" aria-hidden="true">#</a> Nested if/else Structures</h3><p>In most scenarios, there are more than two possible actions to be performed.</p><p>By extending the if/else structures, another if/else structure is included in the \u201Celse\u201D segment.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (&lt;condition&gt;)
	statement for the 1st case
else
	if (&lt;condition&gt;)
		statement for the 2nd case
	else 
		statement otherwise
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The following example illustrates how to determine the grade of a given numeric score:</p><p>Pseudocode</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if student\u2019s grade is greater than or equal to 90
	Print \u201CA\u201D
else if student\u2019s grade is greater than or equal to 80
	Print \u201CB\u201D
else if student\u2019s grade is greater than or equal to 70
	Print \u201CC\u201D
else if student\u2019s grade is greater than or equal to 60
	Print \u201CD\u201D
else
	Print \u201CF\u201D
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>c++ code</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token comment">// 90 and above</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token comment">// 80-89</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token comment">// 70-79</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment">// 60-69</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token comment">// less than 60</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>or</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token comment">// 90 and above</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token comment">// 80-89</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> 
  	<span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token comment">// 70-79</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> 
  		<span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment">// 60-69</span>
				cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token comment">// less than 60</span>
				cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/19/eaa96fe1b7c15.png" alt="CleanShot 2021-02-19 at 22.22.50@2x.png" title="CleanShot 2021-02-19 at 22.22.50@2x.png"><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/19/15ce914456a66.png" alt="image.png" title="image.png"><h2 id="ternary-conditional-operator" tabindex="-1"><a class="header-anchor" href="#ternary-conditional-operator" aria-hidden="true">#</a> Ternary conditional operator</h2><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203080335222.png" alt="img" loading="lazy"></p><h2 id="assignment-operators" tabindex="-1"><a class="header-anchor" href="#assignment-operators" aria-hidden="true">#</a> Assignment Operators</h2><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203080405644.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203080418125.png" alt="img" loading="lazy"></p><h2 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h2><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203111833636.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203111916856.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203080148423.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203080159626.png" alt="img" loading="lazy"></p><h2 id="increment-and-decrement-operators" tabindex="-1"><a class="header-anchor" href="#increment-and-decrement-operators" aria-hidden="true">#</a> Increment and Decrement Operators</h2><ul><li>\u76F8\u540C\u70B9 <ul><li>\u53EF\u4EE5\u4F7F\u7528\u589E\u91CF\u8FD0\u7B97\u7B26c++\u4EE3\u66FFc + = 1</li><li>\u53EF\u4EE5\u4F7F\u7528\u51CF\u91CF\u8FD0\u7B97\u7B26c\u2013\u4EE3\u66FFc-= 1</li></ul></li><li>\u4E0D\u540C\u70B9 <ul><li>variable++ \u548C ++variable \u90FD\u53EF\u4EE5\u770B\u505A\u4E00\u4E2A\u53EF\u4EE5\u88AB\u8C03\u7528\u7684\u503C\uFF0C\u800C\u4E0D\u4EC5\u4EC5\u662F\u4E00\u4E2Ainstruction\u3002</li><li>\u4F46\u662Fvariable \u4EC5\u4EC5\u662F\u4E00\u4E2Ainstruction\uFF0C\u4E0D\u53EF\u4EE5\u76F4\u63A5\u88AB\u8C03\u7528\u3002</li></ul></li><li>\u9884\u589E\u91CF\uFF1A\u5C06\u8FD0\u7B97\u7B26\u653E\u5728\u53D8\u91CF\uFF08++ c\u6216\u2013c\uFF09\u4E4B\u524D\uFF0C\u8BE5\u53D8\u91CF\u503C\u5148\u88AB\u66F4\u6539\uFF0C\u7136\u540E\u5BF9\u6574\u4E2A\u8868\u8FBE\u5F0F\u6C42\u503C\u3002</li><li>\u540E\u9012\u589E\uFF1A\u5C06\u8FD0\u7B97\u7B26\u653E\u5728\u53D8\u91CF\uFF08c ++\u6216c\u2013\uFF09\u4E4B\u540E\u65F6\uFF0C\u5C06\u8BA1\u7B97\u6574\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u7136\u540E\u66F4\u6539\u53D8\u91CF\u503C\u3002</li></ul><p>\u5728\u6211\u770B\u6765\uFF0Cc++\u8868\u793A\u540E\u8BA1\u7B97\uFF0C\u5148\u8C03\u7528\uFF1B++c\u8868\u793A\u5148\u8BA1\u7B97\uFF0C\u518D\u8C03\u7528\u3002</p><p>\u6240\u4EE5\uFF0C\u5728for \u7684\uFF08\uFF09\u4E2D\uFF0Ci++\u548C++i \u7684\u6267\u884C\u6548\u679C\u4E00\u6837\uFF0C\u8BA9i\u5728\u6267\u884C\u5B8Cfor\u7ED3\u6784\u7684\u8BED\u53E5\u540E\u589E\u52A0i\u7684\u81EA\u8EAB\u503C\u3002</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203081831782.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203081751134.png" alt="img" loading="lazy"></p><h2 id="switch-selection-structure" tabindex="-1"><a class="header-anchor" href="#switch-selection-structure" aria-hidden="true">#</a> Switch Selection Structure</h2><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203112252891.png" alt="img" loading="lazy"></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203112311757.png" alt="img" loading="lazy"></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203113320626.png" alt="img" loading="lazy"></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203113339233.png" alt="img" loading="lazy"></p><h2 id="\u8865\u5145\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#\u8865\u5145\u8BF4\u660E" aria-hidden="true">#</a> \u8865\u5145\u8BF4\u660E</h2><h3 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> A</h3><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203113441197.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203113455574.png" alt="img" loading="lazy"><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210203113640741.png" alt="img" loading="lazy"></p><h3 id="char-use-single-quotation-mark" tabindex="-1"><a class="header-anchor" href="#char-use-single-quotation-mark" aria-hidden="true">#</a> Char use single quotation mark</h3><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2>`,126),d={href:"https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},m=p("https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin"),h=n("li",null,"COMP1011@Polyu's Teaching PowerPointhttp://c.biancheng.net/view/1360.html",-1);function g(b,k){const a=e("ExternalLinkIcon");return t(),l(o,null,[u,n("ul",null,[n("li",null,[n("a",d,[m,i(a)])]),h])],64)}var v=s(c,[["render",g]]);export{v as default};
