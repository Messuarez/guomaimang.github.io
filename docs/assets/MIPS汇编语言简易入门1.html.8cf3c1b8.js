import{_ as t,o as s,a as n,F as a,f as e,d as l,b as i}from"./app.a276051d.js";const r={},o=e('<h1 id="mips\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E81" tabindex="-1"><a class="header-anchor" href="#mips\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E81" aria-hidden="true">#</a> MIPS\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E81</h1><p><audio controls="" src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202182514688.mp3" autoplay="" loop="" style="display:inline-block;max-width:100%;box-sizing:border-box;"></audio></p><blockquote><p>\u6C47\u7F16\u8BED\u8A00\uFF08Assembly Language\uFF09\u662F\u4EFB\u4F55\u4E00\u79CD\u7528\u4E8E\u7535\u5B50\u8BA1\u7B97\u673A\u3001\u5FAE\u5904\u7406\u5668\u3001\u5FAE\u63A7\u5236\u5668\u6216\u5176\u4ED6\u53EF\u7F16\u7A0B\u5668\u4EF6\u7684\u4F4E\u7EA7\u8BED\u8A00\uFF0C\u4EA6\u79F0\u4E3A\u7B26\u53F7\u8BED\u8A00\u3002\u5728\u6C47\u7F16\u8BED\u8A00\u4E2D\uFF0C\u7528\u52A9\u8BB0\u7B26\u4EE3\u66FF\u673A\u5668\u6307\u4EE4\u7684\u64CD\u4F5C\u7801\uFF0C\u7528\u5730\u5740\u7B26\u53F7\u6216\u6807\u53F7\u4EE3\u66FF\u6307\u4EE4\u6216\u64CD\u4F5C\u6570\u7684\u5730\u5740\u3002\u5728\u4E0D\u540C\u7684\u8BBE\u5907\u4E2D\uFF0C\u6C47\u7F16\u8BED\u8A00\u5BF9\u5E94\u7740\u4E0D\u540C\u7684\u673A\u5668\u8BED\u8A00\u6307\u4EE4\u96C6\uFF0C\u901A\u8FC7\u6C47\u7F16\u8FC7\u7A0B\u8F6C\u6362\u6210\u673A\u5668\u6307\u4EE4\u3002\u7279\u5B9A\u7684\u6C47\u7F16\u8BED\u8A00\u548C\u7279\u5B9A\u7684\u673A\u5668\u8BED\u8A00\u6307\u4EE4\u96C6\u662F\u4E00\u4E00\u5BF9\u5E94\u7684\uFF0C\u4E0D\u540C\u5E73\u53F0\u4E4B\u95F4\u4E0D\u53EF\u76F4\u63A5\u79FB\u690D\u3002</p><p>\u767E\u79D1</p></blockquote><h2 id="\u4E3A\u4EC0\u4E48\u9009\u62E9\u5B66\u4E60mips\u6C47\u7F16\u8BED\u8A00" tabindex="-1"><a class="header-anchor" href="#\u4E3A\u4EC0\u4E48\u9009\u62E9\u5B66\u4E60mips\u6C47\u7F16\u8BED\u8A00" aria-hidden="true">#</a> \u4E3A\u4EC0\u4E48\u9009\u62E9\u5B66\u4E60MIPS\u6C47\u7F16\u8BED\u8A00\uFF1F</h2><p>MIPS (Microprocessor without Interlocked Pipeline Stages)</p><ul><li>\u8FC7\u53BB\u975E\u5E38\u6D41\u884C\uFF1A\u4E09\u5206\u4E4B\u4E00\u7684RISC\u82AF\u7247\u57FA\u4E8EMIPS</li><li>\u4ECA\u5929\u4ECD\u5728\u4F7F\u7528\uFF1A\u8DEF\u7531\u5668\u3001\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u3001\u89C6\u9891\u6E38\u620F\u673A</li><li>\u5B66\u4E60MIPS\u5BF9\u5B66\u4E60\u5176\u4ED6RISC\u6C47\u7F16\u8BED\u8A00100%\u6709\u5E2E\u52A9\uFF0C\u6BD4\u5982ARM</li></ul><p>\u8FD8\u6709\u5176\u4ED6\u7C7B\u578B\u7684\u6C47\u7F16\u8BED\u8A00\uFF0C\u6BD4\u5982Arm\u3001intel_x86</p><p>\u672C\u6559\u7A0B\u4E3B\u8981\u4F7F\u7528\u82F1\u6587\u4ECB\u7ECDMIPS-32bit</p><h2 id="\u5B66\u4E60\u4F9D\u8D56\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u5B66\u4E60\u4F9D\u8D56\u77E5\u8BC6" aria-hidden="true">#</a> \u5B66\u4E60\u4F9D\u8D56\u77E5\u8BC6</h2><p>\u5728\u5B66\u4E60\u672C\u6587\u4E4B\u524D\uFF0C\u4F60\u53EF\u80FD\u8981\u5148\u5B66\u4E60\u6211\u7684\u8FD9\u51E0\u7BC7\u6587\u7AE0\u3002</p><ul><li>\u8BA1\u7B97\u673A\u7EC4\u7EC7\u7B80\u4ECB</li><li>\u6570\u4F4D\u7CFB\u7EDF\u4EE5\u53CA\u5176\u7B97\u6CD51</li><li>\bC &amp; C++\u4E2D\u7684\u5E38\u89C1\u7684\u8FD0\u7B97\u7B26\u548C\u8FD0\u7B97\u64CD\u4F5C</li></ul><p>\u9AD8\u7EA7\u8BED\u8A00\u5E38\u5E38\u88AB\u8F6C\u6362\u6210\u6C47\u7F16\u8BED\u8A00\u3002</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201070359426.png" alt="img" loading="lazy"></p><p>\u6C47\u7F16\u8BED\u8A00\u5C06\u4F1A\u88AB\u8F6C\u6362\u4E3A\u673A\u5668\u8BED\u8A00</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201070136689.png" alt="img" loading="lazy"></p><h2 id="\u4EA7\u751F\u53EF\u6267\u884C\u6587\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u4EA7\u751F\u53EF\u6267\u884C\u6587\u4EF6" aria-hidden="true">#</a> \u4EA7\u751F\u53EF\u6267\u884C\u6587\u4EF6</h2><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201070322967.png" alt="img" loading="lazy"></p><ul><li>\u7A0B\u5E8F\uFF08program\uFF09\u901A\u5E38\u5305\u542B\u51E0\u4E2A\u6A21\u5757\u3002</li><li>\u6A21\u5757\uFF08module\uFF09\u901A\u5E38\u5305\u542B\u5BF9\u5176\u4ED6\u6A21\u5757\u7684\u5F15\u7528\uFF08\u4EE5\u4F7F\u7528\u6570\u636E\u6216\u5B50\u4F8B\u7A0B\uFF09\u3002</li><li>\u94FE\u63A5\uFF08linker\uFF09\uFF1A\u7EC4\u5408\u72EC\u7ACB\u7EC4\u88C5\u7684\u76EE\u6807\u6587\u4EF6\u5E76\u89E3\u6790\u5F15\u7528</li></ul><h2 id="\u6C47\u7F16\u8BED\u8A00\u7684\u4F5C\u7528" tabindex="-1"><a class="header-anchor" href="#\u6C47\u7F16\u8BED\u8A00\u7684\u4F5C\u7528" aria-hidden="true">#</a> \u6C47\u7F16\u8BED\u8A00\u7684\u4F5C\u7528</h2><p>\u9996\u5148\uFF0C\u4F7F\u7528\u7F16\u8BD1\u5668\u5C06\u9AD8\u7EA7\u8BED\u8A00\u8F6C\u6362\u4E3A\u6C47\u7F16\u8BED\u8A00\uFF08\u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF09 \u7B2C\u4E8C\uFF0C\u76F4\u63A5\u7528\u4F5C\u7F16\u5199\u7A0B\u5E8F\u7684\u8BED\u8A00\uFF0C\u5B83\u5177\u6709\u72EC\u7279\u7684\u4F18\u52BF</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201070502906.png" alt="img" loading="lazy"></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201070631197.png" alt="img" loading="lazy"></p><h2 id="\u4F18\u7F3A\u70B9" tabindex="-1"><a class="header-anchor" href="#\u4F18\u7F3A\u70B9" aria-hidden="true">#</a> \u4F18\u7F3A\u70B9</h2><p>\u4E3B\u8981\u4F18\u70B9</p><ul><li>\u901F\u5EA6\u5FEB\uFF0C\u5B58\u50A8\u7A7A\u95F4\u5C0F\uFF0C\u4E0D\u9700\u8981\u7F16\u8BD1\u5668</li><li>\u53EF\u4EE5\u5229\u7528\u9AD8\u7EA7\u8BED\u8A00\u4E0D\u5177\u5907\u7684\u67D0\u4E9B\u786C\u4EF6\u529F\u80FD\u3002</li><li>\u4EC0\u4E48\u65F6\u5019\u4F7F\u7528\uFF1F\u5F53\u5BF9\u901F\u5EA6\uFF0C\u5C3A\u5BF8\uFF0C\u6027\u80FD\u7B49\u6709\u4E25\u683C\u8981\u6C42\u65F6\u2026 <ul><li>\u793A\u4F8B\uFF1A\u8BBE\u8BA1\u6C7D\u8F66\u5236\u52A8\u5668\u7684\u63A7\u5236\u5355\u5143</li></ul></li></ul><p>\u4E3B\u8981\u7F3A\u70B9</p><ul><li>\u7279\u5B9A\u4E8E\u673A\u5668\u7684\uFF1A\u5FC5\u987B\u5B8C\u5168\u91CD\u5199\u624D\u80FD\u5728\u53E6\u4E00\u53F0\u8BA1\u7B97\u673A\u4F53\u7CFB\u7ED3\u6784\u4E0A\u8FD0\u884C</li><li>\u6BD4\u9AD8\u7EA7\u8BED\u8A00\u66F4\u957F\u7684\u65F6\u95F4-\u8017\u65F6\u4E14\u6F0F\u6D1E\u591A</li><li>\u5F88\u96BE\u5199</li></ul><h2 id="\u529F\u80FD\u7279\u70B9" tabindex="-1"><a class="header-anchor" href="#\u529F\u80FD\u7279\u70B9" aria-hidden="true">#</a> \u529F\u80FD\u7279\u70B9</h2><ul><li><p>\u57FA\u4E8E\u5BC4\u5B58\u5668\u7684\u67B6\u6784</p><ul><li>CPU\u5BF9\u5BC4\u5B58\u5668\u6267\u884C\u64CD\u4F5C</li><li>\u64CD\u4F5C\u53EF\u4EE5\u5206\u4E3A\u4E24\u7C7B\uFF1A <ul><li>\u5185\u5B58\u8BBF\u95EE\uFF08\u5728\u5185\u5B58\u548C\u5BC4\u5B58\u5668\u4E4B\u95F4\u52A0\u8F7D\u548C\u5B58\u50A8\u6570\u636E\uFF09</li><li>ALU\u64CD\u4F5C\uFF08\u5BC4\u5B58\u5668\u4E4B\u95F4\u7684\u64CD\u4F5C\uFF09</li></ul></li></ul></li><li><p>\u7CBE\u7B80\u6307\u4EE4\u96C6\u8BA1\u7B97\u673A\uFF08RISC\uFF09</p><ul><li>\u53EA\u6709\u4E00\u5C0F\u90E8\u5206\u7B80\u5355\u7684\u8BF4\u660E</li><li>\u5728\u6B64\u96C6\u5408\u4E0A\u5EFA\u7ACB\u66F4\u590D\u6742\u7684\u529F\u80FD</li><li>\u4E0E\u590D\u6742\u6307\u4EE4\u96C6\u8BA1\u7B97\u673A\uFF08CISC\uFF09\u4E0D\u540C\uFF0C\u5728\u590D\u6742\u6307\u4EE4\u96C6\u8BA1\u7B97\u673A\uFF08CISC\uFF09\u4E2D\uFF0C\u4E00\u6761\u6307\u4EE4\u53EF\u80FD\u5BF9\u5E94\u4E8E\u590D\u6742\u64CD\u4F5C</li><li>\u4E24\u79CD\u4E0D\u540C\u7684\u8BBE\u8BA1\u7406\u5FF5</li></ul></li><li><p>\u5173\u952E\u70B9</p><ul><li>\u5BC4\u5B58\u5668 \uFF08Registers\uFF09</li><li>\u4E3B\u5185\u5B58\uFF08\u77E5\u9053\u8981\u8BBF\u95EE\u7684\u5730\u5740\uFF09</li><li>\u6307\u793A</li></ul></li><li><p>MIPS\u6C47\u7F16\u8BED\u8A00\uFF1A\u5982\u4F55\u4F7F\u7528\u6307\u4EE4\u5B9E\u73B0\u67D0\u4E9B\u529F\u80FD\u5728\u5BC4\u5B58\u5668\uFF08\u548C\u5B58\u50A8\u5668\uFF09\u4E4B\u95F4\u8FDB\u884C\u64CD\u4F5C</p></li></ul><hr><h2 id="\u9884\u5907\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u9884\u5907\u77E5\u8BC6" aria-hidden="true">#</a> \u9884\u5907\u77E5\u8BC6</h2><h3 id="\u6808\u7684\u7406\u89E3" tabindex="-1"><a class="header-anchor" href="#\u6808\u7684\u7406\u89E3" aria-hidden="true">#</a> \u6808\u7684\u7406\u89E3</h3><p>\u6808\u67D0\u79CD\u610F\u4E49\u4E0A\u8BB2\uFF0C\u5B83\u50CF\u662F\u4E00\u4E2A\u5F00\u53E3\u7684\u76D2\u5B50\uFF0C\u5148\u653E\u8FDB\u53BB\u7684\u4E1C\u897F\u603B\u662F\u4F1A\u88AB\u540E\u653E\u8FDB\u53BB\u7684\u4E1C\u897F\u538B\u5728\u4E0B\u9762\uFF0C\u90A3\u4E48\u5982\u679C\u60F3\u62FF\u51FA\u88AB\u538B\u4F4F\u7684\u4E1C\u897F\uFF0C\u5FC5\u987B\u8981\u5148\u53D6\u51FA\u9876\u90E8\u7684\u4E1C\u897F\uFF0C\u4E5F\u5C31\u662F\u540E\u653E\u8FDB\u53BB\u7684\u4E1C\u897F\u3002\u6362\u4E2A\u8BF4\u6CD5\u5C31\u662F\u5148\u5165\u540E\u51FA\u3002\u90A3\u5B83\u6709\u70B9\u50CF\u4EC0\u4E48\u5462?\u60F3\u8C61\u4E00\u4E0B\u88C5\u5728\u76D8\u5B50\u91CC\u7684\u82E5\u5E72\u5F20\u6CB9\u997C\u3002</p><p>\u5BF9\uFF0C\u4ED6\u4EEC\u662F\u645E\u5728\u4E00\u8D77\u7684\u3002\u5982\u679C\u60F3\u62FF\u4E0B\u9762\u7684\u6CB9\u997C\u662F\u4E0D\u662F\u8981\u5148\u62FF\u5F00\u4E0A\u9762\u7684\u5462?\u6216\u8BB8\uFF0C\u8FD9\u5C31\u662F\u6808\u7684\u6839\u6E90\u3002\u4F46\u662F\uFF0C\u53C8\u548C\u201C\u6808\u201D\u8FD9\u4E2A\u5B57\u6709\u4EC0\u4E48\u5173\u7CFB\u5462?\u5355\u7EAF\u7684\u4ECE\u91CA\u4E49\u4E0A\u770B\uFF0C\u597D\u4F3C\u627E\u4E0D\u51FA\u4EC0\u4E48\u5173\u8054\u6027\u3002\u4F46\u662F\u5F53\u6211\u4EEC\u6253\u5F00\u6C49\u82F1\u8BCD\u5178\uFF1A</p><p>\u5BF9\u8BA1\u7B97\u673A\u4E2D\u63D0\u53CA\u7684\u201C\u6808\u201D\u7684\u82F1\u6587\u613F\u610F\u662Fstack!\u6211\u4EEC\u4E00\u5B9A\u8981\u8BB0\u5F97\uFF0C\u662F\u4E00\u7FA4\u8BF4\u82F1\u8BED\u7684\u4EBA\u521B\u9020\u4E86\u8BA1\u7B97\u673A\uFF0C\u4E5F\u662F\u4ED6\u4EEC\u7814\u7A76\u4E86\u521D\u7684\u7B97\u6CD5\u3002\u90A3\u4E48stack\u53C8\u662F\u4EC0\u4E48\u610F\u601D?</p><p>\u6CE8\u610F\u7BAD\u5934\u6307\u5411\u7684\u90A3\u4E00\u645E\u4E66\u4EEC\uFF0C\u548C\u997C\u4EEC\u7684\u76F8\u5904\u65B9\u5F0F\u662F\u4E0D\u662F\u5F88\u50CF!\u5806\u53E0\u5230\u4E00\u8D77\u3002\u90A3\u4E2A\u6839\u6E90\u51FA\u6765\u4E86\uFF0C\u5176\u5B9E\u6808\u5C31\u662F\u4E00\u79CD\u5C06\u6570\u636E\u4F9D\u6B21\u201C\u5806\u53E0\u201D\u7684\u4E00\u79CD\u6570\u636E\u7EC4\u7EC7\u65B9\u5F0F\u3002</p><h3 id="\u4F4D\u62D3\u5C55" tabindex="-1"><a class="header-anchor" href="#\u4F4D\u62D3\u5C55" aria-hidden="true">#</a> \u4F4D\u62D3\u5C55</h3><p>First digital extention\uFF1A1101 0111 -&gt; 1111 1111 1101 0111\uFF0C0011 1001 -&gt; 0000 0000 0011 1001</p><p>Zero extention\uFF1A 1101 0111 -&gt; 0000 0000 1101 0111</p><p>Immediate and const are lenth of 16bits,which need to be extended brfore they are saved in memory.</p><p>How to realize it?</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/18/1d536ed6301da.png" alt="CleanShot 2021-02-18 at 10.58.22@2x.png" title="CleanShot 2021-02-18 at 10.58.22@2x.png"><h2 id="mips-registers" tabindex="-1"><a class="header-anchor" href="#mips-registers" aria-hidden="true">#</a> MIPS Registers</h2><ul><li>32 general-purpose registers <ul><li>each has 32 bits</li><li>some are reserved for special purposes</li><li>Naming: how to refer to these registers <ul><li>start with \u201C$\u201D</li><li>directly use register number: $0 through $31 (decimal)</li><li>they also have names: $t1, $sp (better to use names in assembly language)</li></ul></li></ul></li><li>Hi and Lo registers <ul><li>for multiplication and division <ul><li>e.g., with 32 bits numbers, multiplication and division result in 64 bits numbers</li></ul></li><li>not directly addressable; must use special instructions to access (mfhi \u2014 move from Hi, mflo \u2014 move from lo)</li></ul></li><li>\u6808\u7684\u8D70\u5411\u662F\u4ECE\u9AD8\u5730\u5740\u5230\u4F4E\u5730\u5740</li></ul>',44),u=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,[l("em",null,"Register"),i(),l("em",null,"Number"),i("\u5BC4\u5B58\u5668\u7F16\u53F7")]),l("th",null,[l("em",null,"Alternative"),i(),l("em",null,"Name"),i("\u5BC4\u5B58\u5668\u540D")]),l("th",null,[l("em",null,"Description"),i("\u5BC4\u5B58\u5668\u7528\u9014")])])]),l("tbody",null,[l("tr",null,[l("td",null,[l("em",null,"0")]),l("td",null,[l("em",null,"zero")]),l("td",null,[l("em",null,"the value 0"),i("\u6C38\u8FDC\u8FD4\u56DE\u96F6")])]),l("tr",null,[l("td",null,[l("em",null,"1")]),l("td",null,[l("em",null,"$at")]),l("td",null,[l("em",null,[i("("),l("strong",null,"a"),i("ssembler "),l("strong",null,"t"),i("emporary) reserved by the assembler")]),i("\u6C47\u7F16\u4FDD\u7559\u5BC4\u5B58\u5668\uFF08\u4E0D\u53EF\u505A\u5176\u4ED6\u7528\u9014\uFF09")])]),l("tr",null,[l("td",null,[l("em",null,"2-3")]),l("td",null,[l("em",null,"$v0 - $v1")]),l("td",null,[l("em",null,[i("("),l("strong",null,"v"),i("alues) from expression evaluation and function results")]),i("\uFF08"),l("strong",null,"V"),i("alue\u7B80\u5199\uFF09\u5B58\u50A8\u8868\u8FBE\u5F0F\u6216\u8005\u662F\u51FD\u6570\u7684\u8FD4\u56DE\u503C")])]),l("tr",null,[l("td",null,[l("em",null,"4-7")]),l("td",null,[l("em",null,"$a0 - $a3")]),l("td",null,[l("em",null,[i("("),l("strong",null,"a"),i("rguments) First four parameters for subroutine.")]),i(),l("em",null,"Not preserved across procedure calls"),i("\uFF08"),l("strong",null,"A"),i("rgument\u7B80\u5199\uFF09\u5B58\u50A8\u5B50\u7A0B\u5E8F\u7684\u524D4\u4E2A\u53C2\u6570\uFF0C\u5728\u5B50\u7A0B\u5E8F\u8C03\u7528\u8FC7\u7A0B\u4E2D\u91CA\u653E")])]),l("tr",null,[l("td",null,[l("em",null,"8-15")]),l("td",null,[l("em",null,"$t0 - $t7")]),l("td",null,[l("em",null,[i("("),l("strong",null,"t"),i("emporaries) Caller saved if needed. Subroutines can use w/out saving.")]),i(),l("em",null,"Not preserved across procedure calls"),i("\uFF08"),l("strong",null,"T"),i("emp\u7B80\u5199\uFF09\u4E34\u65F6\u53D8\u91CF\uFF0C\u540C\u4E0A\u8C03\u7528\u65F6\u4E0D\u4FDD\u5B58")])]),l("tr",null,[l("td",null,[l("em",null,"16-23")]),l("td",null,[l("em",null,"$s0 - $s7")]),l("td",null,[l("em",null,[i("("),l("strong",null,"s"),i("aved values) - Callee saved.")]),i(),l("em",null,"A subroutine using one of these must save original and restore it before exiting."),i(),l("em",null,"Preserved across procedure calls"),i("\uFF08"),l("strong",null,"S"),i("aved or "),l("strong",null,"S"),i("tatic\u7B80\u5199\uFF1F\uFF09\u9759\u6001\u53D8\u91CF\uFF1F\u8C03\u7528\u65F6\u4FDD\u5B58")])]),l("tr",null,[l("td",null,[l("em",null,"24-25")]),l("td",null,[l("em",null,"$t8 - $t9")]),l("td",null,[l("em",null,[i("("),l("strong",null,"t"),i("emporaries) Caller saved if needed. Subroutines can use w/out saving.")]),i(),l("em",null,"These are in addition to $t0 - $t7 above."),i(),l("em",null,"Not preserved across procedure calls."),i("\uFF08"),l("strong",null,"T"),i("emp\u7B80\u5199\uFF09\u7B97\u662F\u524D\u9762$0"),l("sub",null,"$7\u7684\u4E00\u4E2A\u7EE7\u7EED\uFF0C\u5C5E\u6027\u540C$t0"),i("$t7")])]),l("tr",null,[l("td",null,[l("em",null,"26-27")]),l("td",null,[l("em",null,"$k0 - $k1")]),l("td",null,[l("em",null,"reserved for use by the interrupt/trap handler"),i("\uFF08brea"),l("strong",null,"K"),i(" off\u7B80\u5199\uFF1F\uFF09\u4E2D\u65AD\u51FD\u6570\u8FD4\u56DE\u503C\uFF0C\u4E0D\u53EF\u505A\u5176\u4ED6\u7528\u9014")])]),l("tr",null,[l("td",null,[l("em",null,"28")]),l("td",null,[l("em",null,"$gp")]),l("td",null,[l("em",null,[l("strong",null,"g"),i("lobal "),l("strong",null,"p"),i("ointer.")]),i(),l("em",null,[i("Points to the middle of the 64K block of memory in the static data segment.**\uFF08"),l("strong",null,"G"),i("lobal "),l("strong",null,"P"),i("ointer\u7B80\u5199\uFF09\u6307\u541164k(2^16)\u5927\u5C0F\u7684\u9759\u6001\u6570\u636E\u5757\u7684\u4E2D\u95F4\u5730\u5740\uFF08\u5B57\u9762\u4E0A\u597D\u50CF\u5C31\u662F\u8FD9\u4E2A\u610F\u601D\uFF0C\u5757\u7684\u4E2D\u95F4\uFF09")])])]),l("tr",null,[l("td",null,[l("em",null,"29")]),l("td",null,[l("em",null,"$sp")]),l("td",null,[l("em",null,[l("strong",null,"s"),i("tack "),l("strong",null,"p"),i("ointer")]),i(" *Points to last location on the stack.**(*"),l("strong",null,"S"),i("tack "),l("strong",null,"P"),i("ointer\u7B80\u5199\uFF09\u6808\u6307\u9488\uFF0C\u6307\u5411\u7684\u662F\u6808\u9876")])]),l("tr",null,[l("td",null,[l("em",null,"30")]),l("td",null,[l("em",null,[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"s"),l("mn",null,"8"),l("mi",{mathvariant:"normal"},"/")]),l("annotation",{encoding:"application/x-tex"},"s8/")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mord"},"8/")])])]),i("fp")])]),l("td",null,[l("em",null,[l("strong",null,"s"),i("aved value / "),l("strong",null,"f"),i("rame "),l("strong",null,"p"),i("ointer")]),i(),l("em",null,"Preserved across procedure calls"),i("("),l("strong",null,"S"),i("aved/"),l("strong",null,"F"),i("rame "),l("strong",null,"P"),i("ointer\u7B80\u5199)\u5E27\u6307\u9488")])]),l("tr",null,[l("td",null,[l("em",null,"31")]),l("td",null,[l("em",null,"$ra")]),l("td",null,[l("em",null,[l("strong",null,"r"),i("eturn "),l("strong",null,"a"),i("ddress")]),i("\u8FD4\u56DE\u5730\u5740\uFF0C\u76EE\u6D4B\u4E5F\u662F\u4E0D\u53EF\u505A\u5176\u4ED6\u7528\u9014")])])])],-1),d=e(`<p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201090154664.png" alt="img" loading="lazy"></p><h2 id="other-mips-registers" tabindex="-1"><a class="header-anchor" href="#other-mips-registers" aria-hidden="true">#</a> Other MIPS Registers</h2><ul><li><p>Special registers</p><ul><li><p>e.g., PC</p></li><li><p>programmer cannot access with most instructions</p></li></ul></li><li><p>Hi and Lo registers</p><ul><li>for multiplication and division</li><li>e.g., with 32 bits numbers, multiplication and division result in 64 bits numbers</li><li>not directly addressable; must use special instructions to access (mfhi \u2014 move from Hi, mflo \u2014 move from lo)</li></ul></li></ul><hr><h2 id="mips\u5185\u5B58\u5E03\u5C40" tabindex="-1"><a class="header-anchor" href="#mips\u5185\u5B58\u5E03\u5C40" aria-hidden="true">#</a> MIPS\u5185\u5B58\u5E03\u5C40</h2><p>MIPS\u5185\u5B58\u5E03\u5C40:\u5185\u5B58\u7684\u7EC4\u7EC7\u65B9\u5F0F (MIPS Memory Layout \u2014 How is memory organized)</p><ul><li>\u7528\u6237\u7A0B\u5E8F\u53EA\u80FD\u4F7F\u7528\u4E00\u90E8\u5206\u5185\u5B58 <ul><li>\u4ECE0x80000000\u52300x FFFFFFFF\uFF08\u9876\u90E8\uFF09\u7528\u4E8E\u64CD\u4F5C\u7CFB\u7EDF\u548CROM</li></ul></li><li>\u53EF\u4EE5\u7528\u4E8E\u7528\u6237\u7A0B\u5E8F\u7684\u90E8\u5206\u5206\u4E3A\u4E09\u4E2A\u90E8\u5206</li><li>\u6587\u672C\uFF0C\u6570\u636E\u548C\u5806\u6808\u6BB5\uFF08Text Segment, Data Segment, and Stack Segment\uFF09</li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210201091353168.png" alt="img" loading="lazy"></p><ul><li>Text segment\uFF1A\u5B58\u50A8\u7528\u6237\u7A0B\u5E8F\u7684\u673A\u5668\u8BED\u8A00\uFF08\u6587\u672C\uFF09</li><li>Data segment\uFF1A\u5B58\u50A8\u7A0B\u5E8F\u8FD0\u884C\u7684\u6570\u636E <ul><li>\u9759\u6001\u6570\u636E\uFF08static data\uFF09\uFF1A\u6570\u636E\u7684\u5927\u5C0F\u662F\u5DF2\u77E5\u7684\uFF0C\u5E76\u4E14\u5728\u7531\u6C47\u7F16\u7A0B\u5E8F\u5206\u914D\u65F6\u4E0D\u4F1A\u66F4\u6539</li><li>\u52A8\u6001\u6570\u636E\uFF08dynamic data\uFF09\uFF1A\u5728\u7A0B\u5E8F\u6267\u884C\u65F6\u5206\u914D\u548C\u91CA\u653E</li></ul></li><li>Stack Segment\uFF1A\u7528\u6765\u5B58\u653E\u5C40\u90E8\u53D8\u91CF\u548C\u51FD\u6570\u8FD4\u56DE\u5730\u5740\u3002\u968F\u7740\u8FC7\u7A0B\u7684\u6FC0\u6D3B\u548C\u505C\u7528\uFF0C\u53D8\u91CF\u548C\u53C2\u6570\u88AB\u538B\u5165\u5E76\u5F39\u51FA\u5806\u6808\u3002</li></ul><p>\u6CE8\u610F\uFF1A\u5806\u6808\u6BB5\u5411\u4E0B\u589E\u957F\uFF0C\u52A8\u6001\u6BB5\u5411\u4E0A\u589E\u957F</p><h3 id="\u4E00\u4E9B\u5173\u4E8E\u5185\u5B58\u7684\u57FA\u672C\u4E8B\u5B9E" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E9B\u5173\u4E8E\u5185\u5B58\u7684\u57FA\u672C\u4E8B\u5B9E" aria-hidden="true">#</a> \u4E00\u4E9B\u5173\u4E8E\u5185\u5B58\u7684\u57FA\u672C\u4E8B\u5B9E</h3><p><strong>MIPS\u5185\u5B58\u548C\u5730\u5740</strong></p><ul><li><p>MIPS\u670932\u4F4D\u548C64\u4F4D\uFF0C\u5927\u591A\u6570\u5B66\u4E60\u7684\u662F32\u4F4D\uFF0C\u6211\u4EEC\u4E5F\u5C06\u8BA8\u8BBA32\u4F4D\u3002</p></li><li><p>\u5B58\u50A8\u5668\u4E2D\u7684\u57FA\u672C\u201C\u5355\u4F4D\uFF08units\uFF09\u201D\u662F \u5B57\u8282byte\uFF088 \u4F4D\u300Cbits\u6BD4\u7279\u300D\uFF09</p><ul><li>bit\u6BD4\u7279\u503C \u53EF\u4E3A0\u62161</li></ul></li><li><p>\u5B57\u8282\u503C \u53EF\u4E3A\u4E00\u4E2A\u5B57\u8282</p></li><li><p>8\u6BD4\u7279bit = 1\u5B57\u8282byte\uFF0C\u662F\u56E0\u4E3A8\u4E2Abit\u53EF\u4EE5\u8868\u793A\u4E00\u4E2Abyte</p></li><li><p>\u5185\u5B58\u4E2D\u603B\u5171\u67092 ^ {32}\u4E2A\u5B57\u8282\uFF1B</p></li><li><p>\u6BCF\u4E2A\u5B57\u8282\u7684\u5730\u5740\u4E3A32bits\u957F\uFF1B</p></li><li><p>\u5730\u5740\u8303\u56F4\uFF1A0x00000000\u81F30x FFFFFFFF</p><ul><li>\u6CE8\uFF1A0x\u8868\u793A\u5341\u516D\u8FDB\u5236\u6570</li><li>\u6CE8\uFF1A\u5730\u57400x\u540E\u9762\u7684\u6BCF\u4E00\u4E2A\u503C\u90FD\u5360\u4E00\u4E2A\u5B57\u8282\uFF0C</li></ul></li></ul><p>32\u4F4D=4\u5B57\u8282\uFF0C\u53EF\u8868\u793A4^16 = 2 ^32\u4E2A\u4E0D\u540C\u7684\u5730\u5740 \u3002\u6545\u5730\u5740\u662F32\u4F4D\u957F\u3002 \u6240\u4EE532\u4F4D\u5904\u7406\u5668\u4E5F\u4EE3\u8868\u6BCF\u4E2A\u5730\u5740\u957F\u5EA6\u4E3A32\u6BD4\u7279\uFF0C64\u4F4D\u5904\u7406\u5668\u4E5F\u4EE3\u8868\u6BCF\u4E2A\u5730\u5740\u957F\u5EA6\u4E3A64\u6BD4\u7279\u3002\u7531\u6B64\u63A8\u65AD32bit\u5904\u7406\u5668\u6700\u5927\u652F\u6301 2^32byte = 4GByte\u5185\u5B58\uFF0C64\u4F4D\u5904\u7406\u5668\u6700\u5927\u652F\u6301 2^64 = 2147483648GByte\u5185\u5B58\u3002</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202091158498.png" alt="img" loading="lazy"></p><p><strong>\u64CD\u4F5C\u65B9\u5F0F</strong></p><ul><li>Operations\uFF08\u64CD\u4F5C\u65B9\u5F0F\uFF09 <ul><li>load: copy a bit pattern (could be data or instruction) in a designated(\u7279\u5B9A\u7684\uFF09 address in memory to a register (memory -&gt; register)</li><li>store: copy a bit pattern from register to memory at a designated address (register -&gt; memory)</li></ul></li><li>\u5185\u5B58\u901A\u5E38\u4EE5\u8FDE\u7EED\u5B57\u8282\uFF08\u4E00\u7EC4\u5B57\u8282\uFF09\u8FDB\u884C\u8BBF\u95EE <ul><li>one byte = 8 bits</li><li>one word = 4 bytes = 32bits(\u4EC5\u9002\u7528\u4E8EMIPS)</li><li>double word = 8 bytes = 64bits (\u4EC5\u9002\u7528\u4E8EMIPS)</li></ul></li><li>Memory is used to store instructions and data <ul><li>instruction has a fixed length of one word\uFF08\u6307\u4EE4\u7684\u56FA\u5B9A\u957F\u5EA6\u4E3A\u4E00\u4E2A\u5B57\uFF09</li></ul></li><li>data can have various bytes</li></ul><p>\u4F46\u662F\u5728x86_64\u4E2D</p><ul><li>one byte = 8 bits</li><li>one word = 2 bytes(\u4EC5\u9002\u7528\u4E8Ex86_64)</li><li>double word = 4 bytes = 64 bits(\u4EC5\u9002\u7528\u4E8Ex86_64)</li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210204163743709.png" alt="\u6B64\u56FE\u50CF\u7684alt\u5C5E\u6027\u4E3A\u7A7A\uFF1B\u6587\u4EF6\u540D\u4E3A20210204163743709.png" loading="lazy"></p><p>\u5BF9\u4E8E\u8FDE\u7EED\u7684\u5B57\u8282\uFF08\u4E00\u7EC4\u5B57\u8282\uFF09\uFF0C\u6211\u4EEC\u7ECF\u5E38\u4F7F\u7528\u7B2C\u4E00\u4E2A\u5B57\u8282\u7684\u5730\u5740\uFF08\u5373\u5730\u5740\u6700\u4F4E\u7684\u5B57\u8282\uFF09\uFF0C\u7A0D\u540E\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD</p><h2 id="mips-instructions-\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#mips-instructions-\u4ECB\u7ECD" aria-hidden="true">#</a> MIPS Instructions \u4ECB\u7ECD</h2><ul><li>There are 3 types of instructions in MIPS <ul><li>R-type instructions</li><li>I-type instructions</li><li>J-type instructions</li></ul></li><li>each instruction has 32 bits\uFF08fixed\uFF09</li></ul><h3 id="r-type-instructions" tabindex="-1"><a class="header-anchor" href="#r-type-instructions" aria-hidden="true">#</a> R-type Instructions</h3><p><strong>Format</strong></p><ul><li><p>three arguments\uFF08\u53C2\u6570\uFF09: two source registers\uFF08\u6E90\u5BC4\u5B58\u5668\uFF09 (<strong>rt</strong> and <strong>rs</strong>) and one destination register\uFF08\u76EE\u6807\u5BC4\u5B58\u5668\uFF09 (<strong>rd</strong>)</p></li><li><p>written as instruction</p><p>rd, rs, rt</p><ul><li>example: <code>add $t0, $t1, $t2 </code>meaning that add the values in $t1 and $t2 and stores the result in $t0</li></ul></li></ul><p><strong>The machine code</strong></p><ul><li>\u201C<strong>instruction rd, rs, rt</strong>\u201D is a line of code in assembly language</li><li>need to translate it to machine language (binary) \u2014 assembler</li><li>the machine code has fixed format (32 bits)</li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202160228473.png" alt="img" loading="lazy"></p><ul><li><p><strong>op</strong> or <strong>opcode</strong>(operation code)\uFF1Aindicate the type of an instruction; all R-type instructions have opcode 000000</p></li><li><p>rs, rt, rd</p><p>\uFF1Aindicate which register</p><ul><li>length = 5bits <ul><li>5bits reason\uFF1Athere are 2^4 =32 general-purpose registers</li><li>example: rd = 01000 -&gt; register $8 = $t0</li></ul></li></ul></li><li><p><strong>shamt</strong>: used in shift instruction; how many positions (bits) to shift</p></li><li><p><strong>funct</strong>: indicate which instruction; e.g., 100000 -&gt; add</p></li></ul><p>\u4E3E\u4F8B\uFF1Aadd</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202160848827.png" alt="img" loading="lazy"></p><p>\u4E3E\u4F8B\uFF1Ashift\uFF08\u79FB\u4F4D\uFF09</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202161043964.png" alt="img" loading="lazy"></p><h3 id="i-type-instructions" tabindex="-1"><a class="header-anchor" href="#i-type-instructions" aria-hidden="true">#</a> I-type Instructions</h3><p><strong>Format</strong></p><ul><li>three arguments: two registers (<strong>rt</strong> and <strong>rs</strong>) and a 16-bit \u201Cimmediate\u201D value</li><li>immediate value <ul><li>store the value directly within the instruction</li><li>could be a constant serving as one operand in the arithmetic operation ,or an address in load/store instructions</li></ul></li><li>assembly language: <strong>instruction</strong> <strong>rs, rt, imm</strong> (but not always)</li></ul><p><strong>Machine code</strong></p><ul><li>op: specify which instruction (different from R-type)</li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202161622665.png" alt="img" loading="lazy"></p><p><strong>Example: bitwise OR operation (ori)</strong></p><ul><li><p>assembly language:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> ori rs, rt, imm
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>operation: take the bit-wise OR between the value stored in rs and imm, then store the result in rt</li><li>example: ori $0, $8, 0x2 <ul><li>what is $0? : constant value 0</li><li>what is 0x2 \u2014&gt; It means 2 in hexadecimal,but its essence is 0000 0000 0000 0000 0000 0000 0000 0010 in 32 bits.</li></ul></li></ul></li></ul><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202164224390.png" alt="img" loading="lazy"></p><p>Is there any problem for the bit-wise OR? Yes! Value in $0 has 32 bits, imm has 16 bits; how can we do bit-wise OR?</p><ul><li>zero extension: MIPS will zero-extend the 16-bit operand imm to 31 bits, by padding with zeros on the left <ul><li>0000 0000 0000 0000 0000 0000 0000 0010 (0x2)</li><li>0000 0000 0000 0000 0000 0000 0000 0000 (value in $0)</li><li>0000 0000 0000 0000 0000 0000 0000 0010 (put in $8)</li></ul></li></ul><p>What\u2019s the effect of ori (bit-wise OR)? such as: loading the value stored in imm to the target register, by using the constant value in $0; \u4E3E\u4F8B\uFF1Ause ori to load decimal 17 into register $t1 <code>ori $0 $t1 0xF1</code></p><p><strong>Example: load word (lw)</strong></p><ul><li><p>operation: load a word from memory at a designated address to a register</p></li><li><p>problem: we need to specify the memory address (32 bits) in the instruction (32 bits); how can we do that?</p><ul><li><p>the address of that memory has 32 bits,the length of instruction is 32-bit</p></li><li><p>solution: An instruction that refers to memory uses a <strong>base register</strong> and an <strong>offset</strong>. The base register is a general purpose register that contains a 32-bit address. The offset is a 16-bit signed integer contained in the instruction. The sum of the address in the base register with the (sign-extended) offset forms the memory address.</p></li><li><p>memory address = base address + offset</p></li><li><p>offset: a 16-bit signed constant (immediate value\u300C\u7ACB\u5373\u6570\u300D)</p></li><li><p>basere (a name of the register to put data in) : the register containing the base address</p></li></ul></li><li><p>assembly language: <strong>lw, destreg, offset (basereg)</strong></p></li></ul><p><strong>Example: lw $8, 0x60 ($10)</strong></p><p>suppose $10 stores the value 0x00400000 (base address) memory address = 0x00400060 load the word in the memory (0x00400060) to $8</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202170315338.png" alt="img" loading="lazy"></p><p><strong>Example: store word (sw)</strong></p><ul><li>assembly language: <strong>sw, t, offset (basereg)</strong></li><li>operation: copy the data stored in register t to the memory at address ( base address in basereg + offset)</li><li>example: sw $12, 0x50 ($13)</li></ul><p><strong>Other data transfer instructions (not exhaustive) in I-type</strong></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202173920386.png" alt="img" loading="lazy"></p><h3 id="j-type-instructions" tabindex="-1"><a class="header-anchor" href="#j-type-instructions" aria-hidden="true">#</a> J-type Instructions</h3><ul><li>Function: control the program flow to a given instruction</li><li>Format: <strong>instruction addr</strong></li></ul><p>Typical example: <strong>j addr</strong> (jump to the instruction at address addr / change the content of pc)</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202174531959.png" alt="img" loading="lazy"></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202175302333.png" alt="img" loading="lazy"></p><p>\u4E3A\u4EC0\u4E48Address\u603B\u662F\u76F8\u96944\u4E2A\uFF1A\u4E00\u6761\u6307\u4EE4\u5728\u5185\u5B58\u4E2D\u5360\u75284\u4E2A\u5B57\u8282\uFF0C\u53EA\u7D22\u5F15\u7B2C\u4E00\u4E2A\u5730\u5740\u7F16\u7801\u5373\u53EF\u3002\u6240\u4EE5\u6211\u4EEC\u4F7F\u7528\u6700\u4F4E\u5B57\u8282\u7684\u5730\u5740\u6765\u6307\u4EE3\u8FDE\u7EED\u5B57\u8282\u3002</p><p><strong>Machine code</strong></p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202174135128.png" alt="img" loading="lazy"></p><p>Again, we have a problem: addr has 26 bits, the address of an instruction has 32 bits. How is this solved in MIPS? \u2014 we need a mechanism to transform the 26-bit address in the instruction to a 32-bit address.</p><ul><li><p>one instruction occupies 4 bytes in memory (recall that each byte in memory has an address)</p></li><li><p>we use the address of the lowest byte to refer to contiguous bytes</p><ul><li><p>restriction: the address of the lowest byte should be a multiple of 4</p></li><li><p>as a result, the right-most two bits in the address of an instruction are always 00</p></li><li><p>we still need 30 bits</p></li></ul></li><li><p>the left-most 4 bits in the address</p><ul><li>they are set as the left-most 4 bits of the content in PC <ul><li>why? do not jump too far away</li><li>so we only need 26bits</li></ul></li></ul></li></ul><p>the target address we want to jump to (how did we get it?)</p><p><img src="https://hssvr01.oss-cn-zhangjiakou.aliyuncs.com/hongshu/file/2021/02/20210202181541238.png" alt="img" loading="lazy"></p><hr><h2 id="\u505A\u9898\u7B14\u8BB0" tabindex="-1"><a class="header-anchor" href="#\u505A\u9898\u7B14\u8BB0" aria-hidden="true">#</a> \u505A\u9898\u7B14\u8BB0</h2><ol><li>ori\u6307\u4EE4\u53EF\u4EE5\u5C06\u8D1F\u6574\u6570\u7684\u4E8C\u8FDB\u5236\u8865\u7801\u8868\u793A\u5F62\u5F0F\u653E\u5165\u5BC4\u5B58\u5668\u5417\uFF1F \u4E0D\u80FD\uFF0C\u56E0\u4E3A\u8D1F\u6570\u7684\u4E8C\u8FDB\u5236\u8865\u7801\u62D3\u5C55\u8981\u5728\u524D\u9762\u88651\uFF0C\u4F46\u662Fori \u901A\u5E38\u4E0E$0\u7ED3\u5408\u4F7F\u7528\uFF0C\u4F1A\u5BFC\u81F4\u524D\u9762\u88650.</li></ol><h2 id="\u76F8\u5173\u7F51\u7AD9\u548C\u8F6F\u4EF6\u63A8\u8350" tabindex="-1"><a class="header-anchor" href="#\u76F8\u5173\u7F51\u7AD9\u548C\u8F6F\u4EF6\u63A8\u8350" aria-hidden="true">#</a> \u76F8\u5173\u7F51\u7AD9\u548C\u8F6F\u4EF6\u63A8\u8350</h2><ul><li>\u7F8E\u56FD\u4E2D\u592E\u5EB7\u6D85\u72C4\u683C\u5DDE\u7ACB\u5927\u5B66MIPS\u5B66\u4E60\u548C\u8054\u7CFB\uFF1Ahttps://chortle.ccsu.edu/assemblytutorial/</li><li>Qtspim\uFF0C\u7528\u4E8E\u7F16\u8F91MIPS\u6587\u4EF6\uFF1Ahttp://spimsimulator.sourceforge.net/</li><li>MIPS\u6587\u4EF6\u5728\u7EBF\u8FD0\u884C\u5668\uFF1Ahttps://spim.app.zhongxueguan.cn/</li><li>Compiler-Explorer\uFF1Ahttps://godbolt.org/</li><li>https://phoenix.goucher.edu/~kelliher/f2009/cs220/mipsir.html</li><li>http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s07.html</li></ul><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>https://www.cnblogs.com/thoupin/p/4018455.html</li><li>https://blog.csdn.net/czh500/article/details/89947536</li><li>https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/</li><li>Dr. Kai,ZHOU&#39;s PowerPoint</li><li>\u7F8E\u56FD\u4E2D\u592E\u5EB7\u6D85\u72C4\u683C\u5DDE\u7ACB\u5927\u5B66\uFF0Chttps://chortle.ccsu.edu/assemblytutorial/</li></ul>`,74);function h(p,c){return s(),n(a,null,[o,u,d],64)}var m=t(r,[["render",h]]);export{m as default};
