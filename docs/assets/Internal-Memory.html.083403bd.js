import{_ as e,f as i}from"./app.e03d7337.js";const a={},t=i('<h1 id="internal-memory" tabindex="-1"><a class="header-anchor" href="#internal-memory" aria-hidden="true">#</a> Internal Memory</h1><h2 id="recap" tabindex="-1"><a class="header-anchor" href="#recap" aria-hidden="true">#</a> Recap</h2><h3 id="internal-memory-cache" tabindex="-1"><a class="header-anchor" href="#internal-memory-cache" aria-hidden="true">#</a> Internal memory: Cache</h3><ul><li>why? -- locality of references: CPU tends to access clusters of data at certain time\u300C\u4E3A\u4EC0\u4E48\uFF1F -\u5F15\u7528\u7684\u4F4D\u7F6E\uFF1ACPU\u503E\u5411\u4E8E\u5728\u7279\u5B9A\u65F6\u95F4\u8BBF\u95EE\u6570\u636E\u96C6\u7FA4\u300D</li><li>the introduction of fast but small memory (Cache) between CPU and main memory\u300C\u5728CPU\u548C\u4E3B\u5185\u5B58\u4E4B\u95F4\u5F15\u5165\u5FEB\u901F\u4F46\u8F83\u5C0F\u7684\u5185\u5B58\uFF08Cache\uFF09\u300D</li><li>mechanism: dynamically copy clusters into Cache -- virtually, we are using fast and large memory\u300C\u673A\u5236\uFF1A\u5C06\u96C6\u7FA4\u52A8\u6001\u590D\u5236\u5230Cache\u4E2D-\u5B9E\u9645\u4E0A\uFF0C\u6211\u4EEC\u6B63\u5728\u4F7F\u7528\u5FEB\u901F\u4E14\u5927\u5BB9\u91CF\u7684\u5185\u5B58\u300D</li></ul><h3 id="design-elements-of-cache" tabindex="-1"><a class="header-anchor" href="#design-elements-of-cache" aria-hidden="true">#</a> Design elements of Cache</h3><ul><li>mapping function: how to map blocks to cache lines <ul><li>direct mapping vs. associative mapping</li></ul></li></ul><p>other issues: replacement algorithms, writing policy, etc.</p><h2 id="internal-memory-1" tabindex="-1"><a class="header-anchor" href="#internal-memory-1" aria-hidden="true">#</a> Internal Memory</h2><p>&quot;Internal&quot;: the CPU can have direct access</p><ul><li>main memory, registers, cache</li><li>ROM (read only memory)</li></ul><p>There are different types of internal memory, but they share some common features\u300C\u5185\u90E8\u5B58\u50A8\u5668\u7684\u7C7B\u578B\u4E0D\u540C\uFF0C\u4F46\u662F\u5B83\u4EEC\u5177\u6709\u4E00\u4E9B\u5171\u540C\u7684\u7279\u5F81\u300D</p><ul><li>implemented using semiconductor technology\u300C\u4F7F\u7528\u534A\u5BFC\u4F53\u6280\u672F\u5B9E\u73B0\u300D</li><li>random access method \u300C\u968F\u673A\u8BBF\u95EE\u65B9\u6CD5\u300D</li><li>cope with the speed of CPU\u300C\u5E94\u4ED8CPU\u7684\u901F\u5EA6\u300D</li></ul><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h3><img src="https://pic.hanjiaming.com.cn/2021/04/14/eb2dbb3e5c0e6.png" alt="image.png" title="image.png"><p><strong>Random access memory (RAM): it is a mis-use of term. All the above memory use random aceess method; however, we usually use RAM to refer to main memory\u300C\u968F\u673A\u5B58\u53D6\u5B58\u50A8\u5668\uFF08RAM\uFF09\uFF1A\u8FD9\u662F\u672F\u8BED\u7684\u9519\u8BEF\u4F7F\u7528\u3002\u4EE5\u4E0A\u6240\u6709\u8BB0\u5FC6\u5747\u91C7\u7528\u968F\u673Aaceess\u65B9\u6CD5\uFF1B\u4F46\u662F\uFF0C\u6211\u4EEC\u901A\u5E38\u4F7F\u7528RAM\u6765\u5F15\u7528\u4E3B\u5185\u5B58\u300D</strong></p><h2 id="memory-cell" tabindex="-1"><a class="header-anchor" href="#memory-cell" aria-hidden="true">#</a> Memory Cell</h2><p>Memory Cell -- the Basic Element of Memory\u300C\u8BB0\u5FC6\u5355\u5143-\u8BB0\u5FC6\u7684\u57FA\u672C\u8981\u7D20\u300D</p><p>Despite of the memory types, all semiconductor memory cells share common properties</p><ul><li>two stable states, used to represent 0 and 1\u300C\u4E24\u4E2A\u7A33\u5B9A\u72B6\u6001\uFF0C\u5206\u522B\u4EE3\u88680\u548C1\u300D</li><li>can be written into (set the state)\u300C\u53EF\u4EE5\u5199\u5165\uFF08\u8BBE\u7F6E\u72B6\u6001\uFF09\u300D</li><li>can be read to sense the state\u300C\u53EF\u4EE5\u8BFB\u53D6\u4EE5\u611F\u6D4B\u72B6\u6001\u300D</li></ul><h3 id="abstract-model" tabindex="-1"><a class="header-anchor" href="#abstract-model" aria-hidden="true">#</a> Abstract Model</h3><p>Three &quot;terminals&quot; for one cell:\u300C\u4E00\u4E2A\u5355\u5143\u7684\u4E09\u4E2A\u201C\u7EC8\u7AEF\u201D\uFF1A\u300D</p><ul><li>Select: select the cell for read or write operations</li><li>Control: to write or to read</li><li>Data: the bit</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/7d36987c08ce8.png" alt="image.png" title="image.png"><h3 id="implementation-technologies" tabindex="-1"><a class="header-anchor" href="#implementation-technologies" aria-hidden="true">#</a> Implementation Technologies</h3><img src="https://pic.hanjiaming.com.cn/2021/04/14/b5d9b3851a851.png" alt="image.png" title="image.png"><p>Capacitors\u300C\u7535\u5BB9\u5668\u300D and Transistors\u300C\u6676\u4F53\u7BA1\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/14/30768ee0530c6.png" alt="image.png" title="image.png"><h3 id="dynamic-ram-cells" tabindex="-1"><a class="header-anchor" href="#dynamic-ram-cells" aria-hidden="true">#</a> Dynamic RAM Cells</h3><p>Data is stored as the charge of capacitors\u300C\u6570\u636E\u5B58\u50A8\u4E3A\u7535\u5BB9\u5668\u7684\u7535\u8377\u300D</p><ul><li>high level of charge -- 1</li><li>low level of charge -- 0</li><li>dynamic: DRAM requires periodic charge refreshing to maintain data storage (capacitors have the tendency to leak charge)\u300C\u52A8\u6001\uFF1ADRAM\u9700\u8981\u5B9A\u671F\u5237\u65B0\u7535\u8377\u4EE5\u7EF4\u6301\u6570\u636E\u5B58\u50A8\uFF08\u7535\u5BB9\u5668\u6709\u6CC4\u6F0F\u7535\u8377\u7684\u8D8B\u52BF\uFF09\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/7932f84c0ff55.png" alt="image.png" title="image.png"><ul><li>Write: hight (low) voltage is applied to Bit line to charge the capacitor for 1 (0)\u300C\u5199\uFF1A\u5411\u4F4D\u7EBF\u65BD\u52A0\u9AD8\uFF08\u4F4E\uFF09\u7535\u538B\u4EE5\u5BF9\u7535\u5BB9\u5668\u5145\u75351\uFF080\uFF09\u300D</li><li>Read: charge stored in the capacitor is fed out onto the Bit line, a sense amplifier can compare the capacitor voltage to a reference value \u300C\u8BFB\u53D6\uFF1A\u7535\u5BB9\u5668\u4E2D\u5B58\u50A8\u7684\u7535\u8377\u88AB\u9988\u9001\u5230\u4F4D\u7EBF\u4E0A\uFF0C\u8BFB\u51FA\u653E\u5927\u5668\u53EF\u4EE5\u5C06\u7535\u5BB9\u5668\u7535\u538B\u4E0E\u53C2\u8003\u503C\u8FDB\u884C\u6BD4\u8F83\u300D</li></ul><h3 id="static-ram-cells" tabindex="-1"><a class="header-anchor" href="#static-ram-cells" aria-hidden="true">#</a> Static RAM Cells</h3><p>Static RAM Cells\u300C\u9759\u6001RAM\u5355\u5143\u300D</p><ul><li>binary bit is stored using flip-flop logic gates configurations -- essentially, transistors (as switches) and voltage\u300C\u4F7F\u7528\u89E6\u53D1\u5668\u903B\u8F91\u95E8\u914D\u7F6E\u5B58\u50A8\u4E8C\u8FDB\u5236\u4F4D-\u672C\u8D28\u4E0A\u662F\u6676\u4F53\u7BA1\uFF08\u4F5C\u4E3A\u5F00\u5173\uFF09\u548C\u7535\u538B\u300D</li><li>static: the cell will hold the data as long as power is supplied to it (no need to refresh)\u300C\u9759\u6001\uFF1A\u53EA\u8981\u4F9B\u7535\uFF0C\u5355\u5143\u5C06\u4FDD\u5B58\u6570\u636E\uFF08\u65E0\u9700\u5237\u65B0\uFF09\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/4bce0d9a1021b.png" alt="image.png" title="image.png"><ul><li><p>Four transistors (T1, T2, T3, T4) are cross connected in an arrangement that produces stable states -- represent 1/0\u300C\u56DB\u4E2A\u6676\u4F53\u7BA1\uFF08T1\uFF0CT2\uFF0CT3\uFF0CT4\uFF09\u4EA4\u53C9\u8FDE\u63A5\uFF0C\u4EA7\u751F\u7A33\u5B9A\u72B6\u6001-\u8868\u793A1/0\u300D</p></li><li><p>Address line uses T5 and T6 to select this cell\u300C\u5730\u5740\u884C\u4F7F\u7528T5\u548CT6\u9009\u62E9\u8BE5\u5355\u5143\u683C\u300D</p></li><li><p>Read</p><ul><li>stable state 1: C1 is high, C2 is low -&gt; T1 and T4 are OFF, T2 and T3 are ON -&gt; read high voltage from Bit line B\u300C\u7A33\u5B9A\u72B6\u60011\uFF1AC1\u4E3A\u9AD8\uFF0CC2\u4E3A\u4F4E-&gt; T1\u548CT4\u622A\u6B62\uFF0CT2\u548CT3\u5BFC\u901A-&gt;\u4ECE\u4F4D\u7EBFB\u8BFB\u53D6\u9AD8\u7535\u538B\u300D</li><li>stable state 0: C1 is low, C2 is high -&gt; T1 and T4 are ON, T2 and T3 are OFF -&gt; read low voltage from Bit line B</li></ul></li><li><p>Write</p><ul><li>Apply high voltage (1) or low voltage (0) to Bit line B --&gt; force the transistors into the proper states --&gt; corresponding stable states\u300C\u7A33\u5B9A\u72B6\u60010\uFF1AC1\u4E3A\u4F4E\u7535\u5E73\uFF0CC2\u4E3A\u9AD8-&gt; T1\u548CT4\u5BFC\u901A\uFF0CT2\u548CT3\u622A\u6B62-&gt;\u4ECE\u4F4D\u7EBFB\u8BFB\u53D6\u4F4E\u7535\u538B\u300D</li></ul></li></ul><h3 id="dram-vs-sram" tabindex="-1"><a class="header-anchor" href="#dram-vs-sram" aria-hidden="true">#</a> DRAM vs. SRAM</h3><ul><li>Common <ul><li>volatile -- need continuous power\u300C\u5E38\u89C1\uFF1A\u6613\u6325\u53D1-\u9700\u8981\u6301\u7EED\u4F9B\u7535\u300D</li></ul></li><li>Difference <ul><li>DRAM cell is simpler and smaller, thus denser (more cells per unit area) and less expensive\u300CDRAM\u5355\u5143\u66F4\u7B80\u5355\uFF0C\u66F4\u5C0F\uFF0C\u56E0\u6B64\u5BC6\u5EA6\u66F4\u9AD8\uFF08\u6BCF\u5355\u4F4D\u9762\u79EF\u66F4\u591A\u7684\u5355\u5143\uFF09\u4E14\u4EF7\u683C\u66F4\u4F4E\u300D</li><li>however, DRAM requires the supporting refresh circuitry\u300C\u4F46\u662F\uFF0CDRAM\u9700\u8981\u652F\u6301\u7684\u5237\u65B0\u7535\u8DEF\u300D</li><li>DRAM tends to be favored for large memory requirement\u300CDRAM\u503E\u5411\u4E8E\u6EE1\u8DB3\u5927\u5185\u5B58\u9700\u6C42\u300D</li><li>DRAM for main memory, SRAM for cache</li></ul></li></ul><h2 id="read-only-memory-rom" tabindex="-1"><a class="header-anchor" href="#read-only-memory-rom" aria-hidden="true">#</a> Read-Only Memory (ROM)</h2><p>ROM characteristics\u300CROM\u7279\u6027\u300D</p><ul><li><p>contains permanent data that cannot be changed (cannot write) -- not exactly, depending on the types of ROM\u300C\u5305\u542B\u65E0\u6CD5\u66F4\u6539\uFF08\u65E0\u6CD5\u5199\u5165\uFF09\u7684\u6C38\u4E45\u6570\u636E-\u4E0D\u5B8C\u5168\u53D6\u51B3\u4E8EROM\u7684\u7C7B\u578B\u300D</p></li><li><p>data are burned into the chip during fabrication process -- relatively large fixed cost, and there is no room for error\u300C\u6570\u636E\u5728\u5236\u9020\u8FC7\u7A0B\u4E2D\u88AB\u70E7\u5165\u82AF\u7247-\u56FA\u5B9A\u6210\u672C\u76F8\u5BF9\u8F83\u9AD8\uFF0C\u5E76\u4E14\u6CA1\u6709\u9519\u8BEF\u4F59\u5730\u300D</p></li><li><p>nonvolatile, no need for continous power\u300C\u975E\u6613\u5931\u6027\uFF0C\u65E0\u9700\u6301\u7EED\u4F9B\u7535\u300D</p></li></ul><h2 id="special-types-of-rom" tabindex="-1"><a class="header-anchor" href="#special-types-of-rom" aria-hidden="true">#</a> Special Types of ROM</h2><h3 id="programmable-rom-prom" tabindex="-1"><a class="header-anchor" href="#programmable-rom-prom" aria-hidden="true">#</a> Programmable ROM (PROM)</h3><p>Programmable ROM (PROM)\u300C\u53EF\u7F16\u7A0BROM\uFF08PROM\uFF09\u300D</p><ul><li>like ROM, it can be written into only once (after fabrication process)</li><li>customers can use special equipment to electrically write once</li><li>idea: each bit is locked by a fuse; initially all 1&#39;s in the chip, if burn the fuse, change 1 to 0 (write once)</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/5c19bc3e8eeaf.png" alt="image.png" title="image.png"><h3 id="read-mostly-memory" tabindex="-1"><a class="header-anchor" href="#read-mostly-memory" aria-hidden="true">#</a> Read-Mostly Memory</h3><p>Read-Mostly Memory (a variation of ROM\u300CROM\u7684\u53D8\u4F53\u300D)</p><ul><li>we can re-write the memory, but at a higher cost\u300C\u6211\u4EEC\u53EF\u4EE5\u91CD\u65B0\u5199\u5165\u5185\u5B58\uFF0C\u4F46\u662F\u6210\u672C\u66F4\u9AD8\u300D</li><li>useful for applications in which read operations are far more frequent then write operations, but for which nonvolatile storage is required\u300C\u5BF9\u4E8E\u8BFB\u64CD\u4F5C\u6BD4\u5199\u64CD\u4F5C\u66F4\u9891\u7E41\u4F46\u9700\u8981\u975E\u6613\u5931\u6027\u5B58\u50A8\u7684\u5E94\u7528\u7A0B\u5E8F\u5F88\u6709\u7528\u300D</li><li>three common types: EPROM, EEPROM, flash memory\u300C\u4E09\u79CD\u5E38\u89C1\u7C7B\u578B\uFF1AEPROM\uFF0CEEPROM\uFF0C\u95EA\u5B58\u300D</li></ul><h3 id="erasable-programmable-rom-eprom" tabindex="-1"><a class="header-anchor" href="#erasable-programmable-rom-eprom" aria-hidden="true">#</a> Erasable Programmable ROM (EPROM)</h3><p>Erasable Programmable ROM (EPROM)\u300C\u53EF\u64E6\u53EF\u7F16\u7A0BROM\uFF08EPROM\uFF09\u300D</p><ul><li>before a write operation, all the storage cells must be erased to the same initial state by exposure to ultraviolet radiation\u300C\u5728\u5199\u64CD\u4F5C\u4E4B\u524D\uFF0C\u5FC5\u987B\u901A\u8FC7\u66B4\u9732\u5728\u7D2B\u5916\u7EBF\u4E0B\u5C06\u6240\u6709\u5B58\u50A8\u5355\u5143\u64E6\u9664\u5230\u76F8\u540C\u7684\u521D\u59CB\u72B6\u6001\u300D</li><li>then write electronically\u300C\u7136\u540E\u7528\u7535\u5B50\u65B9\u5F0F\u5199\u300D</li><li>read -- exposure \u2013 write\u300C\u9605\u8BFB-\u66DD\u5149-\u5199\u300D erasable: through exposure (could take 20 mins)\u300C\u53EF\u64E6\uFF1A\u901A\u8FC7\u66DD\u5149\uFF08\u53EF\u80FD\u9700\u898120\u5206\u949F\uFF09\u300D more flexible than PROM\u300C\u6BD4PROM\u66F4\u7075\u6D3B\u300D</li></ul><h3 id="electronically-erasable-programmable-rom-eeprom" tabindex="-1"><a class="header-anchor" href="#electronically-erasable-programmable-rom-eeprom" aria-hidden="true">#</a> Electronically Erasable Programmable ROM (EEPROM)</h3><p>\u7535\u5B50\u53EF\u64E6\u53EF\u7F16\u7A0BROM\uFF08EEPROM\uFF09</p><ul><li><ul><li>updates (write operations) happen at byte level (not entire chip)\u300C\u66F4\u65B0\uFF08\u5199\u64CD\u4F5C\uFF09\u53D1\u751F\u5728\u5B57\u8282\u7EA7\u522B\uFF08\u4E0D\u662F\u6574\u4E2A\u82AF\u7247\uFF09\u300D</li><li>however, write operation takes considerably longer than read (several hundred microseconds per byte)\u300C\u4F46\u662F\uFF0C\u5199\u64CD\u4F5C\u8981\u6BD4\u8BFB\u64CD\u4F5C\u82B1\u8D39\u66F4\u957F\u7684\u65F6\u95F4\uFF08\u6BCF\u5B57\u8282\u51E0\u767E\u5FAE\u79D2\uFF09\u300D</li><li>more expensive and less dence (fewer bits per chip) than EPROM\u300C\u6BD4EPROM\u66F4\u6602\u8D35\uFF0C\u66F4\u7701\u94B1\uFF08\u6BCF\u4E2A\u82AF\u7247\u4E0A\u7684\u4F4D\u6570\u66F4\u5C11\uFF09\u300D</li></ul></li></ul><h3 id="flash-memory" tabindex="-1"><a class="header-anchor" href="#flash-memory" aria-hidden="true">#</a> Flash Memory</h3><ul><li>intermediate between EPROM and EEPROM\u300CEPROM\u548CEEPROM\u4E4B\u95F4\u7684\u4E2D\u95F4\u5C42\u300D</li><li>erasure at block level (compred to byte-level and chip level)\u300C\u5757\u7EA7\u522B\u7684\u64E6\u9664\uFF08\u4E0E\u5B57\u8282\u7EA7\u522B\u548C\u82AF\u7247\u7EA7\u522B\u76F8\u6BD4\uFF09\u300D</li></ul><h3 id="summary-of-rom" tabindex="-1"><a class="header-anchor" href="#summary-of-rom" aria-hidden="true">#</a> Summary of ROM</h3><img src="https://pic.hanjiaming.com.cn/2021/04/14/622e2c21f6c0e.png" alt="image.png" title="image.png"><h2 id="chip-logic" tabindex="-1"><a class="header-anchor" href="#chip-logic" aria-hidden="true">#</a> Chip Logic</h2><p>Semiconductor memory comes in package chips\u300C\u534A\u5BFC\u4F53\u5B58\u50A8\u5668\u5305\u542B\u5728\u5C01\u88C5\u82AF\u7247\u4E2D\u300D</p><ul><li>each chip contains an array of memory cells\u300C\u6BCF\u4E2A\u82AF\u7247\u5305\u542B\u4E00\u4E2A\u5B58\u50A8\u5355\u5143\u9635\u5217\u300D</li><li>essential\u300C\u57FA\u672C\u300D task: provide address to chip, and access bits\u300C\u57FA\u672C\u4EFB\u52A1\uFF1A\u63D0\u4F9B\u82AF\u7247\u5730\u5740\u548C\u8BBF\u95EE\u4F4D\u300D</li></ul><p><strong>how to organize and wire the cells in chips to satisfy the needs for addressing\u300C\u5982\u4F55\u7EC4\u7EC7\u548C\u8FDE\u63A5\u82AF\u7247\u4E2D\u7684\u5355\u5143\u4EE5\u6EE1\u8DB3\u5BFB\u5740\u9700\u6C42\u300D</strong></p><img src="https://pic.hanjiaming.com.cn/2021/04/14/36d7de8acdc3b.png" alt="image.png" title="image.png"><p><strong>Key issue: how to group cells into a logical piece of data\u300C\u5173\u952E\u95EE\u9898\uFF1A\u5982\u4F55\u5C06\u5355\u5143\u683C\u5206\u7EC4\u4E3A\u903B\u8F91\u6570\u636E\u300D</strong></p><ul><li>how many bits to read/write at a time</li><li>one extreme: 1 bit a time\u300C\u4E00\u4E2A\u6781\u7AEF\uFF1A\u4E00\u6B211\u6BD4\u7279\u300D</li><li>the other extreme: one word a time (word: the unit for data processing in CPU)\u300C\u53E6\u4E00\u4E2A\u6781\u7AEF\uFF1A\u4E00\u6B21\u4E00\u4E2A\u5B57\uFF08\u5B57\uFF1ACPU\u4E2D\u7528\u4E8E\u6570\u636E\u5904\u7406\u7684\u5355\u4F4D\uFF09\u300D</li><li>in between: k bits for one chip, combine multiple chips to get a word (example later)\u300C\u4ECB\u4E8E\u4E24\u8005\u4E4B\u95F4\uFF1A\u4E00\u4E2A\u82AF\u7247\u7684k\u4F4D\uFF0C\u5408\u5E76\u591A\u4E2A\u82AF\u7247\u5F97\u5230\u4E00\u4E2A\u5B57\uFF08\u540E\u9762\u7684\u793A\u4F8B\uFF09\u300D</li></ul><h3 id="simple-example-of-64-cells" tabindex="-1"><a class="header-anchor" href="#simple-example-of-64-cells" aria-hidden="true">#</a> Simple Example of 64 Cells</h3><p><strong>Read/Write 1 bit a time (logical data unit = 1 bit)\u300C\u4E00\u6B21\u8BFB/\u51991\u4F4D\uFF08\u903B\u8F91\u6570\u636E\u5355\u5143= 1\u4F4D\uFF09\u300D</strong></p><ul><li>each cell needs to have an address\u300C\u6BCF\u4E2A\u5355\u5143\u90FD\u9700\u8981\u6709\u4E00\u4E2A\u5730\u5740\u300D</li><li>64 = 2^{6}, we need 6 address lines\u300C64 = 2 ^ {6}\uFF0C\u6211\u4EEC\u9700\u89816\u6761\u5730\u5740\u7EBF\u300D</li><li>remember decoder? we can use a 6-to-64 decoder\u300C\u8FD8\u8BB0\u5F97\u89E3\u7801\u5668\u5417\uFF1F\u6211\u4EEC\u53EF\u4EE5\u4F7F\u75286\u523064\u7684\u89E3\u7801\u5668\u300D</li><li>6 input address lines, 64 output select lines -- each is connected to the select terminal of the cell\u300C6\u6761\u8F93\u5165\u5730\u5740\u7EBF\uFF0C64\u6761\u8F93\u51FA\u9009\u62E9\u7EBF-\u6BCF\u6761\u8FDE\u63A5\u5230\u5355\u5143\u7684\u9009\u62E9\u7AEF\u5B50\u300D</li><li>in the chip package, 6 address pins, 1 data pins\u300C\u5728\u82AF\u7247\u5C01\u88C5\u4E2D\uFF0C\u67096\u4E2A\u5730\u5740\u5F15\u811A\uFF0C1\u4E2A\u6570\u636E\u5F15\u811A\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/72e7437a17b73.png" alt="image.png" title="image.png" width="400px"><ul><li>we also need to consider the memory access cyles\u300C\u6211\u4EEC\u8FD8\u9700\u8981\u8003\u8651\u5185\u5B58\u8BBF\u95EE\u5468\u671F\u300D</li><li>in each cycle, we provide an address to access 1 bit\u300C\u5728\u6BCF\u4E2A\u5468\u671F\u4E2D\uFF0C\u6211\u4EEC\u63D0\u4F9B\u4E00\u4E2A\u5730\u5740\u6765\u8BBF\u95EE1\u4F4D\u300D</li><li>64 cycles to access 64 bits -- too slow\u300C64\u4E2A\u5468\u671F\u8BBF\u95EE64\u4F4D-\u592A\u6162\u300D</li></ul><p><strong>Read/Write 8 bits a time (logical data unit = 8 bits)\u300C\u4E00\u6B21\u8BFB/\u51998\u4F4D\uFF08\u903B\u8F91\u6570\u636E\u5355\u5143= 8\u4F4D\uFF09\u300D</strong></p><ul><li>cells are organized into 8 groups, each group containing 8 cells\u300C\u5355\u5143\u683C\u5206\u4E3A8\u7EC4\uFF0C\u6BCF\u7EC4\u5305\u542B8\u4E2A\u5355\u5143\u683C\u300D</li><li>one group share the same address\u300C\u4E00\u7EC4\u5171\u4EAB\u76F8\u540C\u7684\u5730\u5740\u300D</li><li>3 address pins, 8 data pins\u300C3\u4E2A\u5730\u5740\u5F15\u811A\uFF0C8\u4E2A\u6570\u636E\u5F15\u811A\u300D <ul><li>64/8 = 8</li></ul></li><li>less memory access cycles\u300C\u66F4\u5C11\u7684\u5185\u5B58\u8BBF\u95EE\u5468\u671F\u300D</li></ul><p><strong>Read/Write 4 bits a time (logical data unit = 4 bits)\u300C\u4E00\u6B21\u8BFB/\u51994\u4F4D\uFF08\u903B\u8F91\u6570\u636E\u5355\u5143= 4\u4F4D\uFF09\u300D</strong></p><ul><li>we can use two chips A and B\u300C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u4E24\u4E2A\u82AF\u7247A\u548CB\u300D</li><li>access 4 bits from A, and 4 bits from B using the same address\u300C\u4F7F\u7528\u76F8\u540C\u7684\u5730\u5740\u8BBF\u95EEA\u76844\u4F4D\u548CB\u76844\u4F4D\u300D</li><li>together, it is like accessing 8 bits one time\u300C\u5728\u4E00\u8D77\uFF0C\u5C31\u50CF\u4E00\u6B21\u8BBF\u95EE8\u4F4D\u300D</li><li>more flexible for different processors\u300C\u5BF9\u4E8E\u4E0D\u540C\u7684\u5904\u7406\u5668\u66F4\u52A0\u7075\u6D3B\u300D</li><li>the size of the logical data unit is a key design parameter\u300C\u903B\u8F91\u6570\u636E\u5355\u5143\u7684\u5927\u5C0F\u662F\u5173\u952E\u8BBE\u8BA1\u53C2\u6570\u300D</li></ul><h3 id="example-of-16-mbit-dram" tabindex="-1"><a class="header-anchor" href="#example-of-16-mbit-dram" aria-hidden="true">#</a> Example of 16-Mbit DRAM</h3><p>It is implemented using four 4Mbit memory components</p><p>Each 4 Mbit component is a 2048 x 2048 square of cells (2^22 bits)\u300C\u6BCF\u4E2A4 Mbit\u5206\u91CF\u662F\u4E00\u4E2A2048 x 2048\u5E73\u65B9\u7684\u5355\u5143\u683C\uFF082 ^ 22\u4F4D\uFF09\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/14/ad8d12c9dd1b5.png" alt="image.png" title="image.png"><p><strong>Use address to locate (select) the cell\u300C\u4F7F\u7528\u5730\u5740\u67E5\u627E\uFF08\u9009\u62E9\uFF09\u5355\u5143\u683C\u300D</strong></p><ul><li>2048 x 2048 square of cells = 2^{22} cells, intuitively\u300C\u51ED\u76F4\u89C9\u300D, we need 22 address lines</li><li>however, there are only 11 address pins (A0 \u2013 A10)</li><li>solution: use an external select logic (a multiplexer), where input is the 22 address lines and output is the 11 address pins\u300C\u89E3\u51B3\u65B9\u6848\uFF1A\u4F7F\u7528\u5916\u90E8\u9009\u62E9\u903B\u8F91\uFF08\u591A\u8DEF\u590D\u7528\u5668\uFF09\uFF0C\u5176\u4E2D\u8F93\u5165\u662F22\u6761\u5730\u5740\u7EBF\uFF0C\u8F93\u51FA\u662F11\u6761\u5730\u5740\u5F15\u811A\u300D</li><li>effect: divided the 22 address lines into 2 groups, which are fed into the chip through 11 address pins separately\u300C\u6548\u679C\uFF1A\u5C0622\u6761\u5730\u5740\u7EBF\u5206\u4E3A2\u7EC4\uFF0C\u5206\u522B\u901A\u8FC711\u4E2A\u5730\u5740\u5F15\u811A\u9988\u5165\u82AF\u7247\u300D</li></ul><p><strong>Use address to locate (select) the cell\u300C\u4F7F\u7528\u5730\u5740\u67E5\u627E\uFF08\u9009\u62E9\uFF09\u5355\u5143\u683C\u300D</strong></p><ul><li>11 row address lines/11 column address lines\u300C11\u884C\u5730\u5740\u7EBF/ 11\u5217\u5730\u5740\u7EBF\u300D</li><li>use another two pins to indicate: RAS (row address select) and CAS (column address select)\u300C\u4F7F\u7528\u53E6\u5916\u4E24\u4E2A\u5F15\u811A\u6307\u793A\uFF1ARAS\uFF08\u884C\u5730\u5740\u9009\u62E9\uFF09\u548CCAS\uFF08\u5217\u5730\u5740\u9009\u62E9\uFF09\u300D</li><li>then, use can use a 11-to-2048 decoder to select the corrsponding row and column --&gt; locate a cell in one square\u300C\u7136\u540E\uFF0C\u53EF\u4EE5\u4F7F\u752811\u52302048\u89E3\u7801\u5668\u9009\u62E9\u76F8\u5E94\u7684\u884C\u548C\u5217-&gt;\u5728\u4E00\u4E2A\u6B63\u65B9\u5F62\u4E2D\u5B9A\u4F4D\u4E00\u4E2A\u5355\u5143\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/14/b44508f7dab50.png" alt="image.png" title="image.png"><h3 id="read-write-operation" tabindex="-1"><a class="header-anchor" href="#read-write-operation" aria-hidden="true">#</a> Read/Write operation</h3><ul><li>4 data lines (pins, D1 - D4), each connecting to one square\u300C4\u6761\u6570\u636E\u7EBF\uFF08\u5F15\u811AD1-D4\uFF09\uFF0C\u6BCF\u6761\u8FDE\u63A5\u5230\u4E00\u4E2A\u6B63\u65B9\u5F62\u300D</li><li>write: apply high/low voltage to the data lines to charge the capacitors\u300C\u5199\uFF1A\u5411\u6570\u636E\u7EBF\u65BD\u52A0\u9AD8/\u4F4E\u7535\u538B\u4EE5\u5BF9\u7535\u5BB9\u5668\u5145\u7535\u300D</li><li>read: use a sense amplifier to sense the voltage\u300C\u9605\u8BFB\uFF1A\u4F7F\u7528\u611F\u5E94\u653E\u5927\u5668\u611F\u5E94\u7535\u538B\u300D</li><li>two pins to control write/read: WE (write enable) and OE (output enable)\u300C\u4E24\u4E2A\u5F15\u811A\u63A7\u5236\u5199/\u8BFB\uFF1AWE\uFF08\u5199\u4F7F\u80FD\uFF09\u548COE\uFF08\u8F93\u51FA\u4F7F\u80FD\uFF09\u300D</li><li>we can use multiple Chips to read/write a word at a time depending on the processor\u300C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u591A\u4E2A\u82AF\u7247\u4E00\u6B21\u8BFB\u53D6/\u5199\u5165\u4E00\u4E2Aword\uFF0C\u5177\u4F53\u53D6\u51B3\u4E8E\u5904\u7406\u5668\u300D</li></ul><h3 id="summary-of-chip-logic" tabindex="-1"><a class="header-anchor" href="#summary-of-chip-logic" aria-hidden="true">#</a> Summary of Chip Logic</h3><p>Current technology:</p><ul><li>we can make very large capacity in a very small area\u300C\u6211\u4EEC\u53EF\u4EE5\u5728\u5F88\u5C0F\u7684\u533A\u57DF\u5185\u5236\u9020\u5F88\u5927\u7684\u5BB9\u91CF\u300D</li><li>however, the limit is bounded by the physical space needed for pins -- careful design to save number of pins is important\u300C\u4F46\u662F\uFF0C\u8BE5\u9650\u5236\u53D7\u5F15\u811A\u6240\u9700\u7684\u7269\u7406\u7A7A\u95F4\u9650\u5236-\u8C28\u614E\u8BBE\u8BA1\u4EE5\u8282\u7701\u5F15\u811A\u6570\u5F88\u91CD\u8981\u300D</li></ul><p>Chip Logic considerations\u300C\u82AF\u7247\u903B\u8F91\u6CE8\u610F\u4E8B\u9879\uFF1A\u300D:</p><ul><li>determine the number of data pins (how many bits to read/write at a time)\u300C\u786E\u5B9A\u6570\u636E\u5F15\u811A\u7684\u6570\u91CF\uFF08\u4E00\u6B21\u8BFB\u53D6/\u5199\u5165\u591A\u5C11\u4F4D\uFF09\u300D</li><li>determine the number of address pins (need consideration of address multiplexing)\u300C\u786E\u5B9A\u5730\u5740\u5F15\u811A\u7684\u6570\u91CF\uFF08\u9700\u8981\u8003\u8651\u5730\u5740\u591A\u8DEF\u590D\u7528\uFF09\u300D</li><li>need for additional buffers and controls\u300C\u9700\u8981\u989D\u5916\u7684\u7F13\u51B2\u533A\u548C\u63A7\u4EF6\u300D</li><li>layout and wiring need to consider heat distribution (data pins are distributed on the two sides of the chip)\u300C\u5E03\u5C40\u548C\u5E03\u7EBF\u9700\u8981\u8003\u8651\u70ED\u91CF\u5206\u5E03\uFF08\u6570\u636E\u5F15\u811A\u5206\u5E03\u5728\u82AF\u7247\u7684\u4E24\u4FA7\uFF09\u300D</li></ul><h2 id="memory-errors" tabindex="-1"><a class="header-anchor" href="#memory-errors" aria-hidden="true">#</a> Memory Errors</h2><ul><li>Hard Failure <ul><li>permanent physical defect to cells\u300C\u6C38\u4E45\u7684\u786C\u4EF6\u635F\u574F\u300D</li><li>replacement\u300C\u66FF\u4EE3\u4EE5\u4FEE\u590D\u300D</li></ul></li><li>Soft Error <ul><li>content of the cell is modified, due to random, nondestructive event\u300C\u7531\u4E8E\u968F\u673A\uFF0C\u975E\u7834\u574F\u6027\u4E8B\u4EF6\uFF0C\u4FEE\u6539\u4E86\u5355\u5143\u683C\u7684\u5185\u5BB9\u300D</li><li>the function of cell is still OK\u300C\u5355\u5143\u683C\u7684\u529F\u80FD\u8FD8\u662F\u597D\u7684\u300D</li><li>example: the charging to the capacitor is not sufficient: 1 -&gt; 0\u300C\u6BD4\u5982\u7535\u5BB9\u5668\u5145\u7535\u4E0D\u8DB3\u5BFC\u81F41-&gt;0</li></ul></li><li>Error Detection <ul><li>knowing that there are errors in a block of data</li></ul></li><li>Error Correction <ul><li>detect, and recover the correct contents\u300C\u68C0\u6D4B\u5E76\u6062\u590D\u6B63\u786E\u7684\u5185\u5BB9\u300D</li><li>correction is harder than detection\u300C\u6821\u6B63\u6BD4\u68C0\u6D4B\u96BE\u300D <ul><li>example: we know there are an even numuber of 1&#39;s in the data (detection is easy); detection is hard: there could be multiple combinations of errors\u300C\u4F8B\u5982\uFF1A\u6211\u4EEC\u77E5\u9053\u6570\u636E\u4E2D\u7684\u5076\u6570\u4E3A1\uFF08\u68C0\u6D4B\u5F88\u5BB9\u6613\uFF09\uFF1B\u68C0\u6D4B\u5F88\u96BE\uFF1A\u53EF\u80FD\u6709\u591A\u79CD\u9519\u8BEF\u7EC4\u5408\u300D</li></ul></li></ul></li></ul><h3 id="coding-theory" tabindex="-1"><a class="header-anchor" href="#coding-theory" aria-hidden="true">#</a> Coding Theory</h3><p>Coding theory itself is a fruitful field of study\u300C\u7F16\u7801\u7406\u8BBA\u672C\u8EAB\u662F\u4E00\u4E2A\u5BCC\u6709\u6210\u679C\u7684\u7814\u7A76\u9886\u57DF\u300D</p><p>general idea: use redundancy to encode the conditions for which correct data should satisfy -- redundancy is a function of original data: K = f(M)\u300C\u603B\u4F53\u601D\u8DEF\uFF1A\u4F7F\u7528\u5197\u4F59\u7F16\u7801\u6B63\u786E\u6570\u636E\u5E94\u6EE1\u8DB3\u7684\u6761\u4EF6-\u5197\u4F59\u662F\u539F\u59CB\u6570\u636E\u7684\u51FD\u6570\uFF1AK = f\uFF08M\uFF09\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/14/4b16ed0e4944b.png" alt="image.png" title="image.png"><h3 id="framework-of-error-correction" tabindex="-1"><a class="header-anchor" href="#framework-of-error-correction" aria-hidden="true">#</a> Framework of Error Correction</h3><p>Framework of Error Correction\u300C\u7EA0\u9519\u6846\u67B6\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/14/db242feee716a.png" alt="image.png" title="image.png"><p>Example: Hash Functions for Error Detection</p><img src="https://pic.hanjiaming.com.cn/2021/04/14/68194656bae86.png" alt="image.png" title="image.png"><h3 id="encode-for-check" tabindex="-1"><a class="header-anchor" href="#encode-for-check" aria-hidden="true">#</a> Encode for check</h3><h4 id="warm-up-single-parity-code" tabindex="-1"><a class="header-anchor" href="#warm-up-single-parity-code" aria-hidden="true">#</a> Warm-up: single parity code</h4><ul><li>original data block M has 7 bits (abuse of term, M = 7)\u300C\u539F\u59CB\u6570\u636E\u5757M\u5177\u67097\u4F4D\uFF08\u6EE5\u7528\u9879\uFF0CM = 7\uFF09\u300D</li><li>attach a single bit K to the end of block (K=1)\u300C\u5C06\u5355\u4E2AK\u9644\u52A0\u5230\u5757\u7684\u672B\u5C3E\uFF08K = 1\uFF09\u300D</li><li>the code thus has 8 bits, M|| K --- this is a simple encoding process given M, we need to decide K\u300C\u8BE5\u4EE3\u7801\u56E0\u6B64\u5177\u67098\u4F4D\uFF0CM || K-\u8FD9\u662F\u4E00\u4E2A\u7B80\u5355\u7684\u7F16\u7801\u8FC7\u7A0B\u300D</li></ul><h4 id="enconding-rule" tabindex="-1"><a class="header-anchor" href="#enconding-rule" aria-hidden="true">#</a> Enconding rule</h4><ul><li>function W(D) = number of 1&#39;s in data block D</li><li>Rule: add K such that W(M||K) is even (even parity)\u300C\u89C4\u5219\uFF1A\u52A0K\u4F7F\u5F97W\uFF08M || K\uFF09\u4E3A\u5076\u6570\uFF08\u5076\u6570\uFF09\u300D</li><li>example <ul><li>M = 000 0011, W(M) = 2 -&gt; set K = 0</li><li>M = 110 0111, W(M) = 5 -&gt; set K = 1</li></ul></li><li>we also could have odd parity\u300C\u6211\u4EEC\u4E5F\u53EF\u80FD\u6709\u5947\u5076\u6821\u9A8C\u300D</li></ul><h4 id="one-error-detection" tabindex="-1"><a class="header-anchor" href="#one-error-detection" aria-hidden="true">#</a> One Error Detection</h4><p>The single parity code is able to detect one error\u300C\u5355\u4E00\u5947\u5076\u6821\u9A8C\u7801\u80FD\u591F\u68C0\u6D4B\u5230\u4E00\u4E2A\u9519\u8BEF\u300D</p><ul><li>suppose the stored data is D, we can compute W(D)\u300C\u5047\u8BBE\u5B58\u50A8\u7684\u6570\u636E\u4E3AD\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8BA1\u7B97W\uFF08D\uFF09\u300D</li><li>if W(D) is even --&gt; no error; else one error\u300C\u5982\u679CW\uFF08D\uFF09\u662F\u5076\u6570-&gt;\u6CA1\u6709\u9519\u8BEF\uFF1B\u5426\u5219\u4E00\u4E2A\u9519\u8BEF\u300D</li><li>note that the above detection algorithm relies on one essential assumption: there is at most one error \u300C\u8BF7\u6CE8\u610F\uFF0C\u4E0A\u8FF0\u68C0\u6D4B\u7B97\u6CD5\u57FA\u4E8E\u4E00\u4E2A\u57FA\u672C\u5047\u8BBE\uFF1A\u6700\u591A\u5B58\u5728\u4E00\u4E2A\u9519\u8BEF\u300D</li><li>also note that, we can only detect error, we do not know the position of the error (cannot correct the error)\u300C\u8FD8\u8981\u6CE8\u610F\uFF0C\u6211\u4EEC\u53EA\u80FD\u68C0\u6D4B\u9519\u8BEF\uFF0C\u6211\u4EEC\u4E0D\u77E5\u9053\u9519\u8BEF\u7684\u4F4D\u7F6E\uFF08\u65E0\u6CD5\u7EA0\u6B63\u9519\u8BEF\uFF09\u300D</li></ul><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><ul><li>suppose M = 000 0011, W(M) = 2 --&gt; K = 0</li><li>store M||K = 000 0011 0 in the storage device</li><li>some time later, we check this data block D by computing W(D)</li><li>suppose W(D) = 3 --&gt; error: e.g., 000 0111 0 or 000 0011 1</li><li>suppose W(D) = 2 --&gt; correct; but could also be 000 0101 0 (two errors, we assume that this could not happen)</li></ul><h4 id="the-essence" tabindex="-1"><a class="header-anchor" href="#the-essence" aria-hidden="true">#</a> The Essence</h4><p>essence\u300C\u7CBE\u534E\u300D</p><p>we are using 1 redundant bit to encode two cases:</p><ul><li>case 1: no error</li><li>case 2: 1 error</li></ul><p>question: can we extend this idea to general error-correcting code?</p><h3 id="correct" tabindex="-1"><a class="header-anchor" href="#correct" aria-hidden="true">#</a> Correct</h3><h4 id="general-case" tabindex="-1"><a class="header-anchor" href="#general-case" aria-hidden="true">#</a> General Case</h4><p>Consider one error correcting code</p><ul><li>original data M bits, redundancy K bits; together N = M + K bits\u300C\u539F\u59CB\u6570\u636EM\u4F4D\uFF0C\u5197\u4F59K\u4F4D; N = M + K\u4F4D\u300D</li><li>again, we assume that there is at most one error\u300C\u518D\u4E00\u6B21\uFF0C\u6211\u4EEC\u5047\u8BBE\u6700\u591A\u6709\u4E00\u4E2A\u9519\u8BEF\u300D</li></ul><p>Our goal is to correct one error (if happens) -- in other words, know the position of the error\u300C\u6211\u4EEC\u7684\u76EE\u6807\u662F\u7EA0\u6B63\u4E00\u4E2A\u9519\u8BEF\uFF08\u5982\u679C\u53D1\u751F\uFF09-\u6362\u53E5\u8BDD\u8BF4\uFF0C\u77E5\u9053\u9519\u8BEF\u7684\u4F4D\u7F6E\u300D</p><p>there are a total of (N+1) cases. Why?\u300C\u5171\u6709\uFF08N + 1\uFF09\u4E2A\u6848\u4F8B\u3002\u4E3A\u4EC0\u4E48\uFF1F\u300D</p><p>(N+1) cases:</p><ul><li><p>case 0: no error</p></li><li><p>case 1: error at position 1</p></li><li><p>case t: error at position t</p></li><li><p>the essence of error correction code: use K bits to encode (N+1) cases\u300C\u7EA0\u9519\u7801\u7684\u672C\u8D28\uFF1A\u4F7F\u7528K\u4F4D\u7F16\u7801\uFF08N + 1\uFF09\u79CD\u60C5\u51B5\u300D</p></li><li><p>relation: 2^{K} &gt;= M + K +1\u300C\u5173\u7CFB\uFF1A2 ^ {K}&gt; = M + K +1\u300D</p></li><li><p>coding theory deals with the realization of the above encoding process using mathematical tools\u300C\u7F16\u7801\u7406\u8BBA\u4F7F\u7528\u6570\u5B66\u5DE5\u5177\u5904\u7406\u4E0A\u8FF0\u7F16\u7801\u8FC7\u7A0B\u7684\u5B9E\u73B0\u300D</p></li></ul><p>Overhead: K/M, which is the redundancy\u300C\u5197\u4F59\u300D ratio\u300C\u7387\u300D\u300C\u5F00\u9500\uFF1AK / M\uFF0C\u5373\u5197\u4F59\u7387\u300D</p><ul><li>M = 4 -&gt; K = 3 ( 2^3 = 8 &gt;= 4 + 3 +1); K/M = 3/4</li><li>M = 8 -&gt; K = 4 ( 2^4 = 16 &gt;= 8 + 4 +1); K/M = 4/8</li><li>M = 16 -&gt; K = 5 ( 2^5 = 32 &gt;= 16 + 5 +1); K/M = 5/16</li></ul><p>as M increases, the overhead decreases\u300C\u968F\u7740M\u7684\u589E\u52A0\uFF0C\u5F00\u9500\u51CF\u5C11\u300D</p><p>So, is M the larger the better?</p><ul><li>unfortunately, no</li><li>remember the fundamental assumption: at most one error\u300C\u8BB0\u4F4F\u57FA\u672C\u5047\u8BBE\uFF1A\u81F3\u591A\u4E00\u4E2A\u9519\u8BEF\u300D</li><li>as M increases, the probability of having more errors also goes up\u300C\u589E\u52A0\u300D\u300C\u968F\u7740M\u7684\u589E\u52A0\uFF0C\u51FA\u73B0\u66F4\u591A\u9519\u8BEF\u7684\u53EF\u80FD\u6027\u4E5F\u4F1A\u589E\u52A0\u300D</li></ul><h4 id="case-study-7-4-hamming-code" tabindex="-1"><a class="header-anchor" href="#case-study-7-4-hamming-code" aria-hidden="true">#</a> Case Study: (7-4) Hamming Code</h4><p>Hamming Code\u300C\u6D77\u660E\u7801\u300D\u3001parity bits\u300C\u5947\u5076\u6821\u9A8C\u4F4D\u300D</p><ul><li>the classical one-error correction code, with (7-4) the most common setting\u300C\u7ECF\u5178\u7684-\u7EA0\u9519\u7801\uFF0C\u6700\u5E38\u89C1\u7684\u8BBE\u7F6E\u662F\uFF087-4\uFF09\u300D</li><li>N = 7, M = 4 (original data), K = 3 (redundancy bits)</li><li>we will not dig into\u300C\u6DF1\u5165\u7814\u7A76\u300D the mathematical\u300C\u6570\u5B66\u7684\u300D details\u300C\u6211\u4EEC\u4E0D\u4F1A\u6DF1\u5165\u7814\u7A76\u6570\u5B66\u7EC6\u8282\u300D</li><li>similar to single parity code, however, we now use three parity bits\u300C\u4E0E\u5355\u4E2A\u5947\u5076\u6821\u9A8C\u4EE3\u7801\u76F8\u4F3C\uFF0C\u4F46\u662F\uFF0C\u6211\u4EEC\u73B0\u5728\u4F7F\u7528\u4E09\u4E2A\u5947\u5076\u6821\u9A8C\u4F4D\u300D</li><li>data bits: d1, d2, d3, d4\u300C\u6570\u636E\u4F4D\uFF1Ad1\uFF0Cd2\uFF0Cd3\uFF0Cd4\u300D</li><li>parity bits: p1, p2, p3, where each parity bit &quot;cover&quot; 3 data bits\u300C\u5947\u5076\u6821\u9A8C\u4F4D\uFF1Ap1\uFF0Cp2\uFF0Cp3\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u5947\u5076\u6821\u9A8C\u4F4D\u201C\u8986\u76D6\u201D 3\u4E2A\u6570\u636E\u4F4D\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/19/942122c3d2e35.png" alt="image.png" title="image.png"><ul><li>p1: cover d1, d2, d4, that is, number of 1&#39;s in p1||d1||d2||d4 should be even</li><li>p2: cover d1, d3, d4</li><li>p3: cover d2, d3, d4</li></ul><h5 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h5><img src="https://pic.hanjiaming.com.cn/2021/04/19/221a369946373.png" alt="image.png" title="image.png"><h5 id="more" tabindex="-1"><a class="header-anchor" href="#more" aria-hidden="true">#</a> More</h5><p>Not Required</p><img src="https://pic.hanjiaming.com.cn/2021/04/19/6767bc2be229d.png" alt="image.png" title="image.png"><h5 id="the-code-words" tabindex="-1"><a class="header-anchor" href="#the-code-words" aria-hidden="true">#</a> The code words</h5><ul><li>there are a total of 16 valid code words (why? 4 &quot;free&quot; data bits)\u300C\u5171\u670916\u4E2A\u6709\u6548\u4EE3\u7801\u5B57\uFF08\u4E3A\u4EC0\u4E48\uFF1F4\u4E2A\u201C\u7A7A\u95F2\u201D\u6570\u636E\u4F4D\uFF09\u300D</li><li>the Hamming distance between every two code words is 3\u300C\u6BCF\u4E24\u4E2A\u4EE3\u7801\u5B57\u4E4B\u95F4\u7684\u6C49\u660E\u8DDD\u79BB\u4E3A3\u300D</li><li>Hamming distance: the number of different bits\u300C\u6C49\u660E\u8DDD\u79BB\uFF1A\u4E0D\u540C\u4F4D\u6570\u300D</li><li>this examples why Hamming code can correct 1 error\u300C\u8FD9\u4E2A\u4F8B\u5B50\u4E3A\u4EC0\u4E48\u6C49\u660E\u7801\u53EF\u4EE5\u7EA0\u6B631\u4E2A\u9519\u8BEF\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/19/da2f8990b0a05.png" alt="image.png" title="image.png"><p>\u6279\u6CE8\uFF1A\u4E0D\u660E\u767D\u5728\u8BF4\u4EC0\u4E48......</p><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>COMP2421@PolyU PowerPoint</li></ul>',147);function r(l,o){return t}var s=e(a,[["render",r]]);export{s as default};
