import{_ as e,f as t}from"./app.bbbf835d.js";const i={},r=t('<h1 id="process-management" tabindex="-1"><a class="header-anchor" href="#process-management" aria-hidden="true">#</a> Process Management</h1><p>A process is a program in execution.</p><p>The terms process and job are used almost interchangeably in most textbooks.</p><p>A process includes</p><ul><li>Value of program <strong>counter</strong></li><li>Value of <strong>registers</strong> and processor <strong>status word</strong></li><li><strong>Stack</strong> for temporary variables</li><li><strong>Text</strong> for program code</li><li><strong>Data section</strong> for global variables</li><li>Heap for dynamic storage of variables (those created using malloc)</li></ul><img src="https://pic.hanjiaming.com.cn/2022/03/23/a929cc51a209b.png" alt="1648029542561.png" style="zoom:33%;"><p>\u5728\u64CD\u4F5C\u7CFB\u7EDF\u4E2D\uFF0C\u6709\u591A\u4E2A\u8FDB\u7A0B\u540C\u65F6\u6267\u884C\u3002</p><p>\u6709\u4E9B\u8BA1\u7B97\u673A\u7CFB\u7EDF\u6709\u591A\u4E2ACPU\uFF0C\u4F46\u5927\u591A\u6570\u8F83\u5C0F\u7684\u8BA1\u7B97\u673A\u7CFB\u7EDF\u53EA\u6709\u4E00\u4E2ACPU\u3002\u5F53\u8FDB\u7A0B\u7684\u6570\u91CF\u8D85\u8FC7CPU\u7684\u6570\u91CF\u65F6\uFF0C\u6BCF\u4E2ACPU\u5728\u6BCF\u4E2A\u65F6\u523B\u53EA\u80FD\u5206\u914D\u7ED9\u4E00\u4E2A\u8FDB\u7A0B\u6267\u884C\uFF0C\u4E0D\u662F\u6240\u6709\u7684\u8FDB\u7A0B\u5728\u4EFB\u4F55\u65F6\u523B\u90FD\u80FD\u5F97\u5230CPU\u7684\u670D\u52A1\u3002\u8FDB\u7A0B\u7684\u72B6\u6001\u8FD8\u6709\u5176\u4ED6\u53EF\u80FD\u6027\u3002\u8FD9\u4E9B\u6761\u4EF6\u88AB\u79F0\u4E3A\u8FDB\u7A0B\u72B6\u6001\u3002\u4E3A\u4E86\u8DDF\u8E2A\u8FDB\u7A0B\u7684\u72B6\u6001\uFF0C\u4EE5\u53CA\u5F53\u8FDB\u7A0B\u5728CPU\u4E4B\u95F4\u5207\u6362\u65F6\u5E94\u8BE5\u4FDD\u6301\u7684\u4FE1\u606F\uFF0C\u4E3A\u6BCF\u4E2A\u8FDB\u7A0B\u5206\u914D\u4E00\u4E2A\u6570\u636E\u7ED3\u6784\u3002\u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u662F\u8FDB\u7A0B\u63A7\u5236\u5757\uFF0C\u7528\u6765\u5B58\u50A8\u4FE1\u606F\uFF08\u5982\u4F60\u7684\u4E66\u5305\u6216\u7528\u6237\u7684\u6863\u6848/\u684C\u9762\uFF09\u3002</p><h2 id="process-state" tabindex="-1"><a class="header-anchor" href="#process-state" aria-hidden="true">#</a> Process State</h2><ul><li>new: process is being created.</li><li>running: process is running (program instructions are being executed).</li><li>waiting: process is waiting for some event to occur.</li><li>ready: process is waiting to be assigned to a processor or CPU for execution.</li><li>terminated: process has finished execution.</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/eeab4d5486150.png" alt="1648029654341.png" loading="lazy"></p><h2 id="process-control-block" tabindex="-1"><a class="header-anchor" href="#process-control-block" aria-hidden="true">#</a> Process Control Block</h2><p>Each process is represented by a Process Control Block (PCB).</p><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/aa3581a389fa6.png" alt="1648029768256.png" loading="lazy"></p><h2 id="cpu-switching" tabindex="-1"><a class="header-anchor" href="#cpu-switching" aria-hidden="true">#</a> CPU Switching</h2><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/63e93a7aecffb.png" alt="1648029811588.png" loading="lazy"></p><h2 id="process-scheduling-queues" tabindex="-1"><a class="header-anchor" href="#process-scheduling-queues" aria-hidden="true">#</a> Process Scheduling Queues</h2><p>Several types of queues in computer system:</p><ul><li>Job queue: set of all processes in the system.</li><li>Ready queue: set of all processes residing in main memory, ready and waiting to be executed.</li><li>Device queues: set of processes waiting for an I/O device.</li></ul><p>Processes migrate (i.e. move) among the various queues.</p><p>\u9884\u5907\u961F\u5217\u4E2D\u7684\u8FDB\u7A0B\u83B7\u5F97CPU\uFF0C\u968F\u540E\u53EF\u80FD\u5728\u8BBE\u5907\u961F\u5217\u4E2D\u7B49\u5F85I/O\u3002</p><p>\u6BCF\u79CD\u961F\u5217\u7684\u8FDB\u7A0B\u8C03\u5EA6\u5668\u51B3\u5B9A\u8C01\u5C06\u83B7\u5F97\u4E0B\u4E00\u4E2A\u670D\u52A1\u3002</p><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/5b474f2633fce.png" alt="1648030204043.png" loading="lazy"></p><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/9cf0763956659.png" alt="1648030245515.png" loading="lazy"></p><h2 id="scheduler" tabindex="-1"><a class="header-anchor" href="#scheduler" aria-hidden="true">#</a> Scheduler</h2><p>\u4E00\u4E2A\u8FDB\u7A0B\u5728\u5176\u51FA\u751F\uFF08\u521B\u5EFA\uFF09\u548C\u6B7B\u4EA1\uFF08\u7EC8\u6B62\uFF09\u4E4B\u95F4\u4F1A\u5728\u4E0D\u540C\u7684\u961F\u5217\u4E2D\u79FB\u52A8\u3002\u5F53\u8FDB\u7A0B\u5728\u7B49\u5F85\u4E0D\u540C\u7684\u670D\u52A1\u65F6\uFF0C\u8C03\u5EA6\u5668\u4F1A\u9009\u62E9\u88AB\u670D\u52A1\u7684\u8FDB\u7A0B\u3002</p><h3 id="long-term-scheduler" tabindex="-1"><a class="header-anchor" href="#long-term-scheduler" aria-hidden="true">#</a> Long-term scheduler</h3><p>Also called job scheduler.</p><ul><li>Select which processes should be brought into the ready queue (only process in ready queue are eligible for CPU).</li><li>\u957F\u671F\u8C03\u5EA6\u5668\u5173\u6CE8\u7684\u662F\u5DE5\u4F5C\u6216\u8FDB\u7A0B\u7684\u6267\u884C\u51C6\u5165\u3002</li><li>\u628A\u4E00\u4E2A\u8FDB\u7A0B\u653E\u5728\u51C6\u5907\u961F\u5217\u4E2D\u7684\u51B3\u5B9A\u5F88\u5C11\u53D1\u751F\uFF0C\u4E5F\u8BB8\u5728\u8FDB\u7A0B\u88AB\u521B\u5EFA\u65F6\u53EF\u80FD\u53D1\u751F\u4E00\u6B21\u3002 <ul><li>\u51B3\u7B56\u5E94\u8BE5\u662F\u4E00\u4E2A\u76F8\u5F53\u597D\u7684\uFF08\u5B83\u53EF\u4EE5\u627F\u53D7\u66F4\u957F\u7684\u8FD0\u884C\u65F6\u95F4\uFF09\u3002</li><li>\u957F\u671F\u8C03\u5EA6\u5668\u63A7\u5236\u591A\u7A0B\u5E8F\u7684\u7A0B\u5EA6\uFF08\u6709\u53EF\u80FD\u7ADE\u4E89CPU\u7684\u8FDB\u7A0B\u6570\u91CF\uFF09\u3002</li></ul></li></ul><h3 id="medium-term-scheduler" tabindex="-1"><a class="header-anchor" href="#medium-term-scheduler" aria-hidden="true">#</a> Medium-term scheduler</h3><p>\u4E00\u4E9B\u7CFB\u7EDF\u63D0\u4F9B\u4E86\u4E2D\u671F\u8C03\u5EA6\u7A0B\u5E8F\u3002</p><ul><li>\u5F53\u6709\u592A\u591A\u7684\u8FDB\u7A0B\u7ADE\u4E89CPU\u65F6\uFF0C\u5E94\u8BE5\u4ECE\u5C31\u7EEA\u961F\u5217\u4E2D\u6682\u65F6\u5220\u9664\u4E00\u4E9B\u8FDB\u7A0B\u3002</li><li>\u5F53\u4F7F\u7528CPU\u7684\u8FDB\u7A0B\u5F88\u5C11\u65F6\uFF0C\u4E00\u4E9B\u88AB\u5220\u9664\u7684\u8FDB\u7A0B\u5E94\u8BE5\u8FD4\u56DE\u5230\u5C31\u7EEA\u961F\u5217\u4E2D\u3002</li><li>Control multi-programming degree after process admission.</li><li>If not done carefully, this could lead to thrashing.</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/a6f340dddd67d.png" alt="1648048184245.png" loading="lazy"></p><h3 id="short-term-scheduler" tabindex="-1"><a class="header-anchor" href="#short-term-scheduler" aria-hidden="true">#</a> Short-term scheduler</h3><p>Also called CPU scheduler.</p><ul><li>Select which process should be executed next and be allocated the CPU.</li><li>\u77ED\u671F\u8C03\u5EA6\u5668\u5173\u6CE8\u7684\u662FCPU\u7684\u5206\u914D\u3002 <ul><li>\u7ED9\u4E00\u4E2A\u8FDB\u7A0B\u5206\u914DCPU\u7684\u51B3\u5B9A\u6BCF\u79D2\u949F\u53D1\u751F\u5F88\u591A\u6B21\u3002</li><li>\u51B3\u7B56\u7684\u6B65\u9AA4\u5FC5\u987B\u975E\u5E38\u5FEB\uFF08\u6240\u4EE5\u5B83\u5C06\u662F\u7B80\u5355\u7684\uFF09\u3002</li></ul></li></ul><p>Short-term scheduler makes decision on which process to get CPU.</p><ul><li>\u77ED\u671F\u8C03\u5EA6\u5668\u51B3\u5B9A\u54EA\u4E2A\u8FDB\u7A0B\u83B7\u5F97CPU. <ul><li>\u7B80\u5355\u7684\u8C03\u5EA6\u5668\u53EA\u662F\u4EE5\u5148\u5230\u5148\u5F97\u7684\u65B9\u5F0F\u5411CPU\u63D0\u4EA4\u8FDB\u7A0B.</li><li>\u66F4\u597D\u7684\u8C03\u5EA6\u5668\u5206\u914DCPU\u4EE5\u63D0\u9AD8\u7CFB\u7EDF\u6027\u80FD. <ul><li>\u7B49\u5F85CPU\u7684\u65F6\u95F4.</li><li>\u8FDB\u7A0B\u7684\u5B8C\u6210\u65F6\u95F4.</li><li>\u54CD\u5E94\u6027\u3002</li></ul></li></ul></li></ul><p>Different types of processes would need different treatment.</p><p><strong>Processes can roughly be classified into two types:</strong></p><h3 id="i-o-bound-process" tabindex="-1"><a class="header-anchor" href="#i-o-bound-process" aria-hidden="true">#</a> I/O-bound process</h3><ul><li>A process that spends more time doing I/O than computations.</li><li>Between long duration of waiting, there are many short periods of using CPU (many short CPU bursts).</li><li>Example: interactive programs, e.g. editor.</li></ul><h3 id="cpu-bound-process" tabindex="-1"><a class="header-anchor" href="#cpu-bound-process" aria-hidden="true">#</a> CPU-bound process</h3><ul><li><p>A process that spends more time doing computations than I/O.</p></li><li><p>Between occasional I/O, there are long periods of using CPU (few very long CPU bursts).</p></li><li><p>Example: computation programs, e.g. finding next move in chess playing.</p></li><li><p>\u4E00\u4E2A\u8FDB\u7A0B\u6700\u521D\u53EF\u80FD\u662FI/O\u7ED1\u5B9A\u7684\uFF0C\u7136\u540E\u53D8\u6210CPU\u7ED1\u5B9A\u7684\uFF0C\u53CD\u4E4B\u4EA6\u7136\u3002</p></li><li><p>\u4ECB\u4E8EI/O\u548CCPU\u4E4B\u95F4\u7684\u4E2D\u95F4\u8FDB\u7A0B\uFF0C\u6709\u9002\u5EA6\u7684I/O\u3002</p></li></ul><p>A computer system will not be effective if all processes are I/O-bound. A system will not perform well if all processes are CPU-bound. Long-term scheduler makes decision to maintain a good mix of CPU-bound and I/O-bound processes. (<strong>No</strong> long-term scheduler in Unix and Windows. )</p><h2 id="context-switching" tabindex="-1"><a class="header-anchor" href="#context-switching" aria-hidden="true">#</a> Context Switching</h2><p>Short-term scheduler controls which process gets CPU next.</p><p>Sequence of events to bring CPU from an executing process to another is called context switching.</p><ul><li>\u5F53CPU\u5207\u6362\u5230\u53E6\u4E00\u4E2A\u8FDB\u7A0B\u65F6\uFF0C\u7CFB\u7EDF\u5FC5\u987B\u4FDD\u5B58\u65E7\u8FDB\u7A0B\u7684\u72B6\u6001\uFF0C\u5E76\u4E3A\u65B0\u8FDB\u7A0B\u52A0\u8F7D\u5148\u524D\u4FDD\u5B58\u7684\u72B6\u6001\u3002</li><li>\u65E7\u8FDB\u7A0B\u7684\u72B6\u6001\u5C06\u5728 &quot;time-up &quot;\u4E2D\u65AD\u53D1\u751F\u65F6\u88AB\u653E\u5728\u5806\u6808\u4E2D\u3002</li><li>\u5728\u51B3\u5B9A\u4E86CPU\u7684\u7EE7\u4EFB\u8005\u4E4B\u540E\uFF0Cscheduler\u6539\u53D8\u4E86PC\uFF0C\u5E76\u4ECE\u4E2D\u65AD\u4E2D\u8FD4\u56DE\u5230\u65B0\u8FDB\u7A0B\u3002</li></ul><p>Context switching time is a kind of <strong>overhead(\u5F00\u9500)</strong>.</p><ul><li>System does no useful work while switching from one process to another.</li><li>Time cost is dependent on hardware support, e.g. amount of efforts to save the state of the old process.</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/23/63e93a7aecffb.png" alt="1648048868790.png" loading="lazy"></p><h2 id="process-creation" tabindex="-1"><a class="header-anchor" href="#process-creation" aria-hidden="true">#</a> Process Creation</h2><p>A process is created when a program is run.</p><p>When you type <strong>a.out</strong> in Linux, the Linux shell (CLI) creates a new process for <strong>a.out</strong>, loads the code into the process and lets it run.</p><p>Processes are normally identified by an integer, called process identifier or pid.</p><p>There is a relationship between a process that creates another process.</p><ul><li>The creating process is called the parent process.</li><li>The created process is called the child process.</li></ul><p>A child process could be the parent of another process, and a tree or hierarchy of processes could be formed.</p><img src="https://pic.hanjiaming.com.cn/2022/03/24/965b4db76203e.png" alt="1648051662702.png" style="zoom:50%;"><p>Linux example: To show the parent/children processes use <strong>-H</strong> option for <strong>ps</strong> command (does not work for Mac Unix), e.g. <strong>ps -Hlf</strong> or <strong>ps -Helf</strong></p><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/e63cd2c35d620.png" alt="1648051707034.png" loading="lazy"></p><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/c23a95b556cf3.png" alt="1648051753793.png" loading="lazy"></p><p>Use <strong>fork</strong> system call to create new process.</p><p>To replace process memory with a new program, use <strong>exec</strong> and its family of system calls.</p><p>Parent uses <strong>wait</strong> to collect child and then continues.</p><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/ae47cd00e3de1.png" alt="1648051860205.png" loading="lazy"></p><h3 id="in-unix-linux" tabindex="-1"><a class="header-anchor" href="#in-unix-linux" aria-hidden="true">#</a> In Unix/Linux</h3><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/ff74d3a81ef12.png" alt="1648052069422.png" loading="lazy"></p><p>Relationship between parent and child:</p><ul><li>Resource sharing <ul><li>Parent and child <strong>share no resources</strong>.</li></ul></li><li>Execution <ul><li>Parent and child <strong>execute concurrently</strong>.</li></ul></li><li>Address space <ul><li>Child duplicates that of parent. <ul><li>Child may have an independent program loaded into it, with special <strong>exec</strong> system calls.</li></ul></li></ul></li></ul><p>Parent is informed about the completion of a child. Parent should <strong>wait</strong> for a child to collect it.</p><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/1ffe6e74f44b8.png" alt="1648052272885.png" loading="lazy"></p><h2 id="process-termination" tabindex="-1"><a class="header-anchor" href="#process-termination" aria-hidden="true">#</a> Process Termination</h2><p>After a process executes its last statement, it asks the OS to terminate it by calling <strong>exit</strong>.</p><p>It passes return data back to parent process via <strong>wait</strong>.</p><p>Parent may terminate the execution of children processes by calling <strong>abort</strong> if</p><ul><li><p>Child has exceeded usage of resources beyond its allocation.</p></li><li><p>Task assigned to child is no longer required.</p></li><li><p>Parent itself is exiting.</p></li><li><p>\u6709\u4E9B\u64CD\u4F5C\u7CFB\u7EDF\u4E0D\u5141\u8BB8\u4E00\u4E2A\u5B50\u8FDB\u7A0B\u7EE7\u7EED\u4E0B\u53BB\uFF0C\u5982\u679C\u5B83\u7684\u7236\u8FDB\u7A0B\u7EC8\u6B62\u4E86\uFF0C\u5B50\u8FDB\u7A0B\u4E5F\u5C06\u88AB\u7EC8\u6B62\u3002</p></li><li><p>\u4E00\u4E2A\u5DF2\u7ECF\u5B8C\u6210\u7684\u5B50\u8FDB\u7A0B\u6CA1\u6709\u88AB\u5B83\u7684\u7236\u8FDB\u7A0B\u6536\u96C6\u6216\u63A5\u8D70\uFF0C\u88AB\u79F0\u4E3A\u50F5\u5C38\u8FDB\u7A0B\u3002\u50F5\u5C38\u8FDB\u7A0B\u6D88\u8017PCB.</p></li><li><p>\u4E00\u4E9B\u64CD\u4F5C\u7CFB\u7EDF\u5141\u8BB8\u7279\u6B8A\u5B89\u6392\u7684\u5B50\u8FDB\u7A0B\u5728\u7236\u8FDB\u7A0B\u7EC8\u6B62\u540E\u7EE7\u7EED\u8FD0\u884C\u3002</p></li><li><p>\u4E00\u4E2A\u6CA1\u6709\u7236\u8FDB\u7A0B\u7684\u8FDB\u7A0B\u88AB\u79F0\u4E3A\u5B64\u513F\u8FDB\u7A0B\u3002</p></li></ul><h3 id="in-unix-linux-1" tabindex="-1"><a class="header-anchor" href="#in-unix-linux-1" aria-hidden="true">#</a> In Unix/Linux</h3><p>Recall that we have mentioned about process termination arrangement in Unix/Linux.</p><ul><li>Parent should be informed about the completion of a child.</li><li>Parent should <strong>wait</strong> for a child to collect it.</li></ul><p>\u5982\u679C\u7236\u65B9\u4E0D\u7B49\u5F85\u5B50\u65B9\u5B8C\u6210\uFF0C\u5982\u679C\u7236\u65B9\u5728\u5B50\u65B9\u5B8C\u6210\u4E4B\u524D\u5B8C\u6210\uFF0C\u5B50\u65B9\u5C06\u6210\u4E3A\u5B64\u513F\uFF08\u6CA1\u6709\u7236\u65B9\uFF09\u3002\u53E6\u4E00\u65B9\u9762\uFF0C\u4E00\u4E2A\u5B8C\u6210\u7684\u5B50\u8FDB\u7A0B\u5982\u679C\u6CA1\u6709\u88AB\u7236\u65B9\u6536\u96C6\u6216\u63A5\u8D70\uFF0C\u5219\u79F0\u4E3A\u50F5\u5C38\uFF08\u6D3B\u7740\u7684\u6B7B\u4EBA\uFF09\u3002</p><p>So <strong>wait</strong> is necessary.</p><h2 id="the-exec-family" tabindex="-1"><a class="header-anchor" href="#the-exec-family" aria-hidden="true">#</a> The <strong>exec</strong> family</h2><ul><li>The <strong>exec</strong> family of system calls allow a Unix/Linux child process to execute another program (instead of the parent program).</li><li>Include header file <strong>unistd.h</strong> (<strong>#include &lt;unistd.h&gt;</strong>).</li></ul><table><thead><tr><th>System call</th><th>Feature</th></tr></thead><tbody><tr><td><strong>int</strong> <strong>execl</strong>**(const char *path, const char *arg0, ...);**</td><td>Execute a program at pathname <strong>path</strong>, last argument must be <strong>NULL</strong>.</td></tr><tr><td><strong>int</strong> <strong>execlp</strong>**(const char *file, const char *arg0, ...);**</td><td>Execute a program named by <strong>file</strong>, last argument must be <strong>NULL</strong>.</td></tr><tr><td><strong>int</strong> <strong>execle</strong>**(const char *path, const char *arg0, ..., char *const envp[]);**</td><td>Same as <strong>execl</strong>, but access environment variables via *<strong>envp[]</strong>.</td></tr><tr><td><strong>int</strong> <strong>execv</strong>**(const char *path, char *const argv[]);**</td><td>Same as <strong>execl</strong>, but arguments are stored in *<strong>argv[]</strong> instead.</td></tr><tr><td><strong>int</strong> <strong>execvp</strong>**(const char *file, char *const argv[]);**</td><td>Same as <strong>execlp</strong>, but arguments are stored in *<strong>argv[]</strong> instead.</td></tr><tr><td><strong>int</strong> <strong>execve</strong>**(const char *path, char *const argv[], char *const envp[]);**</td><td>Same as <strong>execv</strong>, but access environment variables via *<strong>envp[]</strong>.</td></tr></tbody></table><p>A non-zero return value indicates an error from system call.</p><ul><li>List of arguments in <strong>execl</strong>, <strong>execlp</strong> and <strong>execle</strong> are terminated by a NULL pointer. <ul><li>The path is a string containing the file name, including the full path, to be executed.</li><li>The second argument arg0 is the name of the program for execution, e.g. \u201Cls\u201D.</li></ul></li><li>For <strong>execlp</strong> and <strong>execvp</strong>, the first argument is a file name instead of the path name. <ul><li>If the string contains a &quot;/&quot;, it is considered as a path name. Otherwise, it is a file name and the system will search for the file according to the directories in environment variable PATH.</li></ul></li><li>For <strong>execv</strong>, <strong>execvp</strong> and <strong>execve</strong>, arguments for the program are packed within *argv[].</li><li>For <strong>execle</strong> and <strong>execve</strong>, there is a final argument *envp[] storing the environment variables and values for the program.</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/ffe86e0805ef0.png" alt="1648052498655.png" loading="lazy"></p><p>Unix\u548CLinux\u4E2D\u5BF9\u5B64\u513F\u7684\u7279\u6B8A\u5B89\u6392\u3002</p><ul><li>\u4E00\u4E2A\u5B64\u513F\u8FDB\u7A0B\u5C06\u88AB\u4E00\u4E2A\u65B0\u7684\u7236\u8FDB\u7A0B\u6536\u517B\u3002</li><li>\u613F\u610F\u6210\u4E3A\u6240\u6709\u5B64\u513F\u8FDB\u7A0B\u7684\u65B0\u7236\u8FDB\u7A0B\u7684\u7279\u6B8A\u8FDB\u7A0B\u7684pid\u4E3A1\u3002 \u5B83\u662Finit\u8FDB\u7A0B\u3002</li><li>pid\u4E3A0\u7684\u8FDB\u7A0B\u662F\u7528\u4E8E\u5206\u9875\u7684\u4EA4\u6362\u5668\uFF0Cpid\u4E3A1\u7684\u8FDB\u7A0B\u662F\u7528\u4E8E\u542F\u52A8\u548C\u5173\u95EDUnix\u7684\u7B2C\u4E00\u4E2A\u8FD0\u884C\u8FDB\u7A0B\u3002</li></ul><p>\u5728\u4E0A\u9762\u7684\u4F8B\u5B50\u4E2D\uFF0C\u4E00\u4E2A\u8FDB\u7A0B\u6709\u5B83\u7684\u7236\u8FDB\u7A0B1\uFF08\u89C1\u7B2C\u4E09\u5217PPID\uFF09\u3002</p><ul><li>\u4E00\u4E2A\u5B66\u751F\u8FDB\u7A0B\u6B63\u5728\u505A\u4E00\u4E9B\u4E8B\u60C5\uFF0C\u4F46\u4E0D\u77E5\u4F55\u6545\u4ECE\u672A\u5B8C\u6210\uFF08\u4ECD\u5728\u8FD0\u884C\uFF09\uFF0C\u4F46\u8BE5\u4F1A\u8BDD\u7684\u539F\u59CBshell\u8FDB\u7A0B\u5DF2\u7ECF\u7EC8\u6B62\uFF08\u6CE8\u9500\uFF09\u4E86</li><li>\u6CE8\u610F\uFF0C\u5728 CentOS Linux \u4E0A\uFF0C\u8FDB\u7A0B1\u88AB\u79F0\u4E3Asystemd\uFF08\u5373\u7CFB\u7EDF\u5B88\u62A4\u8FDB\u7A0B\uFF09\uFF0C\u800C\u4E0D\u662Finit.</li><li>Process 1\u5728MacOS\u4E0A\u88AB\u79F0\u4E3A launchd\uFF08\u5373\u542F\u52A8\u5B88\u62A4\u8FDB\u7A0B\uFF09\uFF0C\u800C\u4E0D\u662Finit\u3002</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/4c33f09a6e948.png" alt="1648052944772.png" loading="lazy"></p><h2 id="cooperating-processes" tabindex="-1"><a class="header-anchor" href="#cooperating-processes" aria-hidden="true">#</a> Cooperating Processes</h2><ul><li>\u4E00\u4E2A\u72EC\u7ACB\u7684\u8FDB\u7A0B\u4E0D\u80FD\u5F71\u54CD\u6216\u88AB\u53E6\u4E00\u4E2A\u8FDB\u7A0B\u7684\u6267\u884C\u6240\u5F71\u54CD\u3002</li><li>\u4E00\u4E2A\u5408\u4F5C\u7684\u8FDB\u7A0B\u53EF\u4EE5\u5F71\u54CD\u6216\u88AB\u53E6\u4E00\u4E2A\u8FDB\u7A0B\u7684\u6267\u884C\u6240\u5F71\u54CD\u3002</li><li>\u5927\u591A\u6570\u8F83\u5927\u7684\u7CFB\u7EDF\u6709\u4E00\u4E2A\u76F8\u4E92\u5408\u4F5C\u7684\u8FDB\u7A0B\u96C6\u5408\u3002</li><li>Web server and web browser (client) pair is a form of cooperating processes, residing over the network at different computers.</li></ul><p>\u8FDB\u7A0B\u5408\u4F5C\u7684\u4F18\u70B9\uFF1A</p><ul><li>\u4FE1\u606F\u5171\u4EAB\uFF1A\u5E76\u53D1\u8BBF\u95EE\u6570\u636E.</li><li>\u8BA1\u7B97\u901F\u5EA6\u52A0\u5FEB\uFF1A\u5206\u89E3\u6210\u8FDB\u7A0B\u7684\u5B50\u4EFB\u52A1.</li><li>\u6A21\u5757\u5316\uFF1A\u66F4\u597D\u5730\u7ED3\u6784\u5316\u529F\u80FD.</li><li>\u65B9\u4FBF\u6027\uFF1A\u5728\u5E76\u53D1\u5DE5\u4F5C\u6A21\u5F0F\u4E0B\u5EFA\u7ACB\u4E00\u4E2A\u7528\u6237\u6A21\u578B\u3002</li></ul><p>A very common view point of cooperating processes is the model of a producer and a consumer.</p><h2 id="interprocess-communication" tabindex="-1"><a class="header-anchor" href="#interprocess-communication" aria-hidden="true">#</a> Interprocess Communication</h2><ul><li>Producer process produces information (called item) that is consumed by a consumer process.</li><li>Information (item) produced by producer must be stored up for consumer usage later (since consumer may not be running at the same speed as producer).</li></ul><p>Producer-consumer problem is related to a problem to coordinate producer(s) and consumer(s), especially when the buffer to hold the intermediate data is not unlimited.</p><ul><li>Producer could store data into a shared array or shared queue and consumer takes it out there. <ul><li>Shared array is like the board and everyone can see and draw.</li></ul></li><li>Producer may send a message containing the data to consumer for consumer to read. <ul><li>Message is like an SMS and only the pair knows</li></ul></li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/aaef2764bda67.png" alt="1648093032934.png" loading="lazy"></p><p>\u5408\u4F5C\u8FDB\u7A0B\u8FDB\u884C\u901A\u4FE1\u548C\u540C\u6B65\u884C\u52A8\u7684\u673A\u5236</p><ul><li>\u5171\u4EAB\u5185\u5B58\u7CFB\u7EDF\uFF1A\u8FDB\u7A0B\u901A\u8FC7\u8BFB/\u5199\u5171\u4EAB\u53D8\u91CF\u8FDB\u884C\u901A\u4FE1\u3002</li><li>\u6D88\u606F\u4F20\u9012\u7CFB\u7EDF\uFF1A\u8FDB\u7A0B\u4E4B\u95F4\u901A\u8FC7\u4F20\u9012\u4FE1\u606F\u8FDB\u884C\u901A\u4FE1\uFF0C\u4E0D\u4F7F\u7528\u5171\u4EAB\u53D8\u91CF\u3002</li></ul><p>Interprocess communication (IPC) normally refers to message passing approach with two operations: <strong>send</strong>(message), <strong>receive</strong>(message).</p><ul><li>If process P and Q wish to communicate, they need to establish a communication link between them and exchange messages via send/receive.</li><li>Communication link could be physical (e.g., shared memory, hardware bus) or logical (e.g., channel or socket).</li></ul><h2 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization" aria-hidden="true">#</a> Synchronization</h2><p>Concurrent access to shared data by cooperating processes (or threads) may make data inconsistent.</p><p>\u540C\u6B65\u786E\u4FDD\u5171\u4EAB\u4E00\u4E2A\u903B\u8F91\u5730\u5740\u7A7A\u95F4\u7684\u5408\u4F5C\u8FDB\u7A0B\u7684\u6709\u5E8F\u6267\u884C\uFF0C\u4EE5\u4FDD\u8BC1\u6570\u636E\u7684\u4E00\u81F4\u6027\u3002</p><ul><li>Synchronization requests processes to wait for the signal to go ahead, to avoid the race condition.</li><li>Examples include sleeping barber problem, reader-writer problem, society room problem.</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/03/24/43ef2b86ade17.png" alt="1648093272191.png" loading="lazy"></p>',113);function n(s,a){return r}var l=e(i,[["render",n]]);export{l as default};
