import{_ as e,f as a}from"./app.0c34ee38.js";const n={},t=a(`<h1 id="mips\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E83" tabindex="-1"><a class="header-anchor" href="#mips\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E83" aria-hidden="true">#</a> MIPS\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E83</h1><h2 id="remind" tabindex="-1"><a class="header-anchor" href="#remind" aria-hidden="true">#</a> Remind</h2><p>\u9605\u8BFB\u672C\u6587\u4E4B\u524D\uFF0C\u4F60\u53EF\u80FD\u9700\u8981\u5148\u5B66\u4E60 MIPS\u6C47\u7F16\u8BED\u8A00\u7B80\u6613\u5165\u95E83</p><p><strong>\u672C\u6587\u63A2\u8BA8\u5185\u5BB9</strong></p><ul><li>Program flow control</li><li>Subroutine linkage</li></ul><h2 id="program-flow-control" tabindex="-1"><a class="header-anchor" href="#program-flow-control" aria-hidden="true">#</a> Program Flow Control</h2><ul><li>Program is the ordered sequence of instructions</li><li>instructions are executed sequentially</li></ul><p>We want more functionalities: e.g., in high-level-languages, we have if-else, while ( condition), \u2026</p><p>Assembly language build up these functionalities(\u529F\u80FD) from basic instructions (the philosophy of RISC\u300CRISC\u7684\u539F\u7406\u300D)</p><h3 id="jump-instruction" tabindex="-1"><a class="header-anchor" href="#jump-instruction" aria-hidden="true">#</a> Jump Instruction</h3><p>Recall: j addr and instruction cycle:<br> fetch \u2014 update PC \u2014 execute</p><p>How j addr should work?<br> fetch j addr\u2014 updata PC \u2014 execute j addr (PC = addr)</p><p>But NOT that easy!</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/18/c7305e78034c3.png" alt="image.png" title="image.png" width="240px"><h4 id="branch-delay-slot" tabindex="-1"><a class="header-anchor" href="#branch-delay-slot" aria-hidden="true">#</a> Branch Delay Slot</h4><p>Underlying reason (not required): MIPS is pipelined</p><p>To increase speed, processor will cleverly fetch <strong>multiple instructions</strong> and starts working on them all \u2014 a pipeline of instructions.</p><p>The instruction following jump is almost completed when jump is executed</p><p>Instead of wasting efforts, processor will allow to complete that instruction after jump instruction</p><p>The instruction right after jump instruction is called Brach Delay Slot. Not only jump instructions, all the instuctions that include jumping to another address need use Brach Delay Slot.</p><p>Effect: branch delay slot will always be executed</p><p>How to deal with this? \u2014 put a no-op instruction right after jump instruction</p><p><strong>Example</strong></p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/18/45857a7c3509e.png" alt="image.png" title="image.png"><p><strong>Importantly, PC will be set to addr after the branch delay slot is executed (not after j addr is executed)</strong></p><h3 id="example-of-jump" tabindex="-1"><a class="header-anchor" href="#example-of-jump" aria-hidden="true">#</a> Example of Jump</h3><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/18/de312597b4e81.png" alt="CleanShot 2021-02-18 at 21.08.02@2x.png" title="CleanShot 2021-02-18 at 21.08.02@2x.png"><p>\u5F18\u6811\u7684\u6279\u6CE8\uFF1A\u6709\u4E00\u8BF4\u4E00\uFF0C\u6211\u89C9\u5F97\u5C31\u662F\u4E2A\u6267\u884C\u5148\u540E\u7684\u95EE\u9898\u3002\u4E00\u822C\u6267\u884C Instruction \u548CPC\u7684\u6539\u53D8\u7684\u6267\u884C\u662F\u540C\u65F6\u7684\u3002\u6839\u636E\u4E0A\u56FE\u7684\u89E3\u91CA\uFF0C\u5982\u679C\u6CA1\u6709pipeline mechanism\uFF08\u7BA1\u9053\u673A\u5236\uFF09\uFF0CPC \u5C31\u4F1A \u6309\u7167 jump 0x00400000\u6307\u4EE4 \u53D8\u6210 00400000\u3002\u4F46\u662F \u56E0\u4E3A pipeline mechanism \u7684\u5B58\u5728\uFF0C\u80FD\u591F\u5148\u8BA9PC\u6539\u53D8\uFF0C\u4E4B\u540E\u518D\u6267\u884C\u8FD9\u4E2A\u5468\u671F\u7684\u6307\u4EE4\u3002MIPS\u5728jump \u6307\u4EE4\u4F7F\u7528\u540E \u4F7F\u7528 Branch Delay Slot \u6307\u4EE4\uFF0C\u7531\u4E8EPC\u6536\u5230\u6307\u4EE4\uFF0C\u8981\u53D8\u6210 00400000\u3002</p><h2 id="other-branch-instructions" tabindex="-1"><a class="header-anchor" href="#other-branch-instructions" aria-hidden="true">#</a> Other Branch Instructions</h2><p>Jump is one of the uncondition branch instructions.</p><p>Jump addr \u5E26\u8D70\u6D88\u606F</p><ul><li>\u8DF3\u8F6C\u5230 addr\u6307\u5B9A\u7684\u6307\u4EE4</li><li>\u6B63\u5E38\u505A\u6CD5\uFF1A\u4F7F\u7528\u7B26\u53F7\u5730\u5740\uFF1B\u5728\u8DF3\u8F6C\u6307\u4EE4\u4E4B\u540E\u7ACB\u5373\u653E\u7F6E\u201C no-op\u201D\u6307\u4EE4</li></ul><p>\u5F53\u7136\uFF0C\u8FD8\u6709\u5176\u4ED6\u7684 branch instructions</p><p>\u4E3B\u8981\u7814\u7A76\u76EE\u6807\uFF1A\u5982\u4F55\u4F7F\u7528\u8FD9\u4E9B\u6307\u4EE4\u4EE5\u9AD8\u7EA7\u8BED\u8A00\u5B9E\u73B0\u63A7\u5236\u7ED3\u6784 \u4F8B\u5982\uFF0C\u8DF3\u8F6C\u53EF\u7528\u4E8E\u5B9E\u73B0\u201C\u65E0\u6761\u4EF6\u5FAA\u73AF\u201D</p><h3 id="conditional-branch-instructions" tabindex="-1"><a class="header-anchor" href="#conditional-branch-instructions" aria-hidden="true">#</a> Conditional Branch Instructions</h3><p>\u6761\u4EF6\u5206\u652F\u6307\u4EE4\u4EC5\u5728\u6EE1\u8DB3\u7279\u5B9A\u6761\u4EF6\u65F6\u624D\u5206\u652F\u5230\u65B0\u5730\u5740</p><ul><li>branch on equal: beq u,v, addr # if $u == $v, branches to addr</li><li>branch on not equal: bne u,v, addr # if $u != $v, branches to addr</li><li>branch on less than zero: bltz s, addr # if $s &lt;0, branches to addr; note: $s in 2\u2019s complement form</li><li>branch on greater than or equal to zero: bge z s, addr # if $s&gt;=0, branches to zero. note: $s in 2\u2019s complement form</li></ul><p>\u4EE5\u4E0A branch instructions \u4E4B\u540E \u90FD\u8981\u6DFB\u52A0 Branch Delay Slot \u6307\u4EE4\u3002</p><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h3><p>Essentially, the conditional branch instructions implement the \u201Cif \u2026 then do sth\u201D control structure</p><p>branch on equal: beq u,v, addr # if $u == $v, branches to addr</p><p>\u7A0B\u5E8F\u6D41\u7A0B\u56FE</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/4e28793169c1d.png" alt="CleanShot 2021-02-21 at 19.13.23@2x.png" title="CleanShot 2021-02-21 at 19.13.23@2x.png"><h3 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2</h3><p>Two-way decision control structure: if true, do A; else do B</p><p>combine of conditional branch and jump</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/5ce351b5c2f6d.png" alt="CleanShot 2021-02-21 at 19.17.22@2x.png" title="CleanShot 2021-02-21 at 19.17.22@2x.png"><p><strong>A good practice: draw the flow chart of the program first</strong></p><h3 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example 3</h3><p>Program task: calculate the absolute value of A stored at a given address</p><ul><li>idea: if A &lt; 0: store -A; else do nothing</li><li>we can use one conditional branch instruction</li></ul><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/34703d7692684.png" alt="CleanShot 2021-02-21 at 19.29.38@2x.png" title="CleanShot 2021-02-21 at 19.29.38@2x.png"><p>the blank should fill with 0.</p><p>Question1: Determine if A is negative or not</p><ul><li>check the \u201Csign\u201D bit (at position 31) of A (assume 2\u2019s complement form)</li><li>shift right logical: srl $t0, $t1, const; shift the bits in $t1 to the right for const positions, and fill the left positions with 0; store the result in $t0</li><li>note, we stored the value of A in $8; question: what\u2019s the value of $9 after srl $9, $8, 31</li></ul><p>Question2: Determine if A is negative or not</p><ul><li>the value of $9: first 31 bits are all 0, the last bit is the sign bit of A</li><li>as a result, if $9 == 0, A is positive (or 0)</li></ul><div class="language-assembly ext-assembly line-numbers-mode"><pre class="language-assembly"><code>    .text
    .globl main

main:
# Load A
    lui      $10, 0x1000 # initialize the base register
    lw      $8, 0 ($10)  # load A to register $8
# Is A negative?
    srl    $9, $8, 31  # shift the sign bit to position 0
    beq   $0, $9, done # check if $9 == 0
    sll     $0, $0, 0  # branch delay slot
# Store -A
    subu  $8, $0, $8   #calculate -A
    sw      $8, 0($10)  # store -A back to the address
done: 
         .data
A:     .word -1
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="count-loop" tabindex="-1"><a class="header-anchor" href="#count-loop" aria-hidden="true">#</a> Count Loop</h2><p>A common type of program loop \u2014 execute for some fixed times, controlled by an integer (counter)</p><p>Three critical(\u5173\u952E\u7684) parts</p><ul><li>initialize the counter</li><li>test the counter value and end the loop on the correct value</li><li>increment the counter</li></ul><p>A top-driven loop in assembly language</p><ul><li>check the condition on the top</li><li>use a combination of conditional branch, jump, and conditional set instructions</li></ul><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/b842a22b543e0.png" alt="image.png" title="image.png" width="240px"><h3 id="conditional-set-instructions" tabindex="-1"><a class="header-anchor" href="#conditional-set-instructions" aria-hidden="true">#</a> Conditional Set Instructions</h3><p>Used to implement relational operations</p><ul><li>idea: set a register to 1 or 0 to show the relation between two values (often used as a flag)</li><li>note: it will not change the program flow itself \u2014 rather, it can be used as some condition to trigger the branch instructions</li></ul><h4 id="set-on-less-than-slt" tabindex="-1"><a class="header-anchor" href="#set-on-less-than-slt" aria-hidden="true">#</a> Set on Less Than slt</h4><div class="language-assembly ext-assembly line-numbers-mode"><pre class="language-assembly"><code>slt d, s, t # $s and $t contains signed integers in 2\u2019s complement  
# set $d = 1 if $s &lt; $t; else, set $d = 0
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="other-conditional-set-instructions" tabindex="-1"><a class="header-anchor" href="#other-conditional-set-instructions" aria-hidden="true">#</a> Other conditional set instructions</h4><div class="language-assembly ext-assembly line-numbers-mode"><pre class="language-assembly"><code>sltu d, s, t # used with unsigned integers
slti d, s, imm # Set on Less Than Immediate 
               # if $s &lt; imm, set $d =1; 
               # else, set $d = 0
sltiu d, s, imm # used with unsigned integers
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/3a5a1e262454c.png" alt="CleanShot 2021-02-21 at 21.57.51@2x.png" title="CleanShot 2021-02-21 at 21.57.51@2x.png"><h3 id="example-4" tabindex="-1"><a class="header-anchor" href="#example-4" aria-hidden="true">#</a> Example</h3><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/8fadb34273d15.png" alt="CleanShot 2021-02-21 at 22.03.02@2x.png" title="CleanShot 2021-02-21 at 22.03.02@2x.png"><h2 id="subroutine-linkage" tabindex="-1"><a class="header-anchor" href="#subroutine-linkage" aria-hidden="true">#</a> Subroutine Linkage</h2><p>\u5B50\u7A0B\u5E8F\uFF08Subroutine\uFF09\u662F\u4EC0\u4E48\uFF1F</p><ul><li>\u5B50\u4F8B\u7A0B\u662F\u4EE3\u7801\u7684\u903B\u8F91\u5212\u5206\uFF0C\u53EF\u4EE5\u88AB\u89C6\u4E3A\u72EC\u7ACB\u64CD\u4F5C</li><li>\u6240\u6709\u9AD8\u7EA7\u8BED\u8A00\u90FD\u6709\u5B50\u4F8B\u7A0B\u7684\u6982\u5FF5\uFF0C\u4E5F\u79F0\u4E3A\u8FC7\u7A0B\uFF0C\u51FD\u6570\uFF0C\u65B9\u6CD5</li><li>\u5B50\u7A0B\u5E8F\u53EF\u4EE5\u6839\u636E\u9700\u8981\u5728\u7A0B\u5E8F\u4E2D\u4F7F\u7528</li></ul><h3 id="try-with-jump-instruction" tabindex="-1"><a class="header-anchor" href="#try-with-jump-instruction" aria-hidden="true">#</a> Try with Jump Instruction</h3><p>\u5047\u8BBE\u6211\u4EEC\u4F7F\u7528sub\u6765\u6807\u8BB0\u5B50\u4F8B\u7A0B\u7684\u8D77\u59CB\u5730\u5740</p><p>\u60F3\u6CD5\uFF1A\u8C03\u7528\u5B50\u7A0B\u5E8F=\u8DF3\u8F6C\u5230\u5B50\u7A0B\u5E8F</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/744d1cbc702df.png" alt="image.png" title="image.png" width="240px"><p>\u5728\u4E3B\u7A0B\u5E8F\u4E2D\uFF0C\u6211\u4EEC\u8DF3\u5230\u5B50\u7A0B\u5E8F\uFF08\u5373\u8C03\u7528\u5B50\u7A0B\u5E8F\uFF09</p><p>\u5B8C\u6210\u5B50\u7A0B\u5E8F\u540E\uFF0C\u6211\u4EEC\u9700\u8981\u8FD4\u56DE\u4E3B\u7A0B\u5E8F</p><p>How\uFF1Fjump \u5230ret\uFF08\u5728j\u5B50\u4E4B\u540E\uFF0C\u5C06\u6307\u4EE4\u91CD\u65B0\u6807\u8BB0\uFF09</p><p><strong>\u5982\u679C\u6211\u4EEC\u60F3\u5728\u4E3B\u7A0B\u5E8F\u4E2D\u591A\u6B21\u8C03\u7528\u5B50\u7A0B\u5E8F\u600E\u4E48\u529E\uFF1F</strong></p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/1386938b9a278.png" alt="CleanShot 2021-02-21 at 22.15.49@2x.png" title="CleanShot 2021-02-21 at 22.15.49@2x.png"><p>\u95EE\u9898\u662F\u5F88\u591A\u5730\u65B9\u8C03\u7528\u4E86sub\uFF0C\u6211\u4EEC\u4E0D\u77E5\u9053\u6267\u884C\u5B8Csub\u540E\u8BE5\u56DE\u5230\u54EA\u4E2A\u5730\u65B9\u3002</p><p>\u6240\u4EE5\uFF0C\u8FD9\u4E2A\u65F6\u5019\u6211\u4EEC\u5C31\u8981\u7528\u5230 $ra Register</p><h3 id="ra-register" tabindex="-1"><a class="header-anchor" href="#ra-register" aria-hidden="true">#</a> $ra Register</h3><ul><li>$ra ($31) is the register used for linkage, it holds the return address for a subroutine</li><li>idea: when we call a subroutine, we store the return address in $ra; when the subroutine is finished, the program returns to that address</li><li>implementation: a pair of instructions jal and jr</li></ul><h4 id="jal-and-jr-instruction" tabindex="-1"><a class="header-anchor" href="#jal-and-jr-instruction" aria-hidden="true">#</a> jal and jr Instruction</h4><h5 id="jal-sub" tabindex="-1"><a class="header-anchor" href="#jal-sub" aria-hidden="true">#</a> jal sub</h5><p>(1) set $ra to PC + 4</p><p>the result is that $ra stores the address of the (n+2)th instruction (suppose jar is the nth instruction)</p><p>in memory: jal| branch delay slot | instruction that will return to</p><p>(2) set PC to sub</p><h5 id="jr-ra" tabindex="-1"><a class="header-anchor" href="#jr-ra" aria-hidden="true">#</a> jr $ra</h5><p>set PC to $ra</p><h4 id="jal-example" tabindex="-1"><a class="header-anchor" href="#jal-example" aria-hidden="true">#</a> Jal Example</h4><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/1577980e7d9b2.png" alt="CleanShot 2021-02-21 at 22.50.45@2x.png" title="CleanShot 2021-02-21 at 22.50.45@2x.png"><h3 id="calling-convention" tabindex="-1"><a class="header-anchor" href="#calling-convention" aria-hidden="true">#</a> Calling Convention</h3><p>Calling convention is the agreement about how subroutines are called and how control is returned</p><ul><li>an agreement at the software level</li><li>different languages and different operating systems for the same processor usually have different calling conventions</li></ul><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/9eb3aee3c3557.png" alt="image.png" title="image.png" width="240px"><h4 id="use-of-registers" tabindex="-1"><a class="header-anchor" href="#use-of-registers" aria-hidden="true">#</a> Use of Registers</h4><p>Caller (e.g., main routine) and Callee (subroutine) both use registers to store data\u300C\u8C03\u7528\u8005\uFF08\u4F8B\u5982\u4E3B\u4F8B\u7A0B\uFF09\u548C\u88AB\u8C03\u7528\u8005\uFF08\u5B50\u4F8B\u7A0B\uFF09\u90FD\u4F7F\u7528\u5BC4\u5B58\u5668\u6765\u5B58\u50A8\u6570\u636E\u300D</p><p>conflict may happen \u2014 caller stored some data in a register and the callee may also use the register and change the data</p><p>it\u2019s silly to go back to the caller to check which registers are used when writing subroutines \u2014 we need agreement among programmers</p><h4 id="different-roles-of-registers" tabindex="-1"><a class="header-anchor" href="#different-roles-of-registers" aria-hidden="true">#</a> Different roles of registers</h4><ul><li>$t0 - t9: subroutines can use without caution</li><li>$s0 - $s7: saved registers; if need to use it, save the value first and restore the value after use</li><li>$a0 - $a3: contain arguments for the subroutine</li><li>$v0 - $v1: contain values returned from the subroutine</li></ul><p>\u7FFB\u8BD1</p><p>\u300C$ t0-t9\uFF1A\u5B50\u7A0B\u5E8F\u53EF\u4EE5\u4E0D\u52A0\u8B66\u544A\u5730\u4F7F\u7528<br> $ s0-$ s7\uFF1A\u4FDD\u5B58\u7684\u5BC4\u5B58\u5668\uFF1B\u5982\u679C\u9700\u8981\u4F7F\u7528\u5B83\uFF0C\u8BF7\u5148\u4FDD\u5B58\u8BE5\u503C\uFF0C\u7136\u540E\u518D\u4F7F\u7528\u540E\u6062\u590D\u8BE5\u503C<br> $ a0-$ a3\uFF1A\u5305\u542B\u5B50\u4F8B\u7A0B\u7684\u53C2\u6570<br> $ v0-$ v1\uFF1A\u5305\u542B\u4ECE\u5B50\u4F8B\u7A0B\u8FD4\u56DE\u7684\u503C\u300D</p><p>Example: is the following code a good convention\uFF08\u60EF\u4F8B\uFF09?</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/02/21/f5423e234325c.png" alt="CleanShot 2021-02-21 at 23.10.25@2x.png" title="CleanShot 2021-02-21 at 23.10.25@2x.png"><h4 id="a-simple-mips-calling-convention" tabindex="-1"><a class="header-anchor" href="#a-simple-mips-calling-convention" aria-hidden="true">#</a> A Simple MIPS Calling Convention</h4><p>Try to obey the following simple convention</p><ul><li>use jal and jr with $ra to call subroutines</li><li>do not call another subroutine within a subroutine</li><li>obey the conventional use of registers</li></ul><p>Note: there are more complex calling conventions</p><h2 id="\u63A8\u8350" tabindex="-1"><a class="header-anchor" href="#\u63A8\u8350" aria-hidden="true">#</a> \u63A8\u8350</h2><p>a good online source: https://chortle.ccsu.edu/AssemblyTutorial/index.html#part7</p><h2 id="\u5F15\u7528\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u8D44\u6599" aria-hidden="true">#</a> \u5F15\u7528\u8D44\u6599</h2><ul><li>COMP2421@Polyu&#39;s learning lecture</li></ul>`,124);function i(s,r){return t}var o=e(n,[["render",i]]);export{o as default};
