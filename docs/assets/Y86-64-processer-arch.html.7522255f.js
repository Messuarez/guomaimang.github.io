import{_ as r,r as s,o,a as h,d as i,e as a,F as c,f as n,b as e}from"./app.43eefb5f.js";const l={},d=n('<h1 id="y86-64\u5904\u7406\u5668\u67B6\u6784\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#y86-64\u5904\u7406\u5668\u67B6\u6784\u7B80\u4ECB" aria-hidden="true">#</a> Y86-64\u5904\u7406\u5668\u67B6\u6784\u7B80\u4ECB</h1><img src="https://pic.hanjiaming.com.cn/2021/04/06/d920281841490.png" alt="image.png" title="image.png"><h2 id="isa-\u6307\u4EE4\u96C6\u67B6\u6784" tabindex="-1"><a class="header-anchor" href="#isa-\u6307\u4EE4\u96C6\u67B6\u6784" aria-hidden="true">#</a> ISA(\u6307\u4EE4\u96C6\u67B6\u6784)</h2>',3),p=i("strong",null,"\u6307\u4EE4\u96C6\u67B6\u6784",-1),g=e("\uFF08\u82F1\u8BED\uFF1AInstruction Set Architecture\uFF0C\u7F29\u5199\u4E3AISA\uFF09\uFF0C\u53C8\u79F0"),m=i("strong",null,"\u6307\u4EE4\u96C6",-1),u=e("\u6216"),_=i("strong",null,"\u6307\u4EE4\u96C6\u4F53\u7CFB",-1),f=e("\uFF0C\u662F"),b={href:"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"},x=e("\u8BA1\u7B97\u673A\u4F53\u7CFB\u7ED3\u6784"),w=e("\u4E2D\u4E0E"),k={href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%A8%AD%E8%A8%88",target:"_blank",rel:"noopener noreferrer"},E=e("\u7A0B\u5E8F\u8BBE\u8BA1"),A=e("\u6709\u5173\u7684\u90E8\u5206\uFF0C\u5305\u542B\u4E86"),B={href:"https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5",target:"_blank",rel:"noopener noreferrer"},y=e("\u57FA\u672C\u6570\u636E\u7C7B\u578B"),j=e("\uFF0C\u6307\u4EE4\u96C6\uFF0C"),I={href:"https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},z=e("\u5BC4\u5B58\u5668"),v=e("\uFF0C"),C={href:"https://zh.wikipedia.org/wiki/%E5%AF%BB%E5%9D%80%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},S=e("\u5BFB\u5740\u6A21\u5F0F"),D=e("\uFF0C"),P={href:"https://zh.wikipedia.org/w/index.php?title=%E5%AD%98%E5%82%A8%E4%BD%93%E7%B3%BB&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},F=e("\u5B58\u50A8\u4F53\u7CFB"),M=e("\uFF0C"),U={href:"https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7",target:"_blank",rel:"noopener noreferrer"},q=e("\u4E2D\u65AD"),L=e("\uFF0C"),T={href:"https://zh.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"},O=e("\u5F02\u5E38\u5904\u7406"),R=e("\u4EE5\u53CA\u5916\u90E8"),W={href:"https://zh.wikipedia.org/wiki/I/O",target:"_blank",rel:"noopener noreferrer"},H=e("I/O"),N=e("\u3002\u6307\u4EE4\u96C6\u67B6\u6784\u5305\u542B\u4E00\u7CFB\u5217\u7684"),V={href:"https://zh.wikipedia.org/w/index.php?title=Opcode&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},Y=e("opcode"),X=e("\u5373\u64CD\u4F5C\u7801\uFF08"),G={href:"https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},Z=e("\u673A\u5668\u8BED\u8A00"),J=e("\uFF09\uFF0C\u4EE5\u53CA\u7531\u7279\u5B9A\u5904\u7406\u5668\u6267\u884C\u7684\u57FA\u672C\u547D\u4EE4\u3002"),K=e("\u4E0D\u540C\u7684\u5904\u7406\u5668\u201C\u5BB6\u65CF\u201D\u2014\u2014\u4F8B\u5982"),Q={href:"https://zh.wikipedia.org/wiki/Intel",target:"_blank",rel:"noopener noreferrer"},$=e("Intel"),ee=e(),ie={href:"https://zh.wikipedia.org/wiki/IA-32",target:"_blank",rel:"noopener noreferrer"},te=e("IA-32"),ae=e("\u548C"),ne={href:"https://zh.wikipedia.org/wiki/X86-64",target:"_blank",rel:"noopener noreferrer"},re=e("x86-64"),se=e("\u3001"),oe={href:"https://zh.wikipedia.org/wiki/IBM",target:"_blank",rel:"noopener noreferrer"},he=e("IBM"),ce=e("/Freescale Power\u548C"),le={href:"https://zh.wikipedia.org/wiki/ARM",target:"_blank",rel:"noopener noreferrer"},de=e("ARM"),pe=e("\u5904\u7406\u5668\u5BB6\u65CF\u2014\u2014\u6709\u4E0D\u540C\u7684\u6307\u4EE4\u96C6\u67B6\u6784\u3002["),ge={href:"https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B#cite_note-1",target:"_blank",rel:"noopener noreferrer"},me=e("1]"),ue=e("\u6307\u4EE4\u96C6\u4F53\u7CFB\u4E0E"),_e={href:"https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9E%B6%E6%A7%8B",target:"_blank",rel:"noopener noreferrer"},fe=e("\u5FAE\u67B6\u6784"),be=e("\uFF08\u4E00\u5957\u7528\u4E8E\u6267\u884C\u6307\u4EE4\u96C6\u7684\u5FAE\u5904\u7406\u5668\u8BBE\u8BA1\u65B9\u6CD5\uFF09\u4E0D\u540C\u3002\u4F7F\u7528\u4E0D\u540C\u5FAE\u67B6\u6784\u7684\u7535\u8111\u53EF\u4EE5\u5171\u4EAB\u4E00\u79CD\u6307\u4EE4\u96C6\u3002\u4F8B\u5982\uFF0C"),xe={href:"https://zh.wikipedia.org/wiki/%E8%8B%B1%E7%89%B9%E7%88%BE",target:"_blank",rel:"noopener noreferrer"},we=e("Intel"),ke=e("\u7684"),Ee={href:"https://zh.wikipedia.org/wiki/%E5%A5%94%E9%A8%B0",target:"_blank",rel:"noopener noreferrer"},Ae=e("Pentium"),Be=e("\u548C"),ye={href:"https://zh.wikipedia.org/wiki/%E8%B6%85%E5%BE%AE%E5%8D%8A%E5%AF%BC%E4%BD%93",target:"_blank",rel:"noopener noreferrer"},je=e("AMD"),Ie=e("\u7684"),ze={href:"https://zh.wikipedia.org/wiki/AMD_Athlon",target:"_blank",rel:"noopener noreferrer"},ve=e("AMD Athlon"),Ce=e("\uFF0C\u4E24\u8005\u51E0\u4E4E\u91C7\u7528\u76F8\u540C\u7248\u672C\u7684"),Se={href:"https://zh.wikipedia.org/wiki/X86",target:"_blank",rel:"noopener noreferrer"},De=e("x86"),Pe=e("\u6307\u4EE4\u96C6\u4F53\u7CFB\uFF0C\u4F46\u662F\u4E24\u8005\u5728\u5185\u90E8\u8BBE\u8BA1\u4E0A\u6709\u672C\u8D28\u7684\u533A\u522B\u3002"),Fe=i("p",null,"\u7EF4\u57FA\u767E\u79D1",-1),Me=n('<h3 id="designing-an-isa" tabindex="-1"><a class="header-anchor" href="#designing-an-isa" aria-hidden="true">#</a> Designing an ISA</h3><ul><li>Designing processor states visible to programmers\u300C\u8BBE\u8BA1\u5BF9\u7A0B\u5E8F\u5458\u53EF\u89C1\u7684\u5904\u7406\u5668\u72B6\u6001\u300D</li><li>Designing a set of instructions\u300C\u8BBE\u8BA1\u4E00\u5957\u6307\u4EE4\u300D</li><li>Encoding the instructions\u300C\u5BF9\u6307\u4EE4\u7F16\u7801\u300D</li></ul><p>All the above designs will be exemplified by the Y86-64 ISA --- a much simpler X86 ISA enough to demonstrate the key concepts\u300C\u4EE5\u4E0A\u6240\u6709\u8BBE\u8BA1\u90FD\u5C06\u4EE5Y86-64 ISA\u4E3A\u4F8B-\u4E00\u79CD\u66F4\u7B80\u5355\u7684X86 ISA\uFF0C\u8DB3\u4EE5\u6F14\u793A\u5173\u952E\u6982\u5FF5\u300D</p><h2 id="circuits" tabindex="-1"><a class="header-anchor" href="#circuits" aria-hidden="true">#</a> Circuits</h2><img src="https://pic.hanjiaming.com.cn/2021/04/06/0f104d60eef46.png" alt="image.png" title="image.png"><h3 id="digital-circuits" tabindex="-1"><a class="header-anchor" href="#digital-circuits" aria-hidden="true">#</a> Digital circuits</h3><h4 id="logic-gates" tabindex="-1"><a class="header-anchor" href="#logic-gates" aria-hidden="true">#</a> Logic gates</h4><p>Logic gates\uFF1ABasic computing electronic circuit elements\u300CBasic computing electronic circuit elements\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/8a4d6b082289a.png" alt="image.png" title="image.png"><ul><li>Logic gates are always active, is some input to a gate changes, then within some small amount of time, the output will change accordingly\u300C\u903B\u8F91\u95E8\u59CB\u7EC8\u5904\u4E8E\u6D3B\u52A8\u72B6\u6001\uFF0C\u67D0\u4E2A\u95E8\u7684\u67D0\u4E9B\u8F93\u5165\u4F1A\u53D1\u751F\u53D8\u5316\uFF0C\u7136\u540E\u5728\u77ED\u65F6\u95F4\u5185\uFF0C\u8F93\u51FA\u5C06\u76F8\u5E94\u5730\u53D1\u751F\u53D8\u5316\u300D</li><li>Can be represented by hardware control language (HCL)\u300C\u53EF\u4EE5\u7528\u786C\u4EF6\u63A7\u5236\u8BED\u8A00\uFF08HCL\uFF09\u8868\u793A\u300D <ul><li>\u6BD4\u5982\uFF1Aout = a &amp;&amp; b; out = a || b \u2026</li></ul></li></ul><h3 id="combinational-circuits" tabindex="-1"><a class="header-anchor" href="#combinational-circuits" aria-hidden="true">#</a> Combinational circuits</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/3ab61659e1f5e.png" alt="image.png" title="image.png"><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h4><p>if a and b are equal, output 1; otherwise, output 0With <strong>and</strong>, <strong>or</strong> and <strong>not</strong> gates</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/1bff53702ecca.png" alt="image.png" title="image.png"><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2</h4><p>selecting a or b according to s</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/115ad8e71b87a.png" alt="image.png" title="image.png"><h4 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example 3</h4><p>From a single bit to multiple bits (word)</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/054f5031eabdd.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/4fc3c0a80d5b1.png" alt="image.png" title="image.png"><h4 id="arithmetic-logic-unit-alu" tabindex="-1"><a class="header-anchor" href="#arithmetic-logic-unit-alu" aria-hidden="true">#</a> Arithmetic Logic Unit (ALU)</h4><img src="https://pic.hanjiaming.com.cn/2021/04/06/28c1935a003ca.png" alt="image.png" title="image.png"><ul><li>Using and, or, not gates to implement arithmetic logic\u300CUsing and, or, not gates to implement arithmetic logic\u300D</li><li>Compute the result, and set the conditional codes\u300CCompute the result, and set the conditional codes\u300D</li><li>Inputs and outputs are multi-bit word\u300CInputs and outputs are multi-bit word\u300D</li></ul><h3 id="storage-elements" tabindex="-1"><a class="header-anchor" href="#storage-elements" aria-hidden="true">#</a> Storage elements</h3><p>Storage elements are special electronic circuits that can retain data values\u300C\u5B58\u50A8\u5143\u4EF6\u662F\u53EF\u4EE5\u4FDD\u7559\u6570\u636E\u503C\u7684\u7279\u6B8A\u7535\u5B50\u7535\u8DEF\u300D</p><ul><li>Storage elements can be read or written</li><li>Storage elements can be addressed</li><li>Storage elements rely on clocks to retain data values\u300C\u5B58\u50A8\u5143\u4EF6\u4F9D\u9760\u65F6\u949F\u6765\u4FDD\u7559\u6570\u636E\u503C\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/0957074806422.png" alt="image.png" title="image.png"><h2 id="y86-64-processor" tabindex="-1"><a class="header-anchor" href="#y86-64-processor" aria-hidden="true">#</a> Y86-64 processor</h2><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> state</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/2bd639cb02fff.png" alt="image.png" title="image.png"><ul><li>15 64-bit general purpose registers</li><li>Conditional codes <ul><li>ZF: zero;</li><li>SF: negative;</li><li>OF: overflow</li></ul></li><li>Program Counter\uFF1AIndicates address of next instruction</li><li>Memory <ul><li>Byte-addressable storage array\u300C\u5B57\u8282-\u53EF\u5BFB\u5740\u5B58\u50A8\u9635\u5217\u300D</li><li>Words stored in little-endian byte order\u300C\u4EE5little-endian\u5B57\u8282\u987A\u5E8F\u5B58\u50A8\u7684\u5355\u8BCD\u300D</li></ul></li></ul><h4 id="little-endian" tabindex="-1"><a class="header-anchor" href="#little-endian" aria-hidden="true">#</a> little-endian</h4><p>\u5176\u5B9E<em>big endian</em>\u662F\u6307\u4F4E\u5730\u5740\u5B58\u653E\u6700\u9AD8\u6709\u6548\u5B57\u8282\uFF08<em>MSB</em>\uFF09\uFF0C\u800C<em>little endian</em>\u5219\u662F\u4F4E\u5730\u5740\u5B58\u653E\u6700\u4F4E\u6709\u6548\u5B57\u8282\uFF08<em>LSB</em>\uFF09\u3002</p><p>\u7528\u6587\u5B57\u8BF4\u660E\u53EF\u80FD\u6BD4\u8F83\u62BD\u8C61\uFF0C\u4E0B\u9762\u7528\u56FE\u50CF\u52A0\u4EE5\u8BF4\u660E\u3002\u6BD4\u5982\u6570\u5B57<em>0x12345678</em>\u5728\u4E24\u79CD\u4E0D\u540C\u5B57\u8282\u5E8F<em>CPU</em>\u4E2D\u7684\u5B58\u50A8\u987A\u5E8F\u5982\u4E0B\u6240\u793A\uFF1A</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/953f738b410d7.png" alt="image.png" title="image.png"><p>\u4ECE\u4E0A\u9762\u4E24\u56FE\u53EF\u4EE5\u770B\u51FA\uFF0C\u91C7\u7528<em>big endian</em>\u65B9\u5F0F\u5B58\u50A8\u6570\u636E\u662F\u7B26\u5408\u6211\u4EEC\u4EBA\u7C7B\u7684\u601D\u7EF4\u4E60\u60EF\u7684\u3002</p><h3 id="instruction-set" tabindex="-1"><a class="header-anchor" href="#instruction-set" aria-hidden="true">#</a> Instruction set</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/aeb49c2d6fe40.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/56d0691aa2d6f.png" alt="image.png" title="image.png"><h3 id="encoding-registers" tabindex="-1"><a class="header-anchor" href="#encoding-registers" aria-hidden="true">#</a> Encoding registers</h3><p>\u7ED9\u5BC4\u5B58\u5668\u7F16\u7801</p><p>Each register is uniquely specified by a 4-bit ID\u300C\u6BCF\u4E2A\u5BC4\u5B58\u5668\u7531\u4E00\u4E2A4\u4F4DID\u552F\u4E00\u5730\u6307\u5B9A\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/a49025d5218d5.png" alt="image.png" title="image.png"><p>ID 15 (0xF) indicates \u201Cno register\u201D\u300CID 15\uFF080x F\uFF09\u8868\u793A\u201C\u65E0\u5BC4\u5B58\u5668\u201D\u300D</p><h3 id="instruction-examples" tabindex="-1"><a class="header-anchor" href="#instruction-examples" aria-hidden="true">#</a> Instruction examples</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/91a28ca36c197.png" alt="image.png" title="image.png"><p><strong>Uniqueness (requirement on designing an ISA)\u300C\u552F\u4E00\u6027\uFF08\u8BBE\u8BA1ISA\u7684\u8981\u6C42\uFF09\u300D</strong></p><ul><li>The encodings must have a unique interpretation\u300C\u7F16\u7801\u5FC5\u987B\u5177\u6709\u552F\u4E00\u7684\u89E3\u91CA\u300D</li><li>Given a sequence of bytes (machine code), it can be interpreted into only one valid sequence of instructions\u300C\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u8282\u5E8F\u5217\uFF08\u673A\u5668\u4EE3\u7801\uFF09\uFF0C\u5B83\u53EA\u80FD\u89E3\u91CA\u4E3A\u4E00\u4E2A\u6709\u6548\u7684\u6307\u4EE4\u5E8F\u5217\u300D</li><li>From the first instruction, always being able to find the start byte of the next instruction\u300C\u4ECE\u7B2C\u4E00\u6761\u6307\u4EE4\u5F00\u59CB\uFF0C\u603B\u662F\u80FD\u591F\u627E\u5230\u4E0B\u4E00\u6761\u6307\u4EE4\u7684\u8D77\u59CB\u5B57\u8282</li></ul><h3 id="standard-stages-to-execute-one-instruction" tabindex="-1"><a class="header-anchor" href="#standard-stages-to-execute-one-instruction" aria-hidden="true">#</a> Standard stages to execute one instruction</h3><ul><li>We have \u2026\u2026 <ul><li>Hardware building blocks that can do arithmetic computation</li><li>Hardware storage elements to store data</li><li>Machine instructions defined</li></ul></li><li>We want to put all these things together to build a CPU <ul><li>That can read and understand a program in machine instructions</li><li>That can perform the functions specified by the machine instructions <ul><li>By operating the computation and storage elements of the CPU</li></ul></li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/d8d400734d87c.png" alt="image.png" title="image.png"><ul><li>As there are so many instructions, it will be not wise to design a specific hardware circuit for each instruction\u300C\u7531\u4E8E\u6307\u4EE4\u592A\u591A\uFF0C\u4E3A\u6BCF\u4E2A\u6307\u4EE4\u8BBE\u8BA1\u7279\u5B9A\u7684\u786C\u4EF6\u7535\u8DEF\u662F\u4E0D\u660E\u667A\u7684\u3002\u300D</li><li>The execution of instructions is standardized, i.e., all instructions follow the same steps, an in each step share the same hardware\u300C\u6307\u4EE4\u7684\u6267\u884C\u662F\u6807\u51C6\u5316\u7684\uFF0C\u5373\u6240\u6709\u6307\u4EE4\u90FD\u9075\u5FAA\u76F8\u540C\u7684\u6B65\u9AA4\uFF0C\u5E76\u4E14\u6BCF\u4E00\u6B65\u90FD\u5171\u4EAB\u76F8\u540C\u7684\u786C\u4EF6\u300D</li></ul><table><thead><tr><th><strong>Stages/Steps</strong></th><th><strong>Functions</strong></th></tr></thead><tbody><tr><td>Fetch</td><td>Read an instruction from the memory\u300C\u4ECE\u5185\u5B58\u4E2D\u8BFB\u53D6\u6307\u4EE4\u300D</td></tr><tr><td>Decode</td><td>Read operands\u300C\u64CD\u4F5C\u6570\u300D from registers\u300C\u4ECE\u5BC4\u5B58\u5668\u8BFB\u53D6\u64CD\u4F5C\u6570\u300D</td></tr><tr><td>Execute</td><td>Compute value or address\u300C\u6570\u5B66\u8BA1\u7B97\u300D</td></tr><tr><td>Memory access</td><td>Read or write data from/to memory\u300C\u4ECE\u5185\u5B58\u8BFB\u53D6\u6570\u636E\u6216\u5411\u5185\u5B58\u5199\u5165\u6570\u636E\u300D</td></tr><tr><td>Write back</td><td>Write results to registers\u300C\u5C06\u7ED3\u679C\u5199\u5165\u5BC4\u5B58\u5668\u300D</td></tr><tr><td>PC update</td><td>Update PC, get ready for the next instruction\u300C\u66F4\u65B0PC\uFF0C\u51C6\u5907\u4E0B\u4E00\u6761\u6307\u4EE4\u300D</td></tr></tbody></table><img src="https://pic.hanjiaming.com.cn/2021/04/06/7da880ef9f9e4.png" alt="image.png" title="image.png"><h4 id="computed-values" tabindex="-1"><a class="header-anchor" href="#computed-values" aria-hidden="true">#</a> Computed values</h4><p>Stored in CPU on hardware lines/pins</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/fcd00f369cbe0.png" alt="image.png" title="image.png"><h4 id="run-the-machine-codes" tabindex="-1"><a class="header-anchor" href="#run-the-machine-codes" aria-hidden="true">#</a> Run the machine codes</h4><p>Use an example program to show how the CPU run a program in the machine code form\u300C\u4F7F\u7528\u793A\u4F8B\u7A0B\u5E8F\u6765\u663E\u793ACPU\u5982\u4F55\u4EE5\u673A\u5668\u4EE3\u7801\u5F62\u5F0F\u8FD0\u884C\u7A0B\u5E8F\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/f8e7c1dcc5d1f.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/cd2a72a3bce61.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/2adaee0b7cf78.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/f098f6890120f.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/06/c01a577b8fe0c.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/16/17e1736f22460.png" alt="image.png" title="image.png"><h4 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline" aria-hidden="true">#</a> Pipeline</h4><img src="https://pic.hanjiaming.com.cn/2021/04/06/04f3b2593ea6d.png" alt="image.png" title="image.png"><ul><li>The whole production process is composed of multiple stages\u300C\u6574\u4E2A\u751F\u4EA7\u8FC7\u7A0B\u7531\u591A\u4E2A\u9636\u6BB5\u7EC4\u6210\u300D</li><li>Worker on each stage do only ONE thing\u300C\u6BCF\u4E2A\u9636\u6BB5\u7684\u5DE5\u4EBA\u53EA\u80FD\u505A\u4E00\u4EF6\u4E8B\u60C5\u300D</li><li>Products line up on the pipeline, each goes through all stages\u300C\u4EA7\u54C1\u5728\u6D41\u6C34\u7EBF\u4E2D\u6392\u5217\uFF0C\u6BCF\u4E2A\u9636\u6BB5\u90FD\u7ECF\u8FC7\u5404\u4E2A\u9636\u6BB5\u300D</li></ul><p>Rethinking the sequential machine</p><p>Every instruction goes through six stages\u300C\u6BCF\u6761\u6307\u4EE4\u90FD\u7ECF\u8FC7\u516D\u4E2A\u9636\u6BB5\u300D</p><p>In the sequential implementation, when the instruction is in one stage, e.g., execute, all the hardware components in other stages are idle\u300C\u5728\u987A\u5E8F\u5B9E\u73B0\u4E2D\uFF0C\u5F53\u6307\u4EE4\u5904\u4E8E\u4E00\u4E2A\u9636\u6BB5\uFF0C\u4F8B\u5982\u6267\u884C\u65F6\uFF0C\u5176\u4ED6\u9636\u6BB5\u7684\u6240\u6709\u786C\u4EF6\u7EC4\u4EF6\u90FD\u5904\u4E8E\u7A7A\u95F2\u72B6\u6001\u300D</p><p>This is under-utilization of the processor hardware\u300C\u8FD9\u662F\u5728-\u5904\u7406\u5668\u786C\u4EF6\u7684\u5229\u7528\u7387\u4E0D\u8DB3\u300D</p><h5 id="understanding-the-performance-of-pipeline" tabindex="-1"><a class="header-anchor" href="#understanding-the-performance-of-pipeline" aria-hidden="true">#</a> Understanding the performance of pipeline</h5><p>Executing an instruction consumes 300ps (1ps = 10-12s)</p><p>How many instructions can we execute in 1s? (throughput, IPS)<br> 1/(300 * 10-12) = 3.33 X 109 instructions\uFF08<strong>\u5728\u65E0\u540C\u65F6\u6267\u884C\u7684\u60C5\u51B5\u4E0B</strong>\uFF09</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/2deff4a398e41.png" alt="image.png" title="image.png"><p>Decompose the execution of each instruction into 3 stages, each stage takes 100ps to execute\u300C\u5C06\u6BCF\u4E2A\u6307\u4EE4\u7684\u6267\u884C\u5206\u89E3\u4E3A3\u4E2A\u9636\u6BB5\uFF0C\u6BCF\u4E2A\u9636\u6BB5\u9700\u8981100ps\u7684\u6267\u884C\u65F6\u95F4\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/315916204a29a.png" alt="image.png" title="image.png"><p>How many instructions can we execute in 1s? (throughput, IPS)\u300C\u6211\u4EEC\u53EF\u4EE5\u5728\u4E00\u79D2\u5185\u6267\u884C\u591A\u5C11\u6761\u6307\u4EE4\uFF1F \uFF08\u541E\u5410\u91CF\uFF0CIPS\uFF09\u300D</p><ul><li><p>1/(100 * 10-12) = 1010</p></li><li><p>3 times faster than the execution above</p></li><li><p>Adding registers between two consecutive pipeline stages\u300C\u5728\u4E24\u4E2A\u8FDE\u7EED\u7684\u6D41\u6C34\u7EBF\u9636\u6BB5\u4E4B\u95F4\u6DFB\u52A0\u5BC4\u5B58\u5668\u300D</p></li><li><p>Each time a clock signal arrives, the result of stage-x will be written to the register between stage-x and stage-(x+1)\u300C\u6BCF\u6B21\u65F6\u949F\u4FE1\u53F7\u5230\u8FBE\u65F6\uFF0Cstage-x \u7684\u7ED3\u679C\u5C06\u88AB\u5199\u5165stage-x\u548C stage-\uFF08x + 1\uFF09\u4E4B\u95F4\u7684\u5BC4\u5B58\u5668\u4E2D\u300D</p></li><li><p><strong>Once the result of stage-x is written, the next stage can start execution with the result as its input\u300C\u5199\u5165stage-x\u7684\u7ED3\u679C\u540E\uFF0C\u4E0B\u4E00\u4E2Astage\u53EF\u4EE5\u5F00\u59CB\u6267\u884C\uFF0C\u5E76\u5C06\u7ED3\u679C\u4F5C\u4E3A\u8F93\u5165\u300D</strong></p></li><li><p>Accessing registers introduces extra time delay; the end-to-end latency of finishing a single instruction is increased\u300C\u8BBF\u95EE\u5BC4\u5B58\u5668\u4F1A\u5E26\u6765\u989D\u5916\u7684\u65F6\u95F4\u5EF6\u8FDF\uFF1B\u5B8C\u6210\u4E00\u6761\u6307\u4EE4\u7684\u7AEF\u5230\u7AEF\u5EF6\u8FDF\u589E\u52A0\u4E86\u300D</p></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/54c468a9e7c77.png" alt="image.png" title="image.png"><h5 id="redesign-the-cpu-with-pipeline" tabindex="-1"><a class="header-anchor" href="#redesign-the-cpu-with-pipeline" aria-hidden="true">#</a> Redesign the CPU with pipeline</h5><img src="https://pic.hanjiaming.com.cn/2021/04/06/a6c6c55580000.png" alt="image.png" title="image.png"><h5 id="bad-pipeline-design" tabindex="-1"><a class="header-anchor" href="#bad-pipeline-design" aria-hidden="true">#</a> Bad pipeline design</h5><p>Nonuniform partitioning\u300C\u5206\u533A\u4E0D\u5747\u5300\u300D<br><strong>Latency is determined by the longest stage\u300C\u5EF6\u8FDF\u7531\u6700\u957F\u7684\u9636\u6BB5\u51B3\u5B9A\u300D</strong></p><img src="https://pic.hanjiaming.com.cn/2021/04/06/6780b3fb4bee8.png" alt="image.png" title="image.png"><h6 id="make-the-pipeline-stages-uniform" tabindex="-1"><a class="header-anchor" href="#make-the-pipeline-stages-uniform" aria-hidden="true">#</a> Make the pipeline stages uniform</h6><img src="https://pic.hanjiaming.com.cn/2021/04/06/906da6b8887b9.png" alt="image.png" title="image.png"><ul><li>More stages: deep pipeline</li><li>More stage registers -&gt; more time overhead</li><li>Sometimes, a stage cannot be decomposed\u300C\u5206\u89E3\u7684\u300D</li></ul><h5 id="data-hazard-in-pipelines" tabindex="-1"><a class="header-anchor" href="#data-hazard-in-pipelines" aria-hidden="true">#</a> Data hazard in pipelines</h5><p>Data hazard in pipelines\u300C\u7BA1\u9053\u4E2D\u7684\u6570\u636E\u5371\u5BB3\u300D</p><ul><li>Data dependencies: the results computed by one instruction are used as the data for a following instruction\u300C\u6570\u636E\u4F9D\u5B58\u5173\u7CFB\uFF1A\u4E00\u6761\u6307\u4EE4\u8BA1\u7B97\u7684\u7ED3\u679C\u7528\u4F5C\u4E0B\u4E00\u6761\u6307\u4EE4\u7684\u6570\u636E\u300D</li><li>Data hazard: data dependencies have the potential to cause an erroneous computation by the pipeline\u300C\u6570\u636E\u5371\u5BB3\uFF1A\u6570\u636E\u4F9D\u8D56\u6027\u53EF\u80FD\u4F1A\u5BFC\u81F4\u7BA1\u9053\u8BA1\u7B97\u9519\u8BEF\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/db1bcd3177182.png" alt="image.png" title="image.png"><h6 id="solution-stalling" tabindex="-1"><a class="header-anchor" href="#solution-stalling" aria-hidden="true">#</a> Solution: Stalling</h6><img src="https://pic.hanjiaming.com.cn/2021/04/06/6cbdf7ace4050.png" alt="image.png" title="image.png"><h5 id="other-problems" tabindex="-1"><a class="header-anchor" href="#other-problems" aria-hidden="true">#</a> Other Problems</h5><ul><li>Stalling a pipeline reduces performance\u300C\u505C\u6EDE\u7BA1\u9053\u4F1A\u964D\u4F4E\u6027\u80FD\u300D</li><li>There are other ways to remove the data hazards\u300C\u8FD8\u6709\u5176\u4ED6\u65B9\u6CD5\u53EF\u4EE5\u6D88\u9664\u6570\u636E\u5371\u5BB3\u300D</li><li>There are control hazards, and of course solutions\u300C\u6709\u63A7\u5236\u5371\u9669\uFF0C\u5F53\u7136\u4E5F\u6709\u89E3\u51B3\u529E\u6CD5\u300D</li><li>There are out-of-order pipelines (instruction execution sequence are changed), multi-issue pipelines\u300C\u6709\u4E71\u5E8F\u7BA1\u9053\uFF08\u6307\u4EE4\u6267\u884C\u987A\u5E8F\u5DF2\u66F4\u6539\uFF09\uFF0C\u591A\u53D1\u5E03\u7BA1\u9053\u300D</li><li>\u2026\u2026</li></ul><p>Pipelines are a very important feature to the performance of contemporary powerful CPUs, very complex designs exist\u300C\u7BA1\u9053\u662F\u5F53\u4EE3\u529F\u80FD\u5F3A\u5927\u7684CPUs\u6027\u80FD\u7684\u975E\u5E38\u91CD\u8981\u7684\u7279\u5F81\uFF0C\u5B58\u5728\u975E\u5E38\u590D\u6742\u7684\u8BBE\u8BA1\u300D</p><hr><h2 id="\u8865\u5145\u6750\u6599" tabindex="-1"><a class="header-anchor" href="#\u8865\u5145\u6750\u6599" aria-hidden="true">#</a> \u8865\u5145\u6750\u6599</h2><h3 id="y86-64-instruction-set" tabindex="-1"><a class="header-anchor" href="#y86-64-instruction-set" aria-hidden="true">#</a> Y86-64 instruction set</h3><img src="https://pic.hanjiaming.com.cn/2021/05/13/dfabed4fb112d.png" alt="1620889874072.png" title="1620889874072.png"><h3 id="\u8865\u5145\u4E00\u4E9B\u6307\u4EE4\u7684stage" tabindex="-1"><a class="header-anchor" href="#\u8865\u5145\u4E00\u4E9B\u6307\u4EE4\u7684stage" aria-hidden="true">#</a> \u8865\u5145\u4E00\u4E9B\u6307\u4EE4\u7684stage</h3><h4 id="mrmovq" tabindex="-1"><a class="header-anchor" href="#mrmovq" aria-hidden="true">#</a> mrmovq</h4><img src="https://pic.hanjiaming.com.cn/2021/05/13/64dbe34aa455e.png" alt="1620890018309.png" title="1620890018309.png"><h4 id="jg" tabindex="-1"><a class="header-anchor" href="#jg" aria-hidden="true">#</a> jg</h4><img src="https://pic.hanjiaming.com.cn/2021/05/13/40ea4c2492224.png" alt="1620890069997.png" title="1620890069997.png"><h4 id="cmovle" tabindex="-1"><a class="header-anchor" href="#cmovle" aria-hidden="true">#</a> cmovle</h4><img src="https://pic.hanjiaming.com.cn/2021/05/13/5192d957a02b8.png" alt="1620890163626.png" title="1620890163626.png"><h3 id="x86-x64-\u6307\u4EE4\u957F\u5EA6" tabindex="-1"><a class="header-anchor" href="#x86-x64-\u6307\u4EE4\u957F\u5EA6" aria-hidden="true">#</a> x86/x64 \u6307\u4EE4\u957F\u5EA6</h3><p>AMD manual Vol3 \u7B2C 1.1 Instruction Byte Brder \u8282\u4E2D\u660E\u786E\u5730\u8BF4\uFF1AAn instruction can be between one and 15 bytes in length.</p><h3 id="\u505A\u9898\u7B14\u8BB0" tabindex="-1"><a class="header-anchor" href="#\u505A\u9898\u7B14\u8BB0" aria-hidden="true">#</a> \u505A\u9898\u7B14\u8BB0</h3><ol><li>\u5BF9\u4E8E\u6BCF\u4E2A\u6307\u4EE4\uFF0C\u90FD\u6709\u6267\u884CDecode\u3001Write back\u3001Memory \u8FD9\u51E0\u4E2A\u8FC7\u7A0B\u3002le xxx \u6307\u4EE4\u53EA\u6709\u8FD9\u4E09\u4E2A\u8FC7\u7A0B</li></ol><h2 id="\u5F15\u7528\u6750\u6599" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u6750\u6599" aria-hidden="true">#</a> \u5F15\u7528\u6750\u6599</h2><ul><li>https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B</li><li>https://blog.csdn.net/sunshine1314/article/details/2309655</li><li>AMD manual Vol3</li><li>COMP1411 @ PolyU&#39;s PowerPoint</li></ul>',117);function Ue(qe,Le){const t=s("ExternalLinkIcon");return o(),h(c,null,[d,i("blockquote",null,[i("p",null,[p,g,m,u,_,f,i("a",b,[x,a(t)]),w,i("a",k,[E,a(t)]),A,i("a",B,[y,a(t)]),j,i("a",I,[z,a(t)]),v,i("a",C,[S,a(t)]),D,i("a",P,[F,a(t)]),M,i("a",U,[q,a(t)]),L,i("a",T,[O,a(t)]),R,i("a",W,[H,a(t)]),N,i("a",V,[Y,a(t)]),X,i("a",G,[Z,a(t)]),J]),i("p",null,[K,i("a",Q,[$,a(t)]),ee,i("a",ie,[te,a(t)]),ae,i("a",ne,[re,a(t)]),se,i("a",oe,[he,a(t)]),ce,i("a",le,[de,a(t)]),pe,i("a",ge,[me,a(t)])]),i("p",null,[ue,i("a",_e,[fe,a(t)]),be,i("a",xe,[we,a(t)]),ke,i("a",Ee,[Ae,a(t)]),Be,i("a",ye,[je,a(t)]),Ie,i("a",ze,[ve,a(t)]),Ce,i("a",Se,[De,a(t)]),Pe]),Fe]),Me],64)}var Oe=r(l,[["render",Ue]]);export{Oe as default};
