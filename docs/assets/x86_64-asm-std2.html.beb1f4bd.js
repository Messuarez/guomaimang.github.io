import{_ as t,f as e}from"./app.23db12da.js";const i={},a=e('<h1 id="x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78402" tabindex="-1"><a class="header-anchor" href="#x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78402" aria-hidden="true">#</a> x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78402</h1><h2 id="processor-states-x86-64-partial" tabindex="-1"><a class="header-anchor" href="#processor-states-x86-64-partial" aria-hidden="true">#</a> Processor states (x86-64, partial)</h2><p>Information about currently executing program\u300C\u6709\u5173\u5F53\u524D\u6267\u884C\u7A0B\u5E8F\u7684\u4FE1\u606F\u300D</p><ul><li>Temporary data\uFF1A( %rax, \u2026 )</li><li>Location of runtime stack\uFF1A( %rsp )</li><li>Location of current code control point\u300CLocation of current code control point\u300D\uFF1A( %rip, \u2026 )</li><li>Status of recent tests\u300CStatus of recent tests\u300D\uFF1A( CF, ZF, SF, OF )</li></ul><p>\u8FD9\u4E9B\u4FE1\u606F\u653E\u5728\u5BC4\u5B58\u5668\u5185</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/fb773836663b0.png" alt="image.png" title="image.png"><h2 id="condition-codes" tabindex="-1"><a class="header-anchor" href="#condition-codes" aria-hidden="true">#</a> Condition codes</h2><h3 id="single-bit-registers" tabindex="-1"><a class="header-anchor" href="#single-bit-registers" aria-hidden="true">#</a> Single bit registers</h3><p>\u6761\u4EF6\u7801\u957F 1bit\uFF0C\u7F6E\u653E\u5728\u4E09\u4E2A\u5BC4\u5B58\u5668\u4E2D\u3002</p><ul><li>CF Carry Flag (for unsigned)</li><li>SF Sign Flag (for signed)</li><li>ZF Zero Flag</li><li>OF Overflow Flag (for signed)</li></ul><h3 id="implicitly-set-as-side-effect-by-arithmetic-operations" tabindex="-1"><a class="header-anchor" href="#implicitly-set-as-side-effect-by-arithmetic-operations" aria-hidden="true">#</a> Implicitly set (as side effect) by arithmetic operations</h3><p>\u300C\u901A\u8FC7\u7B97\u672F\u8FD0\u7B97\u9690\u5F0F\u8BBE\u7F6E\uFF08\u4F5C\u4E3A\u526F\u4F5C\u7528\uFF09\u300D</p><p>Example: addq Src,Dest \u2194 t = a+b</p><ul><li>CF set if carry out from most significant bit (unsigned overflow)</li><li>ZF set if t == 0</li><li>SF set if t &lt; 0 (as signed)</li><li>OF set if two\u2019s-complement (signed) overflow <ul><li>a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</li></ul></li></ul><p>Note: leaq does not alter any condition codes</p><p>\u6CE8\uFF1A\u50CFadd\u3001sub\u3001xor\u8FD9\u6837\u7684\u7B97\u6570\u6307\u4EE4\u6216\u8005\u4E8C\u8FDB\u5236\u8BA1\u7B97\u6307\u4EE4\u90FD\u4F1A\u901A\u8FC7\u9690\u5F0F\u8BBE\u7F6E\u6539\u53D8condition code</p><h3 id="explicit-setting-by-compare-instruction" tabindex="-1"><a class="header-anchor" href="#explicit-setting-by-compare-instruction" aria-hidden="true">#</a> Explicit Setting by Compare Instruction</h3><p>cmpl/cmpq Src, Dest</p><p>cmpl b,a like computing a-b without setting destination, but no actual subtraction is really conducted, i.e., the value of dest is not changed</p><ul><li>CF set if carry out from most significant bit (unsigned overflow)</li><li>ZF set if t == 0</li><li>SF set if t &lt; 0 (as signed)</li><li>OF set if two\u2019s-complement (signed) overflow <ul><li>a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</li></ul></li></ul><h3 id="explicit-setting-by-test-instruction" tabindex="-1"><a class="header-anchor" href="#explicit-setting-by-test-instruction" aria-hidden="true">#</a> Explicit Setting by Test instruction</h3><p>testl/testq Src, Dest</p><p>testl b,a like computing a&amp;b without setting Dest with the computing result</p><ul><li><p>Sets condition codes based on value of Src &amp; Dest</p></li><li><p>Useful to have one of the operands be a mask\u300C\u63A9\u7801\u300D</p></li><li><p>ZF set when a&amp;b == 0</p></li><li><p>SF set when a&amp;b &lt; 0</p></li></ul><h3 id="reading-condition-codes" tabindex="-1"><a class="header-anchor" href="#reading-condition-codes" aria-hidden="true">#</a> Reading condition codes</h3><h4 id="setx-instructions" tabindex="-1"><a class="header-anchor" href="#setx-instructions" aria-hidden="true">#</a> SetX Instructions</h4><p>Set single byte based on combinations of condition codes</p><table><thead><tr><th>SetX</th><th>Condition</th><th>Description</th></tr></thead><tbody><tr><td>sete</td><td>ZF</td><td>Equal / Zero</td></tr><tr><td>setne</td><td>~ZF</td><td>Not Equal / Not Zero</td></tr><tr><td>sets</td><td>SF</td><td>Negative</td></tr><tr><td>setns</td><td>~SF</td><td>Nonnegative</td></tr><tr><td>setg</td><td><sub>(SF^OF)&amp;</sub>ZF</td><td>Greater (Signed)</td></tr><tr><td>setge</td><td>~(SF^OF)</td><td>Greater or Equal (Signed)</td></tr><tr><td>setl</td><td>(SF^OF)</td><td>Less (Signed)</td></tr><tr><td>setle</td><td>(SF^OF)|ZF</td><td>Less or Equal (Signed)</td></tr><tr><td>seta</td><td><sub>CF&amp;</sub>ZF</td><td>Above (unsigned)</td></tr><tr><td>setb</td><td>CF</td><td>Below (unsigned)</td></tr></tbody></table><p>\u6279\u6CE8\uFF1A\u4E00\u822C\u4E3A setX reg;\u5982\u679Ccondition\u6210\u7ACB\uFF0Creg\u5C06\u53D8\u62101\uFF0C\u53CD\u4E4B\u5219\u4E3A0\uFF1B</p><p>SetX Instructions: Set single byte to (0 or 1) based on combination of condition codes\u300C\u6839\u636E\u6761\u4EF6\u4EE3\u7801\u7684\u7EC4\u5408\u5C06\u5355\u5B57\u8282\u8BBE\u7F6E\u4E3A\uFF080\u62161\uFF09\u300D</p><p>addressable byte registers or memory\u300C\u53EF\u5BFB\u5740\u5B57\u8282\u5BC4\u5B58\u5668\u6216\u5B58\u50A8\u5668\u300D</p><ul><li>Does not alter remaining 3 bytes</li><li>Typically use movzbl to finish job</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/e6653cab0b018.png" alt="image.png" title="image.png"><h2 id="conditional-branches" tabindex="-1"><a class="header-anchor" href="#conditional-branches" aria-hidden="true">#</a> Conditional branches</h2><h3 id="jump-instructions" tabindex="-1"><a class="header-anchor" href="#jump-instructions" aria-hidden="true">#</a> Jump instructions</h3><p>Jump instructions \u2013 change the control flow</p><h4 id="jx-instructions" tabindex="-1"><a class="header-anchor" href="#jx-instructions" aria-hidden="true">#</a> jX instructions</h4><ul><li>Change the instruction sequence by jumping to a target address either specified by absolution address or by a value in some register or memory</li><li>Unconditional (jmp) and conditional (jX other than jmp)</li></ul><table><thead><tr><th>jX</th><th>Condition</th><th>Description</th><th>cmp a, b</th></tr></thead><tbody><tr><td>jmp</td><td>1</td><td>Unconditional</td><td>---</td></tr><tr><td>je</td><td>ZF</td><td>Equal / Zero</td><td>b == a</td></tr><tr><td>jne</td><td>~ZF</td><td>Not Equal / Not Zero</td><td>b != a</td></tr><tr><td>js</td><td>SF</td><td>Negative</td><td>b &lt; a</td></tr><tr><td>jns</td><td>~SF</td><td>Nonnegative</td><td>b &gt;= a</td></tr><tr><td>jg</td><td><sub>(SF^OF)&amp;</sub>ZF</td><td>Greater (Signed)</td><td>b &gt; a</td></tr><tr><td>jge</td><td>~(SF^OF)</td><td>Greater or Equal (Signed)</td><td>b &gt;= a</td></tr><tr><td>jl</td><td>(SF^OF)</td><td>Less (Signed)</td><td>b &lt; a</td></tr><tr><td>jle</td><td>(SF^OF)|ZF</td><td>Less or Equal (Signed)</td><td>b &lt;= a</td></tr><tr><td>ja</td><td><sub>CF&amp;</sub>ZF</td><td>Above (unsigned)</td><td>b &gt; a</td></tr><tr><td>jb</td><td>CF</td><td>Below (unsigned)</td><td>b &lt; a</td></tr></tbody></table><p>\u6CE8\uFF1A\u5373condition\u6210\u7ACB\u7684\u65F6\u5019\uFF0C\u5C06\u4F1A\u6267\u884C\u8DF3\u8F6C\uFF0C\u5426\u5219\u5C06\u4E0D\u6267\u884C\u3002</p><h4 id="implementing" tabindex="-1"><a class="header-anchor" href="#implementing" aria-hidden="true">#</a> Implementing</h4><p>Implementing conditional branches with jX</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/7c97bcd7db07b.png" alt="image.png" title="image.png"><h4 id="goto" tabindex="-1"><a class="header-anchor" href="#goto" aria-hidden="true">#</a> goto</h4><ul><li>We use the C goto statement to illustrate the control flow of jump in a more readable way</li><li>Try to avoid using goto when you are doing C programming</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/188662bcd7dcc.png" alt="image.png" title="image.png"><h5 id="general-form-of-expressing-if-then-else" tabindex="-1"><a class="header-anchor" href="#general-form-of-expressing-if-then-else" aria-hidden="true">#</a> General form of expressing if-then-else</h5><img src="https://pic.hanjiaming.com.cn/2021/04/06/0ed20c682dfba.png" alt="image.png" title="image.png" width="240px"><h2 id="conditional-moves" tabindex="-1"><a class="header-anchor" href="#conditional-moves" aria-hidden="true">#</a> Conditional moves</h2><img src="https://pic.hanjiaming.com.cn/2021/04/06/eb331ce2afde3.png" alt="image.png" title="image.png"><p>Why using conditional moves?</p><p>Modern processors use pipelines to execute a sequence of instructions\u300C\u73B0\u4EE3\u5904\u7406\u5668\u4F7F\u7528\u6D41\u6C34\u7EBF\u6267\u884C\u4E00\u7CFB\u5217\u6307\u4EE4\u300D</p><p>Branching operation may cause the pipeline to stall\u300CBranching operation \u53EF\u80FD\u4F1A\u5BFC\u81F4\u7BA1\u9053\u505C\u987F\u300D</p><p>As a result, executing both branches will be faster then \u201Ctest and jump\u201D</p><h3 id="conditional-branches-by-conditional-moves" tabindex="-1"><a class="header-anchor" href="#conditional-branches-by-conditional-moves" aria-hidden="true">#</a> Conditional branches by conditional moves</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/8687f4ff69e98.png" alt="image.png" title="image.png"><h2 id="implementation-of-some-statements" tabindex="-1"><a class="header-anchor" href="#implementation-of-some-statements" aria-hidden="true">#</a> Implementation of some statements</h2><h3 id="do-while-loop" tabindex="-1"><a class="header-anchor" href="#do-while-loop" aria-hidden="true">#</a> do-while loop</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/39f7c5eeb5632.png" alt="image.png" title="image.png"><h3 id="while-loop" tabindex="-1"><a class="header-anchor" href="#while-loop" aria-hidden="true">#</a> while loop</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/9d7a8d8c1e5e5.png" alt="image.png" title="image.png"><h3 id="for-loop" tabindex="-1"><a class="header-anchor" href="#for-loop" aria-hidden="true">#</a> for loop</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/f8e82c5b5bd6d.png" alt="image.png" title="image.png"><h3 id="switch-statement" tabindex="-1"><a class="header-anchor" href="#switch-statement" aria-hidden="true">#</a> switch statement</h3><img src="https://pic.hanjiaming.com.cn/2021/04/06/8ce3ba0b8a808.png" alt="image.png" title="image.png"><p>*8 \u7684\u539F\u56E0\u662F \u6807\u7B7E \u662F 64bit \u957F \u7684\u5730\u5740\uFF0C\u800C\u4E14\u6807\u7B7E\u662F\u76F8\u90BB\u7684\u3002</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/0314eac9cd251.png" alt="image.png" title="image.png"><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>COMP1411@Polyu PowerPoint</li></ul>',69);function n(d,o){return a}var s=t(i,[["render",n]]);export{s as default};
