import{_ as n,f as s}from"./app.bbbf835d.js";const a={},p=s(`<h1 id="cpp\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u5165\u95E8" tabindex="-1"><a class="header-anchor" href="#cpp\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u5165\u95E8" aria-hidden="true">#</a> CPP\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u5165\u95E8</h1><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><p>Allow programmers to create a container for a collection of data items (variables) which can be different types.\u300C\u5141\u8BB8\u7A0B\u5E8F\u5458\u4E3A\u53EF\u80FD\u662F\u4E0D\u540C\u7C7B\u578B\u7684\u6570\u636E\u9879\uFF08\u53D8\u91CF\uFF09\u7684\u96C6\u5408\u521B\u5EFA\u4E00\u4E2A\u5BB9\u5668\u3002\u300D</p><p>Such container is regarded as a new data type.\u300C\u8FD9\u6837\u7684\u5BB9\u5668\u88AB\u89C6\u4E3A\u4E00\u79CD\u65B0\u7684\u6570\u636E\u7C7B\u578B\u3002\u300D</p><p>The definition of a structure is a blueprint\u300C\u84DD\u56FE\u300D of what variables the structure should contain.\u300C\u7ED3\u6784\u7684\u5B9A\u4E49\u662F\u8BE5\u7ED3\u6784\u5E94\u5305\u542B\u54EA\u4E9B\u53D8\u91CF\u7684\u84DD\u56FE\u3002\u300D</p><p><strong>Struct \u7684\u5B9E\u8D28\u662F\u201C\u5BB9\u5668\u201D\u3002\u53EF\u4EE5\u770B\u505A\u4E00\u4E2A\u7C7B\u578B\u3002\u6BCF\u4E2A\u8FD9\u79CD\u7C7B\u578B\u7684\u201C\u76D2\u5B50\u201D\u91CC\u9762\u53EF\u4EE5\u5305\u542B\u5F88\u591A\u53D8\u91CF\u3002</strong></p><h3 id="defined" tabindex="-1"><a class="header-anchor" href="#defined" aria-hidden="true">#</a> Defined</h3><p>To define a structure</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">structure_name</span> <span class="token punctuation">{</span>
	data_type variable1<span class="token punctuation">;</span>
	data_type variable2<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>To declare the structure (or create a variable of it)</p><p><code>structure_name variable_name;</code></p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
	<span class="token keyword">double</span> x<span class="token punctuation">;</span>
	<span class="token keyword">double</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>We can group the coordinates x and y into a structure called Point\u300C\u6211\u4EEC\u53EF\u4EE5\u5C06\u5750\u6807x\u548Cy\u5206\u7EC4\u4E3A\u4E00\u4E2A\u79F0\u4E3APoint\u7684\u7ED3\u6784\u300D</p><ul><li><p>To create a Point variable</p><ul><li><code>Point p1;</code></li><li><code>Point sunset;</code></li><li><code>Point arrayOfTimes[5];</code></li><li><code>Point *pointerToTime;</code></li></ul></li><li><p>To assign a value to x of p1\uFF1A<code>p1.x = 10;</code></p></li><li><p>To assign a value to y of p1\uFF1A<code>p1.y = 20;</code></p></li><li><p>To use the variable</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> num <span class="token operator">=</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// assign the value to another variable</span>

cout <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// print p1.x out</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/04/67f97e3f1a479.png" alt="image.png" title="image.png"><h4 id="\u5B9E\u4F8B\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u4F8B\u5E94\u7528" aria-hidden="true">#</a> \u5B9E\u4F8B\u5E94\u7528</h4><p>The following program computes the area of a triangle. It first reads in 3 pairs of coordinates x and y and then computes and displays the area of triangle.\u300C\u4EE5\u4E0B\u7A0B\u5E8F\u8BA1\u7B97\u4E09\u89D2\u5F62\u7684\u9762\u79EF\u3002\u5B83\u9996\u5148\u8BFB\u53D63\u5BF9\u5750\u6807x\u548Cy\uFF0C\u7136\u540E\u8BA1\u7B97\u5E76\u663E\u793A\u4E09\u89D2\u5F62\u7684\u9762\u79EF\u3002\u300D</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> <span class="token comment">// Define a point structure</span>
	<span class="token keyword">double</span> x<span class="token punctuation">;</span>
	<span class="token keyword">double</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Point p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">;</span>

  <span class="token comment">// Ask for inputs</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the first x coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the first y coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the second x coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the second y coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the third x coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p3<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter the third y coordinate: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> p3<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  
  <span class="token comment">// Calculate and display the area</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The area is &quot;</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>y <span class="token operator">-</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x <span class="token operator">-</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>x <span class="token operator">-</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/04/abb3d9e874227.png" alt="image.png" title="image.png"><h3 id="comparison-relational-operators" tabindex="-1"><a class="header-anchor" href="#comparison-relational-operators" aria-hidden="true">#</a> Comparison (relational operators)</h3><p>To compare <em>struct</em>, you compare them member-wise</p><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/04/5585f66cc4e57.png" alt="image.png" title="image.png"><h3 id="array-structure" tabindex="-1"><a class="header-anchor" href="#array-structure" aria-hidden="true">#</a> Array Structure</h3><p>\u6211\u4EEC\u53EF\u4EE5\u521B\u5EFA\u4E00\u4E2A Struct \u7C7B\u578B\u7684\u6570\u7EC4\uFF0C\u6BD4\u5982</p><p>To declare an array of Point with a size of 3 and assign values to each set of x and y:\u300C\u8981\u58F0\u660E\u4E00\u4E2A\u5927\u5C0F\u4E3A3\u7684Point\u6570\u7EC4\uFF0C\u5E76\u4E3A\u6BCF\u7EC4x\u548Cy\u8D4B\u503C\uFF1A\u300D</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Point p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><p>bank.cpp</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">BankAccount</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> accountNo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> balance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">BankCustomer</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
  <span class="token keyword">char</span> address<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  BankAccount accounts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span>BankCustomer<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> BankCustomer<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
  BankCustomer bc<span class="token punctuation">;</span>
  
  <span class="token comment">// initialize the bank customer values</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;Dennis Liu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token char">&#39;M&#39;</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token string">&quot;PQ730, Mong Man Wai Building, PolyU&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Before deposit:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">deposit</span><span class="token punctuation">(</span>bc<span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;After deposit:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span>BankCustomer <span class="token operator">&amp;</span>bc<span class="token punctuation">,</span> <span class="token keyword">int</span> depositAcc<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">==</span> depositAcc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> BankCustomer <span class="token operator">&amp;</span>bc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Age: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Gender: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>gender <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Address: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>address <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Account No: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>accountNo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; || Balance: &quot;</span> <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>balance <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/04/c1fc464e49e02.png" alt="image.png" title="image.png"><h3 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> Call</h3><p>Call-by-value in function by default</p><p>To avoid overhead of copying the whole structure (may contain a lot of member variables and structures), we should use call-by-reference instead\u300C\u4E3A\u4E86\u907F\u514D\u590D\u5236\u6574\u4E2A\u7ED3\u6784\uFF08\u53EF\u80FD\u5305\u542B\u5F88\u591A\u6210\u5458\u53D8\u91CF\u548C\u7ED3\u6784\uFF09\u7684\u5F00\u9500\uFF0C\u6211\u4EEC\u5E94\u8BE5\u4F7F\u7528call-by-reference\u4EE3\u66FF\u300D</p><h4 id="\u4F7F\u7528\u6307\u9488\u8BBF\u95EE" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u6307\u9488\u8BBF\u95EE" aria-hidden="true">#</a> \u4F7F\u7528\u6307\u9488\u8BBF\u95EE</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Point dot<span class="token punctuation">;</span>
dot<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>
dot<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">15</span>
Point<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>dot

cout <span class="token operator">&lt;&lt;</span> dot<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA 10</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA 15 (\u52A0\u62EC\u53F7\u7684\u539F\u56E0\u662F .\u7684\u4F18\u5148\u7EA7\u5927\u4E8E *)</span>
cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">-&gt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u6CE8\u610F\uFF1A\u4E0D\u53EF\u4EE5\u76F4\u63A5 \u8F93\u51FA dot \u6216\u8005 *ptr ,\u56E0\u4E3A\u5B83\u662F\u4E00\u4E2A\u201C\u653E\u7F6E\u53D8\u91CF\u7684\u5BB9\u5668\u201D\u3002</p><p>\u6CE8\u610F\uFF1A\u53EA\u6709\u6307\u9488\u53D8\u91CF\u624D\u80FD\u4F7F\u7528 - &gt; \u8FD0\u7B97\u7B26\u3002</p><h2 id="object-oriented-programming" tabindex="-1"><a class="header-anchor" href="#object-oriented-programming" aria-hidden="true">#</a> Object-oriented Programming</h2><p>Object-oriented Programming\uFF08OOP\uFF09\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B</p><p>To understand the concept of object-oriented programming, we must differentiate the following two terms\u300C\u8981\u7406\u89E3\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u7684\u6982\u5FF5\uFF0C\u6211\u4EEC\u5FC5\u987B\u533A\u5206\u4EE5\u4E0B\u4E24\u4E2A\u672F\u8BED\u300D</p><ul><li>Class\u300C\u7C7B\u300D</li><li>Object\u300C\u5BF9\u8C61\u300D</li><li>method / Member Functions\u300C\u65B9\u6CD5/\u6210\u5458\u51FD\u6570\u300D</li><li>property / Data Members\u300C\u5C5E\u6027/ \u6570\u636E\u6210\u5458\u300D</li></ul><p>\u6CE8\uFF1A\u4E3E\u4E2A\u4F8B\u5B50\uFF0Cint\u662F\u4E00\u4E2A\u7C7B\uFF08\u6574\u6570\u7C7B\uFF09;<code>int x</code>\uFF0Cx\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u662Fint\u7C7B\u7684\u4E00\u4E2A\u5BF9\u8C61\u3002\u518D\u4E3E\u4E2A\u4F8B\u5B50\uFF1APoint \u662F\u4E00\u4E2A\u7C7B\uFF0C<code>Point y</code>, y\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u662FPoint\u7C7B\u7684\u4E00\u4E2A\u5BF9\u8C61\u3002</p><p>\u6CE8\u610F\uFF1AC++ \u91CC\u9762\u6CA1\u6709 method \u3001property \u8FD9\u4E00\u8BF4\u6CD5\uFF0C\u53EA\u6709 Member Functions \u3001Data Members \u8FD9\u4E00\u8BF4\u6CD5\u3002\u8BF4\u9519\u4E86\u53EF\u80FD\u4F1A\u88AB\u5F53\u6210\u5916\u884C\u4EBA\u3002</p><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><p>a framework/template/blueprint/definition of an entity</p><p>For example: Human</p><p>A normal Human has the following properties:</p><ul><li>Eye</li><li>Ear</li><li>Mouth</li><li>Nose</li></ul><p>In C++ terminology, the above are the attributes/data members possessed by a Human\u300C\u5728C ++\u672F\u8BED\u4E2D\uFF0C\u4EE5\u4E0A\u662F\u4EBA\u7C7B\u6240\u62E5\u6709\u7684\u5C5E\u6027/\u6570\u636E\u6210\u5458\u300D</p><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p>An actal entity of a class\u300C\u7C7B\u7684\u5B9E\u9645\u5B9E\u4F53\u300D</p><p>Mary is a Human\uFF1A<strong>Mary is an</strong> <strong>object</strong> <strong>of the</strong> <strong>class</strong> <strong>Human</strong></p><p>Mary has</p><ul><li>Eye \u2013 Beautiful</li><li>Ear \u2013 Big</li><li>Mouth \u2013 Small</li><li>Nose \u2013 Hawk-liked</li></ul><p>The green adjectives are the \u201Cvalues\u201D of the attributes</p><p>In C++ terminology, an object is an <strong>instance</strong> of a class</p><p>Besides Mary, Peter is also a Human</p><p>Peter may have different \u201Cvalues\u201D from Mary</p><ul><li>Eye \u2013 Single-edged</li><li>Ear \u2013 Long</li><li>Mouth \u2013 Big</li><li>Nose \u2013 Flat</li></ul><p>Mary is an object of Human</p><p>Peter is another object of Human</p><h3 id="understand" tabindex="-1"><a class="header-anchor" href="#understand" aria-hidden="true">#</a> Understand</h3><p>\u6211\u4EEC\u901A\u8FC7\u4EE5\u4E0B\u4F8B\u5B50\u6765\u7406\u89E3OOP</p><p>We rewrite the structure Time in the previous example using the approach of writing a class Time</p><p>Time.h: Header file\u2014\u2014So the file extension is .h</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Time <span class="token punctuation">{</span>
  
  public<span class="token operator">:</span>
    <span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// constructor 1</span>
    <span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// constructor 2</span>
    <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set hour,minute,second</span>
    <span class="token keyword">void</span> <span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// print universal-time format</span>
    <span class="token keyword">void</span> <span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// print standard-time format</span>

  private<span class="token operator">:</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span> <span class="token comment">// 0 - 23 (24-hour clock format)</span>
    <span class="token keyword">int</span> minute<span class="token punctuation">;</span> <span class="token comment">// 0 - 59</span>
    <span class="token keyword">int</span> second<span class="token punctuation">;</span> <span class="token comment">// 0 - 59</span>
  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>Contain the declaration of the class: Like the concept of prototype</li><li>No <strong>main()</strong> function</li><li>The file is not executable</li><li>To be included in other source files <code>#include &quot;Time.h&quot;</code> (\u6CE8\u610F\u4E0D\u662F&lt; &gt;)</li></ul><p>\u6CE8\u610F\uFF1Aclass \u4E2D\u7684\u51FD\u6570\u662F\u65E0\u987A\u5E8F\u7684\uFF0Cclass\u4E2D\u7684\u51FD\u6570\u4E0D\u9700\u8981\u6309\u5FAA\u5E8F\u6267\u884C\uFF0C\u53EA\u662F\u6309\u9700\u8C03\u7528\u3002</p><h4 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> Constructor</h4><p><code>Time()</code></p><ul><li><strong>Same name as the class name</strong>\uFF08\u5982\u679C\u8981\u521B\u5EFA Constructor \u53EA\u9700\u8BA9\u5176\u540D\u79F0\u548C \u7C7B\u7684\u540D\u79F0\u76F8\u540C\u5373\u53EF)</li><li>Called once only when an object is created: Will not be called again after object creation\u300C\u4EC5\u5728\u521B\u5EFA\u5BF9\u8C61\u65F6\u8C03\u7528\u4E00\u6B21\uFF1A\u521B\u5EFA\u5BF9\u8C61\u540E\u5C06\u4E0D\u4F1A\u518D\u6B21\u8C03\u7528\u300D</li><li>Mainly used for initializing data members of the class</li><li>A class may have a number of constructors, with different input arguments\u300C\u4E00\u4E2A\u7C7B\u53EF\u80FD\u5177\u6709\u8BB8\u591A\u6784\u9020\u51FD\u6570\uFF0C\u5E76\u4E14\u5177\u6709\u4E0D\u540C\u7684\u8F93\u5165\u53C2\u6570\u300D</li><li>No return type</li></ul><p>\u5728source file\u91CC\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\u4F7F\u7528 Constructor</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Time solt1<span class="token punctuation">;</span> <span class="token comment">//\u65E0\u53C2\u6570\uFF0C\u5339\u914D\u5230 constructor 1</span>
Time <span class="token function">solt2</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5339\u914D\u5230 constructor 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>constructor \u6CA1\u6709return</p><h4 id="member-functions" tabindex="-1"><a class="header-anchor" href="#member-functions" aria-hidden="true">#</a> Member Functions</h4><p>Member Functions \u4E5F\u53EB method\u3002</p><p>\u8C03\u7528\u65B9\u5F0F\uFF1AClassName.FunctionName()</p><p>\u5728\u4E0A\u8FF0\u7684\u4F8B\u5B50\u91CC\uFF0C\u4EE5\u4E0B\u662F\u7C7B\u7684\u65B9\u6CD5</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Member function \u8FD8\u80FD \u88AB\u5B9A\u4E49\u5728 class\u5916</p><p><strong>Binary scope resolution operator ( :: )</strong></p><ul><li>\u201CTies\u201D member name to class name \u300C\u5C06\u6210\u5458\u540D\u79F0\u4E0E\u73ED\u7EA7\u540D\u79F0\u8054\u7CFB\u8D77\u6765\u300D</li><li>Uniquely identify functions of particular class</li><li>Different classes can have member functions with same name \u300C\u4E0D\u540C\u7684\u7C7B\u53EF\u4EE5\u5177\u6709\u76F8\u540C\u540D\u79F0\u7684 Member function\u300D</li></ul><p>Format for defining member functions\u300C\u5B9A\u4E49\u6210\u5458\u51FD\u6570\u7684\u683C\u5F0F\u300D\u5982\u4E0B</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>ReturnType ClassName<span class="token operator">::</span><span class="token function">MemberFunctionName</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
  \u2026 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6279\u6CE8\uFF1A\u5373\u6211\u4EEC\u53EF\u4EE5\u5B9E\u73B0\u5728class\u7684\u62EC\u53F7\u5185\u58F0\u660E\u65B9\u6CD5\uFF0C\u5728class\u7684\u62EC\u53F7\u5916\u5B9A\u4E49\u65B9\u6CD5\u3002\u5F53\u7136\u6CA1\u6709\u58F0\u660E\u548C\u5B9A\u4E49\u5728\u54EA\u91CC\u6CA1\u6709\u4EFB\u4F55\u9650\u5236\u3002\u800C\u4E14\u5373\u4F7F\u65B9\u6CD5\u5B9A\u4E49\u5728class\u7684\u5927\u62EC\u53F7\u5916\u9762\uFF0C\u65B9\u6CD5\u53EF\u4EE5\u76F4\u63A5\u8C03\u7528class\u4E2D\u5B9A\u4E49\u7684\u5C5E\u6027\u548C\u65B9\u6CD5\u3002\u6CE8\u610F\u4F7F\u7528 ClassName::MemberFunction()\u8868\u793A; Constructor\u4E5F\u53EF\u4EE5\u5728class\u5916\u5B9A\u4E49</p><h4 id="data-members" tabindex="-1"><a class="header-anchor" href="#data-members" aria-hidden="true">#</a> Data Members</h4><p>Data Members \u4E5F\u53EB property.</p><p>\u8C03\u7528\u65B9\u5F0F\uFF1AClassName.MemberName</p><p>\u5728\u4E0A\u8FF0\u7684\u4F8B\u5B50\u91CC\uFF0C\u4EE5\u4E0B\u662F\u7C7B\u7684\u5C5E\u6027</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> hour<span class="token punctuation">;</span>
<span class="token keyword">int</span> minute<span class="token punctuation">;</span>
<span class="token keyword">int</span> second<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Each Time object has its own set of data members: hour, minute and second.\u300C\u6BCF\u4E2ATime\u5BF9\u8C61\u90FD\u6709\u81EA\u5DF1\u7684\u4E00\u7EC4\u6570\u636E\u6210\u5458\uFF1Ahour, minute and second\u300D</p><p>Since these data members are private, they can only be accessible by its member functions \u300C\u7531\u4E8E\u8FD9\u4E9B\u6570\u636E\u6210\u5458\u662F\u79C1\u6709\u7684\uFF0C\u56E0\u6B64\u53EA\u80FD\u901A\u8FC7\u5176\u6210\u5458\u51FD\u6570\u8FDB\u884C\u8BBF\u95EE\u300D</p><p>\u6CE8\u610F\uFF1A\u53EA\u6709 public \u4E0B\u7684 \u5C5E\u6027\u548C\u65B9\u6CD5 \u53EF\u4EE5\u88AB\u5916\u754C\u51FD\u6570\u8BBF\u95EE\uFF1Bprivate\u4E0B\u7684\u5C5E\u6027\u548C\u65B9\u6CD5\u4E0D\u80FD\u88AB\u5916\u754C\u8BBF\u95EE\uFF1Bpublic\u4E0B\u7684\u51FD\u6570\u53EF\u4EE5\u64CD\u4F5Cprivate\u4E0B\u9762\u7684\u5C5E\u6027\u548C\u65B9\u6CD5\u3002\u8BE6\u7EC6\u7684\u5728\u4E4B\u540E\u8BA8\u8BBA\u3002</p><h3 id="invocation" tabindex="-1"><a class="header-anchor" href="#invocation" aria-hidden="true">#</a> Invocation</h3><p>\u5728\u5916\u754C\u53EF\u4EE5\u901A\u8FC7 variableName.method() \u6216\u8005 variableName.property \u8C03\u7528</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>t<span class="token punctuation">.</span>hour
t<span class="token punctuation">.</span><span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="access-specifiers" tabindex="-1"><a class="header-anchor" href="#access-specifiers" aria-hidden="true">#</a> Access Specifiers</h3><p><strong>public:</strong> Accessible by the \u201Coutside world\u201D relative to the class</p><p><strong>private:</strong> Accessible only to <em>constructors</em> and <em>member functions</em> of class</p><p>private data members cannot be accessed (both read and write) by the \u201Coutside world\u201D</p><h3 id="controlling-access-to-members" tabindex="-1"><a class="header-anchor" href="#controlling-access-to-members" aria-hidden="true">#</a> Controlling Access to Members</h3><ul><li>Class member access <ul><li>Explicitly set to private, and public</li><li>Default private without Specifier</li></ul></li><li>struct member access <ul><li>Default public without Specifier</li><li>Explicitly set to private, public, protected</li></ul></li><li>Access to class\u2019s private data <ul><li>Controlled with access member functions <ul><li>Get function (accessor) \u2013 Read private data</li><li>Set function (mutator) \u2013 Modify private data</li></ul></li></ul></li></ul><h3 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> Scope</h3><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/08/73c61fa0e138e.png" alt="image.png" title="image.png"><img src="https://hongshupic.oss-cn-zhangjiakou.aliyuncs.com/2021/04/08/036def0f70473.png" alt="image.png" title="image.png"><h3 id="advantages" tabindex="-1"><a class="header-anchor" href="#advantages" aria-hidden="true">#</a> Advantages</h3><ul><li>Code reuse <ul><li>A collection of classes forms the library as programming utilities</li><li>No \u201Cre-inventing the wheel\u201D</li></ul></li><li>Interfaces <ul><li>Data encapsulation (information hiding) and implementation hiding</li></ul></li></ul><h3 id="\u6CE8\u610F" tabindex="-1"><a class="header-anchor" href="#\u6CE8\u610F" aria-hidden="true">#</a> \u6CE8\u610F</h3><p>Struct \u548C Class \u91CC\u9762\u8981\u5305\u542B\u4EC0\u4E48\u5462</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Entry <span class="token punctuation">{</span>

private<span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    number <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

public<span class="token operator">:</span>
    Entry <span class="token operator">*</span>next <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    Entry <span class="token operator">*</span>prev <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u8FD9\u4E2A\u4F8B\u5B50\uFF0C\u53EF\u4EE5\u770B\u5230\uFF0C\u6709\u4E00\u4E0B\u4E24\u79CD\u8BED\u53E5</p><ul><li>\u51FD\u6570\u7684\u5B9A\u4E49</li><li>\u53D8\u91CF\u7684\u58F0\u660E/\u5B9A\u4E49/\u521D\u59CB\u5316</li></ul><p>\u4F46\u662F\uFF0C\u4E0D\u80FD\u5728 \u6210\u5458\u51FD\u6570\u4EE5\u5916 \u8FDB\u884C\u5199\u9664\u4E86 \u4E0A\u9762\u4E24\u4E2A\u4EE5\u5916 \u7684\u4EFB\u4F55\u8BED\u53E5\uFF1B</p><h2 id="struct-\u548C-class-\u7684\u5BF9\u6BD4" tabindex="-1"><a class="header-anchor" href="#struct-\u548C-class-\u7684\u5BF9\u6BD4" aria-hidden="true">#</a> Struct \u548C Class \u7684\u5BF9\u6BD4</h2><ul><li>Structure <ul><li>Contain data items only</li><li>All data are implicitly public</li><li>Less data integrity control capabilities</li></ul></li><li>Class <ul><li>Contain data members and object behaviours (member functions)</li><li>Hide information using private <ul><li>More data integrity control capabilities</li></ul></li><li>Extensible</li></ul></li></ul><p>\u6279\u6CE8</p><h3 id="\u542B\u4E49\u4E0A" tabindex="-1"><a class="header-anchor" href="#\u542B\u4E49\u4E0A" aria-hidden="true">#</a> \u542B\u4E49\u4E0A</h3><ul><li>struct\u66F4\u9002\u5408\u770B\u6210\u662F\u4E00\u4E2A\u6570\u636E\u7ED3\u6784\u7684\u5B9E\u73B0\u4F53</li><li>class\u66F4\u9002\u5408\u770B\u6210\u662F\u4E00\u4E2A\u5BF9\u8C61\u7684\u5B9E\u73B0\u4F53\u3002</li></ul><h3 id="\u529F\u80FD\u4E0A" tabindex="-1"><a class="header-anchor" href="#\u529F\u80FD\u4E0A" aria-hidden="true">#</a> \u529F\u80FD\u4E0A</h3><ul><li><p>\u76F8\u540C\u70B9\uFF1A\u5B83\u4EEC\u90FD\u53EF\u4EE5\u63D0\u4F9B\u81EA\u5DF1\u7684\u63A5\u53E3\u51FD\u6570\uFF0C\u6784\u9020\u51FD\u6570\u3002</p></li><li><p>struct \u6CA1\u6709 public \u548Cprivate \u4E4B\u5206\uFF0C\u4F46 class \u6709\u3002</p></li><li><p>struct\u6CA1\u6709\u7EE7\u627F\uFF0C\u6CA1\u6709\u5C01\u88C5\uFF0C\u8981\u8BF4\u5C01\u88C5\u53EA\u6709\u521D\u6B65\u5C01\u88C5\u3002</p></li><li><p>struct\u53EA\u80FD\u53EB\u505A\u6570\u636E\u7684\u96C6\u5408\uFF0C\u5916\u90E8\u53EF\u4EE5\u4EFB\u610F\u8BBF\u95EE\u3002</p></li><li><p>\u4E00\u4E2Aclass\u53EF\u4EE5\u7531\u7ED3\u6784\u7EE7\u627F\u800C\u6765\u3002</p></li><li><p>class\u628A\u6570\u636E\uFF0C\u63A5\u53E3\u53EF\u4EE5\u4EE5\u4E09\u79CD\u7C7B\u578B\u5C01\u88C5\uFF0Cprivate\uFF0Cpublic\uFF0Cprotected\uFF1B\u8FD8\u53EF\u4EE5\u7EE7\u627F\u548C\u6D3E\u751F\u3002</p></li><li><p>class\u5C31\u5B8C\u6210\u4E86\u5C01\u88C5\uFF0C\u7EF4\u62A4\u4E86\u6570\u636E\u5B89\u5168\uFF0C\u8FD9\u5C31\u662F\u9762\u5411\u5BF9\u8C61\u7684\u7406\u5FF5</p></li></ul><p>\u6700\u672C\u8D28\u7684\u4E00\u4E2A\u533A\u522B\u5C31\u662F\u9ED8\u8BA4\u7684\u8BBF\u95EE\u63A7\u5236\uFF1A\u9ED8\u8BA4\u7684\u7EE7\u627F\u8BBF\u95EE\u6743\u9650</p><p>struct\u662Fpublic\u7684\uFF0Cclass\u662Fprivate\u7684\u3002</p><h2 id="header-file" tabindex="-1"><a class="header-anchor" href="#header-file" aria-hidden="true">#</a> Header file</h2><p>Head file \u91CC\u9762\u653E\u4EC0\u4E48\uFF1F</p><ul><li>Class definitions and member function prototypes\u300C\u7C7B\u5B9A\u4E49\u548C\u6210\u5458\u51FD\u6570\u539F\u578B\u300D</li></ul><p>\u4F46\u662F\uFF0Chead file \u91CC\u9762\u6210\u5458\u51FD\u6570\u5916\u9762\uFF0C<strong>\u4E0D\u53EF\u4EE5\u5B9A\u4E49\u53D8\u91CF! \u4F46\u53EF\u4EE5\u58F0\u660E\u3002</strong></p><p>Included in each file using class. Eg. <code>#include &quot;Time.h&quot; </code></p><h2 id="\u58F0\u660E\u3001\u5B9A\u4E49\u548C\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u58F0\u660E\u3001\u5B9A\u4E49\u548C\u521D\u59CB\u5316" aria-hidden="true">#</a> \u58F0\u660E\u3001\u5B9A\u4E49\u548C\u521D\u59CB\u5316</h2><ul><li>\u58F0\u660E\uFF1A\u7528\u4E8E\u5411\u7A0B\u5E8F\u8868\u660E\u53D8\u91CF\u7684\u7C7B\u578B\u548C\u540D\u5B57\u3002</li><li>\u5B9A\u4E49\uFF1A\u7528\u4E8E\u4E3A\u53D8\u91CF/\u51FD\u6570\u5206\u914D\u5B58\u50A8\u7A7A\u95F4\uFF0C\u8FD8\u53EF\u4E3A\u53D8\u91CF/\u51FD\u6570\u6307\u5B9A\u521D\u59CB\u503C\u3002\u7A0B\u5E8F\u4E2D\uFF0C\u53D8\u91CF/\u51FD\u6570\u6709\u4E14\u4EC5\u6709\u4E00\u4E2A\u5B9A\u4E49\u3002 <ul><li>\u5B9A\u4E49\uFF0C\u5B9A\u4E49\u7684\u540C\u65F6\u4F1A\u5B8C\u6210\u58F0\u660E\u3002</li></ul></li><li>\u53D8\u91CF\u521D\u59CB\u5316\uFF1A\u58F0\u660E+\u5B9A\u4E49+\u53D8\u91CF\u8D4B\u503C</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>       <span class="token comment">//\u58F0\u660E\uFF0C\u4E0D\u662F\u5B9A\u4E49</span>
<span class="token keyword">int</span> b<span class="token punctuation">;</span>              <span class="token comment">//\u58F0\u660E\uFF0C\u4E5F\u662F\u5B9A\u4E49\uFF0C\u672A\u521D\u59CB\u5316</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//\u58F0\u660E\uFF0C\u4E5F\u662F\u5B9A\u4E49\uFF0C\u4E5F\u521D\u59CB\u5316\u4E86</span>

<span class="token keyword">extern</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u58F0\u660E</span>
<span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u58F0\u660E</span>
<span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">{</span>
  XXX
<span class="token punctuation">}</span>  <span class="token comment">//\u58F0\u660E+\u5B9A\u4E49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="public\u3001protected\u548Cprivate" tabindex="-1"><a class="header-anchor" href="#public\u3001protected\u548Cprivate" aria-hidden="true">#</a> Public\u3001Protected\u548CPrivate</h2><p>Private, Public, Protected\u4E0B\u7684\u8BBF\u95EE\u6027\u4E0D\u540C</p><p>\u8868\u73B0\u5728 \u8BBF\u95EE\u8005\u4E0D\u540C \u3001\u7EE7\u627F\u7279\u70B9\u4E0D\u540C</p><ul><li>Private\uFF1A\u53EA\u80FD\u7531\u8BE5\u7C7B\u4E2D\u7684\u51FD\u6570\u3001\u5176\u53CB\u5143\u51FD\u6570\u8BBF\u95EE\uFF0C<strong>\u5373\u53EA\u5141\u8BB8\u672C\u7C7B\u7684\u6210\u5458\u51FD\u6570\u8BBF\u95EE</strong></li><li>Protected\uFF1A\u53EF\u4EE5\u88AB\u8BE5\u7C7B\u4E2D\u7684\u51FD\u6570\u3001\u5B50\u7C7B\u7684\u51FD\u6570\u3001\u4EE5\u53CA\u5176\u53CB\u5143\u51FD\u6570\u8BBF\u95EE,\u4F46\u4E0D\u80FD\u88AB\u8BE5\u7C7B\u7684\u5BF9\u8C61\u8BBF\u95EE\uFF0C<strong>\u5373\u53EA\u5141\u8BB8\u5B50\u7C7B\u53CA\u672C\u7C7B\u7684\u6210\u5458\u51FD\u6570\u8BBF\u95EE</strong></li><li>Public: \u53EF\u4EE5\u88AB\u8BE5\u7C7B\u4E2D\u7684\u51FD\u6570\u3001\u5B50\u7C7B\u7684\u51FD\u6570\u3001\u5176\u53CB\u5143\u51FD\u6570\u8BBF\u95EE,\u4E5F\u53EF\u4EE5\u7531\u8BE5\u7C7B\u7684\u5BF9\u8C61\u8BBF\u95EE\uFF0C<strong>\u5373\u53EF\u4EE5\u88AB\u4EFB\u610F\u5B9E\u4F53\u8BBF\u95EE</strong></li></ul><p>\u4EC0\u4E48\u53EB\u88AB\u8BE5\u7C7B\u7684\u5BF9\u8C61\u8BBF\u95EE\uFF1Feg. <code>student.id</code></p><p>\u6CE8\uFF1A\u53CB\u5143\u51FD\u6570\u5305\u62EC\u4E24\u79CD\uFF1A\u8BBE\u4E3A\u53CB\u5143\u7684\u5168\u5C40\u51FD\u6570\uFF0C\u8BBE\u4E3A\u53CB\u5143\u7C7B\u4E2D\u7684\u6210\u5458\u51FD\u6570</p><h2 id="c-\u7C7B\u5BF9\u8C61\u5171\u4EAB\u6570\u636E\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#c-\u7C7B\u5BF9\u8C61\u5171\u4EAB\u6570\u636E\u7684\u5B9E\u73B0" aria-hidden="true">#</a> C++\u7C7B\u5BF9\u8C61\u5171\u4EAB\u6570\u636E\u7684\u5B9E\u73B0</h2><h3 id="\u4F7F\u7528\u5C40\u90E8\u53D8\u91CF\u548C\u5168\u5C40\u53D8\u91CF\u5171\u4EAB\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u5C40\u90E8\u53D8\u91CF\u548C\u5168\u5C40\u53D8\u91CF\u5171\u4EAB\u6570\u636E" aria-hidden="true">#</a> \u4F7F\u7528\u5C40\u90E8\u53D8\u91CF\u548C\u5168\u5C40\u53D8\u91CF\u5171\u4EAB\u6570\u636E</h3><p>\u4F7F\u7528\u5C40\u90E8\u53D8\u91CF\u80FD\u591F\u5728\u8C03\u7528\u548C\u88AB\u8C03\u7528\u51FD\u6570\u4E4B\u95EE\u901A\u8FC7\u53C2\u6570\u4F20\u9012\u5B9E\u73B0\u4E0D\u540C\u51FD\u6570\u5757\u4E4B\u95EE\u7684\u6570\u636E\u5171\u4EAB\u3002\u5C40\u90E8\u53D8\u91CF\u5177\u6709\u5C40\u90E8\u4F5C\u7528\u57DF\uFF0C\u80FD\u5F88\u597D\u5730\u5B9E\u73B0\u51FD\u6570\u4E4B\u95F4\u7684\u6570\u636E\u9690\u853D\u3002\u4F46\u5728\u4F20\u9012\u8FC7\u7A0B\u4E2D\u9700\u8981\u5F88\u5927\u7684\u7CFB\u7EDF\u5F00\u9500\uFF0C\u6545\u4E00\u822C\u53EA\u7528\u4E8E\u4F20\u9012\u5C11\u91CF\u7684\u6570\u636E\u3002\u5168\u5C40\u53D8\u91CF\u5177\u6709\u6587\u4EF6\u4F5C\u7528\u57DF\u3002\u5168\u5C40\u53D8\u91CF\u6240\u5B58\u50A8\u7684\u6570\u636E\u5728\u7A0B\u5E8F\u4E2D\u4EFB\u4F55\u5730\u65B9\u90FD\u53EF\u4EE5\u8BBF\u95EE\uFF0C\u80FD\u591F\u5728\u7A0B\u5E8F\u4E2D\u7684\u6240\u6709\u51FD\u6570\u4E4B\u95F4\u5B9E\u73B0\u6570\u636E\u5171\u4EAB\u3002\u4F7F\u7528\u5168\u5C40\u53D8\u91CF\u5B9E\u73B0\u5171\u4EAB\u6570\u636E\u76F8\u5F53\u65B9\u4FBF\uFF0C\u4F46\u5176\u526F\u4F5C\u7528\u4E5F\u76F8\u5F53\u5927\u3002\u56E0\u4E3A\u5168\u5C40\u53D8\u91CF\u65E0\u6CD5\u5BF9\u6570\u636E\u7684\u8BBF\u95EE\u6743\u8FDB\u884C\u6709\u6548\u63A7\u5236\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0C\u6211\u4EEC\u5F88\u96BE\u77E5\u9053\u7A0B\u5E8F\u4E2D\u6570\u636E\u5728\u90A3\u4E9B\u51FD\u6570\u4E2D\u5171\u4EAB\uFF0C\u8FD9\u6837\u4E00\u65E6\u5171\u4EAB\u7684\u6570\u636E\u53D1\u751F\u7ED3\u6784\u6027\u8C03\u6574\uFF0C\u4E5F\u5C31\u5F88\u96BE\u5224\u65AD\u5B83\u5230\u5E95\u5F71\u54CD\u5230\u54EA\u4E9B\u51FD\u6570\uFF0C\u4ECE\u800C\u7ED9\u7A0B\u5E8F\u7EF4\u62A4\u5E26\u6765\u76F8\u5F53\u5927\u7684\u56F0\u96BE\u3002\u8FD9\u79CD\u5171\u4EAB\u65B9\u5F0F\uFF0C\u76F4\u63A5\u5F71\u54CD\u5230\u6570\u636E\u5B89\u5168\u3001\u7A0B\u5E8F\u4EE3\u7801\u91CD\u7528\u548C\u6269\u5145\u3002\u6240\u4EE5\uFF0C\u5728\u7A0B\u5E8F\u8BBE\u8BA1\u4E2D\uFF0C\u5E94\u53EF\u80FD\u5C11\u7684\u4F7F\u7528\u8FD9\u79CD\u5171\u4EAB\u65B9\u5F0F\u3002</p><h3 id="\u901A\u8FC7\u7C7B\u7684\u6570\u636E\u6210\u5458\u5171\u4EAB\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u901A\u8FC7\u7C7B\u7684\u6570\u636E\u6210\u5458\u5171\u4EAB\u6570\u636E" aria-hidden="true">#</a> \u901A\u8FC7\u7C7B\u7684\u6570\u636E\u6210\u5458\u5171\u4EAB\u6570\u636E</h3><p>C++\u4E2D\u7C7B\u5185\u90E8\u5C01\u88C5\u7684\u6570\u636E\u6210\u5458\u63D0\u4F9B\u4E86\u540C\u4E00\u7C7B\u7684\u51FD\u6570\u6210\u5458\u4E4B\u95F4\u8FDB\u884C\u6570\u636E\u5171\u4EAB\u673A\u5236\u3002\u8FD9\u79CD\u5171\u4EAB\u65B9\u5F0F\u4E00\u65B9\u9762\u5B9E\u73B0\u4E86\u7C7B\u5185\u90E8\u51FD\u6570\u7684\u5168\u9762\u5171\u4EAB\uFF0C\u540C\u65F6\u4E5F\u63D0\u4F9B\u4E86\u901A\u8FC7\u8BBE\u7F6E\u9002\u5F53\u7684\u8BBF\u95EE\u63A7\u5236\u5C5E\u6027\uFF0C\u628A\u5171\u4EAB\u53EA\u9650\u5236\u5728\u7C7B\u7684\u8303\u56F4\u4E4B\u5185\uFF0C\u8FD9\u6837\u5BF9\u7C7B\u5916\u6765\u8BF4\uFF0C\u7C7B\u7684\u6570\u636E\u6210\u5458\u4ECD\u662F\u9690\u85CF\u7684\uFF0C\u8FBE\u5230\u4E86\u5171\u4EAB\u4E0E\u9690\u85CF\u4E24\u5168\uFF0C\u89E3\u51B3\u4E86\u5168\u5C40\u53D8\u91CF\u548C\u5C40\u90E8\u53D8\u91CF\u6240\u65E0\u6CD5\u514B\u670D\u7684\u77DB\u76FE\u3002</p><p>\u4F8B\u5982\uFF1A\u4E00\u4E2A\u65F6\u949F\u7C7B\uFF0C\u8BE5\u7C7B\u4E2D\u5C01\u88C5\u4E86\u79C1\u6709\u6570\u636E\u6210\u5458\u6709Hour\uFF0CMinute\uFF0CSecond\uFF0C\u5728\u7C7B\u7684\u6210\u5458\u51FD\u6570\u4E4B\u95F4\u5B9E\u73B0\u6570\u636E\u5171\u4EAB\u3002\u5728\u7C7B\u7684\u5916\u9762\uFF0C\u5BF9\u5B83\u4EEC\u7684\u8BBF\u95EE\u53EA\u80FD\u901A\u8FC7\u7C7B\u81EA\u8EAB\u63D0\u4F9B\u7684\u5916\u90E8\u63A5\u53E3\u8FDB\u884C\uFF0C\u65E0\u6CD5\u76F4\u63A5\u8BBF\u95EE\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Clock <span class="token comment">//\u65F6\u949F\u7C7B\u7684\u58F0\u660E</span>
<span class="token punctuation">{</span>
public\uFF1A
	<span class="token comment">//\u516C\u6709\u6570\u636E\u6210\u5458\u51FD\u6570</span>
	<span class="token keyword">void</span> <span class="token function">SetTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> NewH <span class="token operator">=</span><span class="token number">0</span>\uFF0C<span class="token keyword">int</span> NewM <span class="token operator">=</span><span class="token number">0</span>\uFF0C<span class="token keyword">int</span> News<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>\uFF1B
	<span class="token keyword">void</span> <span class="token function">ShowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\uFF1B
  
private\uFF1A<span class="token comment">//\u79C1\u6709\u6570\u636E\u6210\u5458</span>
	<span class="token keyword">int</span> Hour\uFF0CMinute\uFF0CSecond\uFF1B<span class="token comment">//\u5728\u7C7B\u7684\u6210\u5458\u51FD\u6570\u4E4B\u95F4\u5171\u4EAB</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="\u901A\u8FC7\u7C7B\u7684\u9759\u6001\u6210\u5458\u5B9E\u73B0\u6570\u636E\u5171\u4EAB" tabindex="-1"><a class="header-anchor" href="#\u901A\u8FC7\u7C7B\u7684\u9759\u6001\u6210\u5458\u5B9E\u73B0\u6570\u636E\u5171\u4EAB" aria-hidden="true">#</a> \u901A\u8FC7\u7C7B\u7684\u9759\u6001\u6210\u5458\u5B9E\u73B0\u6570\u636E\u5171\u4EAB</h3><p>C++\u4E2D\u4F7F\u7528\u9759\u6001\u6210\u5458\u53EF\u4EE5\u5B9E\u73B0\u540C\u4E00\u7C7B\u7684\u4E0D\u540C\u5BF9\u8C61\u4E4B\u95F4\u5171\u4EAB\u6570\u636E j\u3002\u7C7B\u7684\u666E\u901A\u6570\u636E\u6210\u5458\u5728\u7C7B\u7684\u6BCF\u4E00\u4E2A\u5BF9\u8C61\u90FD\u6709\u4E00\u4E2A\u62F7\u8D1D\uFF0C\u5C31\u662F\u8BF4\u6BCF\u4E2A\u5BF9\u8C61\u7684\u540C\u540D\u6570\u636E\u6210\u5458\u53EF\u4EE5\u5206\u522B\u5B58\u50A8\u4E0D\u540C\u6570\u503C\uFF0C\u8FD9\u5C31\u4FDD\u8BC1\u5BF9\u8C61\u62E5\u6709\u81EA\u8EAB\u533A\u522B\u5176\u4ED6\u5BF9\u8C61\u7684\u7279\u5F81\u7684\u9700\u8981\u3002\u9759\u6001\u6570\u636E\u6210\u5458\u662F\u7C7B\u7684\u6570\u636E\u6210\u5458\u7684\u4E00\u79CD\u7279\u4F8B\uFF0C\u91C7\u7528static\u5173\u952E\u5B57\u6765\u58F0\u660E\uFF1B\u6BCF\u4E2A\u7C7B\u53EA\u6709\u4E00\u4E2A\u62F7\u8D1D\uFF0C\u7531\u8BE5\u7C7B\u7684\u6240\u6709\u5BF9\u8C61\u5171\u540C\u7EF4\u62A4\u548C\u4F7F\u7528\uFF0C\u4ECE\u800C\u5B9E\u73B0\u4E86\u540C\u4E00\u7C7B\u7684\u4E0D\u540C\u5BF9\u8C61\u4E4B\u95F4\u7684\u6570\u636E\u5171\u4EAB\u3002</p><p>\u5982\u679C\u60F3\u5B9E\u73B0\u548CPrivate\u7684\u8BBF\u95EE\u8005\u9650\u5236\u76F8\u540C\u7684\u4E14\u53EA\u5C5E\u4E8E\u81EA\u5DF1\u7684\u5C5E\u6027\uFF0C\u8981\u5728Private\u4E0B\u4F7F\u7528 static \u5B9A\u4E49\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

class Entry <span class="token punctuation">{</span>

private<span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    number <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

public<span class="token operator">:</span>
    Entry <span class="token operator">*</span>next <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    Entry <span class="token operator">*</span>prev <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Entry a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>id <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>\u9759\u6001\u6210\u5458\u53D8\u91CF\u786E\u5B9E\u8D77\u5230\u4E86\u5728\u4E0D\u540C\u5BF9\u8C61\u95F4\u5171\u4EAB\u7684\u4F5C\u7528\uFF01\u4E0D\u8FC7\u7531\u4E8E\u5176\u662F\u9759\u6001\u5C5E\u6027\uFF0C\u5185\u5B58\u662F\u5728\u5168\u5C40/\u9759\u6001\u533A\u57DF\u5F00\u8F9F\u7684\uFF0C\u5C5E\u4E8E\u6808\u5185\u5B58\u533A\uFF0C\u5185\u5B58\u5927\u5C0F\u4F7F\u7528\u53D7\u9650\u3002\u5982\u679C\u80FD\u52A8\u6001\u4ECE\u5806\u4E2D\u7533\u8BF7\u5185\u5B58\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528\u5927\u5185\u5B58\u7A7A\u95F4\u4E86\u3002</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h4><p>\u6709\u4E00\u5B66\u751F\u7C7B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">engineer</span>
<span class="token punctuation">{</span>
Private<span class="token operator">:</span>
	<span class="token keyword">int</span> ID<span class="token punctuation">;</span>
	<span class="token keyword">char</span> nalne<span class="token punctuation">;</span>
	<span class="token keyword">static</span> count<span class="token punctuation">;</span><span class="token comment">//\u9759\u6001\u6570\u636E\u6210\u5458\uFF0C\u7528\u6765\u5B58\u653E\u201C\u4EBA\u6570\u201D</span>
	string name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="source-code-files" tabindex="-1"><a class="header-anchor" href="#source-code-files" aria-hidden="true">#</a> Source-code files</h2><ul><li>Member function definitions</li><li>Compiled and linked</li><li>File extension .cpp</li></ul><h2 id="\u9644\u52A0\u6750\u6599" tabindex="-1"><a class="header-anchor" href="#\u9644\u52A0\u6750\u6599" aria-hidden="true">#</a> \u9644\u52A0\u6750\u6599</h2><h3 id="time-h" tabindex="-1"><a class="header-anchor" href="#time-h" aria-hidden="true">#</a> time.h</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// prevent multiple inclusions of header file</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">TIME_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIME_H</span></span>

class Time <span class="token punctuation">{</span>
  
  public<span class="token operator">:</span>
    <span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// constructor</span>
    <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set hour, minute, second</span>
    <span class="token keyword">void</span> <span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// print universal-time format</span>
    <span class="token keyword">void</span> <span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// print standard-time format</span>
  
	private<span class="token operator">:</span>
      <span class="token keyword">int</span> hour<span class="token punctuation">;</span> <span class="token comment">// 0 - 23 (24-hour clock format)</span>
      <span class="token keyword">int</span> minute<span class="token punctuation">;</span> <span class="token comment">// 0 - 59</span>
      <span class="token keyword">int</span> second<span class="token punctuation">;</span> <span class="token comment">// 0 - 59</span>
  
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Time constructor initializes each data member to zero and</span>
<span class="token comment">// ensures all Time objects start in a consistent state </span>

Time<span class="token operator">::</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	hour <span class="token operator">=</span> minute <span class="token operator">=</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>	

<span class="token comment">// set new Time value using universal time, perform validity</span>
<span class="token comment">// checks on the data values and set invalid values to zero </span>
<span class="token keyword">void</span> Time<span class="token operator">::</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  hour <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">?</span> h <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  minute <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">?</span> m <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  second <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">?</span> s <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token comment">// print Time in universal format</span>
<span class="token keyword">void</span> Time<span class="token operator">::</span><span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token function">setfill</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> hour <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span>
  <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> minute <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span>
  <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// print Time in standard format</span>
<span class="token keyword">void</span> Time<span class="token operator">::</span><span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hour <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> hour <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">12</span> <span class="token operator">:</span> hour <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setfill</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> minute <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> second <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string">&quot; AM&quot;</span> <span class="token operator">:</span> <span class="token string">&quot; PM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>time.cpp (\u5728source file\u91CC\u8C03\u7528time.h)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Time.h&quot;</span> <span class="token comment">// Include the header file to this source</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Time t<span class="token punctuation">;</span>
  
  <span class="token comment">// output Time object t&#39;s initial values</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The initial universal time is &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00:00:00</span>
  
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nThe initial standard time is &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12:00:00 AM</span>
  
  t<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change time</span>
  
  <span class="token comment">// output Time object t&#39;s new values</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nUniversal time after setTime is &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13:27:06</span>
  
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nStandard time after setTime is &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:27:06 PM</span>
  
  t<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// attempt invalid settings</span>
  
  <span class="token comment">// output t&#39;s values after specifying invalid values</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nAfter attempting invalid settings:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nUniversal time: &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printUniversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00:00:00</span>
  
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nStandard time: &quot;</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">printStandard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12:00:00 AM</span>
  cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>\u8FD0\u884C\u7ED3\u679C\u5982\u4E0B</p><blockquote><p>The initial universal time is 00:00:00</p><p>The initial standard time is 12:00:00 AM</p><p>Universal time after setTime is 13:27:06</p><p>Standard time after setTime is 1:27:06 PM</p><p>After attempting invalid settings:</p><p>Universal time: 00:00:00</p><p>Standard time: 12:00:00 AM</p></blockquote><h2 id="\u5F15\u7528\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u8D44\u6599" aria-hidden="true">#</a> \u5F15\u7528\u8D44\u6599</h2><ul><li>zhidao.baidu.com/question/748004411503788052.html</li><li>https://blog.csdn.net/gatieme/article/details/50640424</li><li>https://blog.csdn.net/fanyun_01/article/details/78145431</li></ul>`,163);function t(e,o){return p}var l=n(a,[["render",t]]);export{l as default};
