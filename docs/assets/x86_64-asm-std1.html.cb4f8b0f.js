import{_ as e,f as t}from"./app.cdf4b3a8.js";const a={},i=t('<h1 id="x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78401" tabindex="-1"><a class="header-anchor" href="#x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78401" aria-hidden="true">#</a> x86\u6C47\u7F16\u8BED\u8A00\u57FA\u78401</h1><h2 id="why-learning-machine-code" tabindex="-1"><a class="header-anchor" href="#why-learning-machine-code" aria-hidden="true">#</a> Why learning machine code?</h2><ul><li>Many years ago, people write programs with machine code</li><li>Nowadays, people write programs with high-level languages mainly for productivity and portability reasons</li><li>To write a program that runs is easy</li><li>To write a program that <strong>runs well (reliable and efficient),</strong> you need to understand how the machine execute programs</li></ul><h2 id="\u76F8\u5173\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u76F8\u5173\u5B9A\u4E49" aria-hidden="true">#</a> \u76F8\u5173\u5B9A\u4E49</h2><ul><li><p>Architecture (instruction set architecture - ISA)\u300C\u4F53\u7CFB\u7ED3\u6784\uFF08\u6307\u4EE4\u96C6\u4F53\u7CFB\u7ED3\u6784-ISA\uFF09\u300D: The parts of a processor design that one needs to understand to write assembly code</p></li><li><ul><li>Examples: instruction set specification, registers\u300C\u6307\u4EE4\u96C6\u89C4\u8303\uFF0C\u5BC4\u5B58\u5668\u300D</li><li>We will mainly focus on the x86-64 architecture there</li></ul></li><li><p>Microarchitecture\u300C\u5FAE\u4F53\u7CFB\u7ED3\u6784\u300D: Implementation of the architecture</p></li><li><ul><li>Examples: cache sizes and core frequency\u300C\u4F53\u7CFB\u7ED3\u6784\u7684\u5B9E\u73B0\u300D</li></ul></li><li><p>Code Forms</p></li><li><ul><li>Machine Code\u300C\u673A\u5668\u7801\u300D: The byte-level programs that a processor executes\u300C\u5904\u7406\u5668\u6267\u884C\u7684\u5B57\u8282\u7EA7\u7A0B\u5E8F\u300D</li><li>Assembly Code\u300C\u6C47\u7F16\u8BED\u8A00\u300D: A text representation of machine code\u300C\u673A\u5668\u4EE3\u7801\u7684\u6587\u672C\u8868\u793A\u300D</li></ul></li></ul><h2 id="from-high-level-language-to-assembly" tabindex="-1"><a class="header-anchor" href="#from-high-level-language-to-assembly" aria-hidden="true">#</a> From high-level language to assembly</h2><img src="https://pic.hanjiaming.com.cn/2021/03/25/04cf656a84795.png" alt="CleanShot 2021-03-25 at 12.58.57@2x.png" title="CleanShot 2021-03-25 at 12.58.57@2x.png"><h2 id="assembly-programmer-s-view" tabindex="-1"><a class="header-anchor" href="#assembly-programmer-s-view" aria-hidden="true">#</a> Assembly programmer\u2019s view</h2><h3 id="programmer-visible-state" tabindex="-1"><a class="header-anchor" href="#programmer-visible-state" aria-hidden="true">#</a> Programmer-Visible State</h3><ul><li>PC: Program counter <ul><li><p>Address of next instruction</p><ul><li>Called \u201CEIP\u201D (IA32) or \u201CRIP\u201D (x86-64)</li></ul></li><li><p>Register file</p><ul><li>Memory inside the CPU</li><li>Used for instruction execution\u300C\u7528\u4E8E\u6307\u4EE4\u6267\u884C\u300D</li></ul></li><li><p>Condition codes</p><ul><li>Store status information about most recent arithmetic operation\u300C\u5B58\u50A8\u6709\u5173\u6700\u65B0\u7B97\u672F\u8FD0\u7B97\u7684\u72B6\u6001\u4FE1\u606F\u300D</li><li>Used for conditional branching\u300CUsed for conditional branching\u300D</li></ul></li></ul></li></ul><h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> Memory</h3><ul><li>Byte addressable array</li><li>Code, user data, (some) OS data</li><li>Includes stack used to support procedures</li></ul><h2 id="machine-instruction-example" tabindex="-1"><a class="header-anchor" href="#machine-instruction-example" aria-hidden="true">#</a> Machine instruction example</h2><img src="https://pic.hanjiaming.com.cn/2021/03/25/214984684622a.png" alt="image.png" title="image.png"><h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data types</h2><h3 id="word-in-x86-64-isa" tabindex="-1"><a class="header-anchor" href="#word-in-x86-64-isa" aria-hidden="true">#</a> \u201Cword\u201D in x86-64 ISA</h3><ul><li><p>Word: 16 bits, 2 bytes</p></li><li><p>Double words: 32 bits, 4 bytes</p></li><li><p>Quad words: 64 bits, 8 bytes</p><table><thead><tr><th><strong>C declaration</strong></th><th><strong>Intel data type</strong></th><th><strong>Assembly code</strong> <strong>suffix</strong></th><th><strong>Size (bytes)</strong></th></tr></thead><tbody><tr><td>char</td><td>Byte</td><td>b</td><td>1</td></tr><tr><td>short</td><td>Word</td><td>w</td><td>2</td></tr><tr><td>int</td><td>Double word</td><td>l</td><td>4</td></tr><tr><td>long</td><td>Quad word</td><td>q</td><td>8</td></tr><tr><td>char *</td><td>Quad word</td><td>q</td><td>8</td></tr><tr><td>float</td><td>Single precision</td><td>s</td><td>4</td></tr><tr><td>double</td><td>Double precision</td><td>l</td><td>8</td></tr></tbody></table></li></ul><p>\u6CE8\u660E\uFF1A\u5728\u4E0D\u540C\u7684ISA\u67B6\u6784\u4E2D\uFF0Cword\u7684\u957F\u5EA6\u4E0D\u540C</p><h3 id="word-in-mips-x64-isa" tabindex="-1"><a class="header-anchor" href="#word-in-mips-x64-isa" aria-hidden="true">#</a> \u201Cword\u201D in MiPS-x64 ISA</h3><ul><li>Word: 32 bits, 4 bytes</li><li>Double words: 64 bits, 8 bytes</li></ul><h2 id="x86-64-registers" tabindex="-1"><a class="header-anchor" href="#x86-64-registers" aria-hidden="true">#</a> X86-64 registers</h2><h3 id="\u5BC4\u5B58\u5668\u56FE\u793A" tabindex="-1"><a class="header-anchor" href="#\u5BC4\u5B58\u5668\u56FE\u793A" aria-hidden="true">#</a> \u5BC4\u5B58\u5668\u56FE\u793A</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/1872bf430d78c.png" alt="CleanShot 2021-03-25 at 13.09.25@2x.png" title="CleanShot 2021-03-25 at 13.09.25@2x.png"><img src="https://pic.hanjiaming.com.cn/2021/03/25/8ed7a273e1d82.png" alt="CleanShot 2021-03-25 at 13.10.15@2x.png" title="CleanShot 2021-03-25 at 13.10.15@2x.png"><h3 id="\u5BC4\u5B58\u5668\u7684\u517C\u5BB9\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5BC4\u5B58\u5668\u7684\u517C\u5BB9\u5B9E\u73B0" aria-hidden="true">#</a> \u5BC4\u5B58\u5668\u7684\u517C\u5BB9\u5B9E\u73B0</h3><p>64\u4F4D\u7CFB\u7EDF\u5411\u4E0B\u517C\u5BB9\u7684\u539F\u56E0</p><img src="https://pic.hanjiaming.com.cn/2021/03/25/a466ad1044f57.png" alt="image.png" title="image.png"><h2 id="instruction" tabindex="-1"><a class="header-anchor" href="#instruction" aria-hidden="true">#</a> Instruction</h2><h3 id="moving-data" tabindex="-1"><a class="header-anchor" href="#moving-data" aria-hidden="true">#</a> Moving data</h3><h4 id="movq-source-dest" tabindex="-1"><a class="header-anchor" href="#movq-source-dest" aria-hidden="true">#</a> movq,Source, Dest</h4><ul><li>Source values can be constants, from registers or from memory\u300C\u6E90\u503C\u53EF\u4EE5\u662F\u5E38\u91CF\uFF0C\u53EF\u4EE5\u662F\u5BC4\u5B58\u5668\u4E2D\u7684\u503C\uFF0C\u4E5F\u53EF\u4EE5\u662F\u5B58\u50A8\u5668\u4E2D\u7684\u503C\u300D</li><li>Results can be stored in either registers or memory\u300C\u7ED3\u679C\u53EF\u4EE5\u5B58\u50A8\u5728\u5BC4\u5B58\u5668\u6216\u5B58\u50A8\u5668\u4E2D\u300C\u7ED3\u679C\u53EF\u4EE5\u5B58\u50A8\u5728\u5BC4\u5B58\u5668\u6216\u5B58\u50A8\u5668\u4E2D\u300D</li><li>Moving different data sizes: movq, movl, movw, movb\uFF08\u4F9D\u7167\u6765\u6E90\u548C\u76EE\u7684\u5730\u7684\u6700\u5927\u957F\u5EA6\uFF0C\u4F7F\u7528\u76F8\u5E94\u7684\u6307\u4EE4\u300D</li></ul><h4 id="operand-types" tabindex="-1"><a class="header-anchor" href="#operand-types" aria-hidden="true">#</a> Operand Types</h4><p>Operand Types (basically, where data are stored)</p><ul><li><p><strong>Immediate</strong>: Constant integer data</p><ul><li>Example: $ 0x400\uFF0C$-533</li><li>Like C constant, prefixed with <code>$</code> in the assembly code \u50CFC\u5E38\u91CF\u4E00\u6837\uFF0C\u5728\u6C47\u7F16\u4EE3\u7801\u4E2D\u4EE5$\u5F00\u5934</li></ul></li><li><p><strong>Register</strong>: One of 16 integer registers</p><ul><li><p>Example: %rax, %r13</p></li><li><p>But %rsp reserved for special use</p><ul><li>Others have special uses for particular instructions</li></ul></li><li><p><strong>Memory</strong>: 8 consecutive bytes of memory at address given by register</p></li><li><p>Simplest example: (%rax) - Various other \u201Caddress modes\u201D - \u5B9E\u73B0\u539F\u7406\uFF1A\u6307\u9488</p></li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/25/6cd4e45feb41e.png" alt="image.png" title="image.png"><p><strong>Cannot do memory-memory transfer with a single instruction!</strong></p><h3 id="some-arithmetic-operations" tabindex="-1"><a class="header-anchor" href="#some-arithmetic-operations" aria-hidden="true">#</a> Some arithmetic operations</h3><p>Two Operand Instructions</p><p>Format Computation addq Src,Dest Dest = Dest + Src subq Src,Dest Dest = Dest \u2212 Src imulq Src,Dest Dest = Dest * Src salq Src,Dest Dest = Dest &lt;&lt; Src <strong>Also called shlq</strong> sarq Src,Dest Dest = Dest &gt;&gt; Src <strong>Arithmetic</strong> shrq Src,Dest Dest = Dest &gt;&gt; Src <strong>Logical</strong> xorq Src,Dest Dest = Dest ^ Src andq Src,Dest Dest = Dest &amp; Src orq Src,Dest Dest = Dest | Src</p><p>Watch out for argument order! No distinction between signed and unsigned int</p><img src="https://pic.hanjiaming.com.cn/2021/03/25/0e5da5ac90015.png" alt="image.png" title="image.png"><h3 id="leaq" tabindex="-1"><a class="header-anchor" href="#leaq" aria-hidden="true">#</a> Leaq</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/1f7cc711cdb16.png" alt="image.png" title="image.png"><h2 id="memory-addressing" tabindex="-1"><a class="header-anchor" href="#memory-addressing" aria-hidden="true">#</a> Memory addressing</h2><h3 id="simple-modes" tabindex="-1"><a class="header-anchor" href="#simple-modes" aria-hidden="true">#</a> simple modes</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/66402b3e17e2f.png" alt="image.png" title="image.png"><h4 id="complete-memory-addressing-modes" tabindex="-1"><a class="header-anchor" href="#complete-memory-addressing-modes" aria-hidden="true">#</a> Complete memory addressing modes</h4><img src="https://pic.hanjiaming.com.cn/2021/03/25/f56035d621009.png" alt="CleanShot 2021-03-25 at 15.16.52@2x.png" title="CleanShot 2021-03-25 at 15.16.52@2x.png"><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>COMP1411@Polyu PowerPoint</li></ul>',50);function r(s,n){return i}var o=e(a,[["render",r]]);export{o as default};
