import{_ as e,f as a}from"./app.471ea2ca.js";const i={},t=a('<h1 id="introduction-to-computer-memory-and-cache-memory" tabindex="-1"><a class="header-anchor" href="#introduction-to-computer-memory-and-cache-memory" aria-hidden="true">#</a> Introduction to Computer Memory and Cache Memory</h1><h2 id="computer-components-revisited" tabindex="-1"><a class="header-anchor" href="#computer-components-revisited" aria-hidden="true">#</a> Computer components revisited</h2><img src="https://pic.hanjiaming.com.cn/2021/04/07/b306fada01c11.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/07/70b7fd8eb1e55.png" alt="image.png" title="image.png"><h2 id="computer-memory" tabindex="-1"><a class="header-anchor" href="#computer-memory" aria-hidden="true">#</a> Computer Memory</h2><p>Computer memory refers to any physical device capable of storing information\u300C\u8BA1\u7B97\u673A\u5185\u5B58\u662F\u6307\u80FD\u591F\u5B58\u50A8\u4FE1\u606F\u7684\u4EFB\u4F55\u7269\u7406\u8BBE\u5907\u300D</p><p>a wide range of type, technology, performance, cost, etc. --- Characteristics of Memory\u300C\u7C7B\u578B\uFF0C\u6280\u672F\uFF0C\u6027\u80FD\uFF0C\u6210\u672C\u7B49\u5E7F\u6CDB\u7684\u8303\u56F4-\u5185\u5B58\u7684\u7279\u5F81\u300D</p><p>Memory organization: select the right memory, and put it to the right place</p><h3 id="motivation" tabindex="-1"><a class="header-anchor" href="#motivation" aria-hidden="true">#</a> Motivation</h3><p>Choosing the right memory (physical device) is just like buying the right desk\u300C\u9009\u62E9\u5408\u9002\u7684\u5185\u5B58\uFF08\u7269\u7406\u8BBE\u5907\uFF09\u5C31\u50CF\u8D2D\u4E70\u5408\u9002\u7684\u529E\u516C\u684C\u300D</p><p>Underlying\u300C\u57FA\u672C\u7684\u300D learning goals:</p><ul><li>trade-off between performance and cost</li><li>design philosophies\u300C\u54F2\u7406\u300D/techniques to use constrained cost to achieve better performance\u300C\u8BBE\u8BA1\u54F2\u5B66/\u6280\u672F\u4EE5\u4F7F\u7528\u6709\u9650\u7684\u6210\u672C\u6765\u83B7\u5F97\u66F4\u597D\u7684\u6027\u80FD\u300D</li></ul><h3 id="characteristics-of-memory" tabindex="-1"><a class="header-anchor" href="#characteristics-of-memory" aria-hidden="true">#</a> <strong>Characteristics</strong> of Memory</h3><p>Memory can be categorized\u300C\u5206\u7C7B\u300D from many aspects\u300C\u65B9\u9762\u300D</p><ul><li>the technology it uses</li><li>the physical media</li><li>the cost</li><li>the access speed</li><li>the location (where it is in the computer)</li></ul><h4 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> Location</h4><ul><li>internal memory or external memory? <ul><li>internal: registers in processor, main memory, cache, etc.</li><li>external: the peripheral storage devices, such as disk and tape -- they are accessible to the processor via I/O controllers</li></ul></li></ul><p>\u6CE8\u610F\uFF1A\u4E00\u822C\u5728\u6301\u4E45\u5728\u4E3B\u677F\u4E0A\u63D2\u7740\u7684 Memory \u7B97 internal memory</p><h4 id="access-method" tabindex="-1"><a class="header-anchor" href="#access-method" aria-hidden="true">#</a> Access method</h4><h5 id="sequential-access" tabindex="-1"><a class="header-anchor" href="#sequential-access" aria-hidden="true">#</a> Sequential Access</h5><p>\u300C\u987A\u5E8F\u8BBF\u95EE\u300D</p><ul><li>memory is organized into units of data (records)\u300C\u5185\u5B58\u4EE5\u6570\u636E\uFF08\u8BB0\u5F55\uFF09\u4E3A\u5355\u4F4D\u8FDB\u884C\u7EC4\u7EC7\uFF1B\u300D;</li><li>access each records in sequence: move from a current location to the desired location sequentially\u300C\u4F9D\u6B21\u8BBF\u95EE\u6BCF\u4E2A\u8BB0\u5F55\uFF1A\u4ECE\u5F53\u524D\u4F4D\u7F6E\u987A\u5E8F\u79FB\u52A8\u5230\u6240\u9700\u4F4D\u7F6E\u300D</li><li>as a result, the time to access an arbitrary record is highly variable\u300C\u975E\u5E38\u53EF\u53D8\u7684\u300D</li></ul><p>example: tape\u300C\u78C1\u5E26\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/3d59e9efb4597.png" alt="image.png" title="image.png"><h5 id="direct-access-random-access" tabindex="-1"><a class="header-anchor" href="#direct-access-random-access" aria-hidden="true">#</a> Direct Access/Random Access</h5><ul><li>each location in the memory has a unique address\u300C\u5185\u5B58\u4E2D\u7684\u6BCF\u4E2A\u4F4D\u7F6E\u90FD\u6709\u4E00\u4E2A\u552F\u4E00\u7684\u5730\u5740\u300D</li><li>direct access often refers to secondary devices such as disks (access the block of data, may plus sequential search)\u300C\u76F4\u63A5\u8BBF\u95EE\u901A\u5E38\u662F\u6307\u8BF8\u5982\u78C1\u76D8\u4E4B\u7C7B\u7684\u8F85\u52A9\u8BBE\u5907\uFF08\u8BBF\u95EE\u6570\u636E\u5757\uFF0C\u53EF\u80FD\u8FD8\u9700\u8981\u987A\u5E8F\u641C\u7D22\uFF09\u300D</li><li>random access often refers to main memory or cache\u300C\u968F\u673A\u8BBF\u95EE\u901A\u5E38\u662F\u6307\u4E3B\u5185\u5B58\u6216\u7F13\u5B58\u300D</li><li>the time to access a given location is typically independent of the sequence of prior accesses and is often constant\u300C\u8BBF\u95EE\u7ED9\u5B9A\u4F4D\u7F6E\u7684\u65F6\u95F4\u901A\u5E38\u4E0E\u5148\u524D\u8BBF\u95EE\u7684\u987A\u5E8F\u65E0\u5173\uFF0C\u5E76\u4E14\u901A\u5E38\u662F\u6052\u5B9A\u7684\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/07/a0bd5e5c66dbb.png" alt="image.png" title="image.png"><h4 id="access-time-latency" tabindex="-1"><a class="header-anchor" href="#access-time-latency" aria-hidden="true">#</a> Access Time (latency)</h4><ul><li>Measures of Performance -- Access Time (latency)\u300C\u6027\u80FD\u6307\u6807-\u8BBF\u95EE\u65F6\u95F4\uFF08\u5EF6\u8FDF\uFF09\u300D</li><li>for random access, the time it takes to perform a read or write operation, i.e., from the time when an address is presented to memory to the time when data have been stored or become available\u300C\u5BF9\u4E8E\u968F\u673A\u8BBF\u95EE\uFF0C\u6267\u884C\u8BFB\u6216\u5199\u64CD\u4F5C\u6240\u82B1\u8D39\u7684\u65F6\u95F4\uFF0C\u5373 <strong>\u4ECE\u5C06\u5730\u5740\u7ED9\u5185\u5B58\u7684\u65F6\u95F4 \u5230 \u6570\u636E\u5DF2\u5B58\u50A8\u6216\u53EF\u7528 \u7684\u65F6\u95F4</strong>\u300D</li><li>for non-random access, from the time the instruction is issued to the time the data position is located for read/write operation\u300C\u5BF9\u4E8E\u975E\u968F\u673A\u8BBF\u95EE\uFF0C\u4ECE <strong>\u53D1\u51FA\u6307\u4EE4\u7684\u65F6\u95F4\u5230\u4E3A\u8BFB/\u5199\u64CD\u4F5C\u5B9A\u4F4D\u6570\u636E\u4F4D\u7F6E</strong> \u7684\u65F6\u95F4\u300D</li></ul><h4 id="memory-cycle-time" tabindex="-1"><a class="header-anchor" href="#memory-cycle-time" aria-hidden="true">#</a> Memory Cycle Time</h4><p>Measures of Performance -- Memory Cycle Time</p><p>Primarily\u300C\u4E3B\u8981\u300D applied to random access memory\u300C\u4E3B\u8981\u5E94\u7528\u4E8E\u968F\u673A\u5B58\u53D6\u5B58\u50A8\u5668\u300D\uFF1Ait consists of the access time plus any additional time required before a second access can be made (cycle)\u300C\u5B83\u7531 \u8BBF\u95EE\u65F6\u95F4\u52A0\u4E0A \u4EFB\u4F55\u989D\u5916\u7684\u65F6\u95F4 \u5728\u7B2C\u4E8C\u6B21\u8BBF\u95EE\u53EF\u88AB\u6267\u884C\u524D\u300D</p><p>Example: in computer games, skills (QWER) + cool down\u300C\u5728\u7535\u8111\u6E38\u620F\u4E2D\uFF0C\u6280\u80FD\uFF08QWER\uFF09+\u51B7\u9759\u4E0B\u6765\u300D</p><p>it is concerned with the system bus\u300C\u5B83\u4E0E\u7CFB\u7EDF\u603B\u7EBF\u6709\u5173\u300D</p><p><strong>An associated concept is transfer rate = 1/memory cycle time</strong><br> \u9891\u7387\u4E00\u822C\u662F\u8FD9\u6837\u8BA1\u7B97\u51FA\u6765\u7684</p><h4 id="physical-materials-technologies" tabindex="-1"><a class="header-anchor" href="#physical-materials-technologies" aria-hidden="true">#</a> Physical materials/technologies</h4><ul><li>semiconductor: RAM, Cache\u300C\u9AD8\u901F\u7F13\u5B58\u300D</li><li>magnetic: hard-drive</li><li>solid-state devices (a kind of semiconductor technology); replace hard-drive\u300C\u56FA\u6001\u8BBE\u5907\uFF08\u4E00\u79CD\u534A\u5BFC\u4F53\u6280\u672F\uFF09\uFF1B\u66FF\u4EE3\u786C\u76D8\u300D</li><li>optical: CD\u300C\u5149\u5B66\u7684\uFF1ACD\u300D</li></ul><h4 id="volatile-vs-non-volatile" tabindex="-1"><a class="header-anchor" href="#volatile-vs-non-volatile" aria-hidden="true">#</a> Volatile vs. Non-volatile</h4><p>Physical features\u300C\u7269\u7406\u7279\u6027\u300D -- Volatile vs. Non-volatile</p><ul><li>Volatile memory: need power to maintain the stored information (memory is lost when power is off), e.g., registers, RAM\u300C\u6613\u5931\u6027\u5185\u5B58\uFF1A\u9700\u8981\u7535\u6E90\u6765\u7EF4\u62A4\u5B58\u50A8\u7684\u4FE1\u606F\uFF08\u7535\u6E90\u5173\u95ED\u65F6\u5185\u5B58\u4E22\u5931\uFF09\uFF0C\u4F8B\u5982\u5BC4\u5B58\u5668\uFF0CRAM\u300D</li><li>non-volatile memory: no need to be charged all the time, e.g., hard drive\u300C\u975E\u6613\u5931\u6027\u5B58\u50A8\u5668\uFF1A\u65E0\u9700\u4E00\u76F4\u5145\u7535\uFF0C\u4F8B\u5982\u786C\u76D8\u9A71\u52A8\u5668\u300D</li></ul><h4 id="erasable-vs-non-erasable" tabindex="-1"><a class="header-anchor" href="#erasable-vs-non-erasable" aria-hidden="true">#</a> Erasable vs. Non-erasable</h4><p>Physical features -- Erasable vs. Non-erasable</p><ul><li>erasable: can be deleted or rewritten with new data, e.g., registers, hard drive</li><li>non-earsable: cannot be delelted/rewritten, e.g., ROM (Read Only Memory), CD</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/07/e2098839ffa27.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/07/04b38cc8be69f.png" alt="image.png" title="image.png"><h2 id="memory-hierarchy" tabindex="-1"><a class="header-anchor" href="#memory-hierarchy" aria-hidden="true">#</a> Memory Hierarchy</h2><p>Memory Hierarchy\u300C\u5185\u5B58\u5C42\u6B21\u7ED3\u6784\u300D</p><p>In the hierarchy</p><ul><li>closer to the processor: we have faster but lower-capacity, more expensive memory\u300C\u8DDD\u79BB\u5904\u7406\u5668\u66F4\u8FD1\uFF1A\u6211\u4EEC\u62E5\u6709\u66F4\u5FEB\u4F46\u5BB9\u91CF\u66F4\u4F4E\uFF0C\u5185\u5B58\u66F4\u6602\u8D35\u7684\u5185\u5B58\u300D</li><li>further to the processor: we have slower but higher-capacity, less expensive memory\u300C\u8DDD\u79BB\u5904\u7406\u5668\u66F4\u8FDC\uFF1A\u6211\u4EEC\u7684\u5185\u5B58\u901F\u5EA6\u8F83\u6162\u4F46\u5BB9\u91CF\u8F83\u9AD8\uFF0C\u5185\u5B58\u4EF7\u683C\u8F83\u4FBF\u5B9C\u300D</li><li>the essential design question: can we &quot;alloate&quot; the information such that frequently accessed information is stored in faster memory\u300C\u8BBE\u8BA1\u7684\u57FA\u672C\u95EE\u9898\uFF1A\u6211\u4EEC\u80FD\u5426\u201C\u5206\u914D\u201D\u4FE1\u606F\uFF0C\u4EE5\u4FBF\u5C06\u7ECF\u5E38\u8BBF\u95EE\u7684\u4FE1\u606F\u5B58\u50A8\u5728\u66F4\u5FEB\u7684\u5185\u5B58\u4E2D\u300D</li></ul><p>example: Program Counter register</p><h3 id="access-latency" tabindex="-1"><a class="header-anchor" href="#access-latency" aria-hidden="true">#</a> Access latency</h3><p>Access latency\u300C\u5B58\u53D6\u5EF6\u8FDF\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/4b4054871af47.png" alt="image.png" title="image.png"><ul><li>Time used by CPU to execute one instruction <ul><li>1 cycle for most instructions (1GHz CPU, 1 cycle = 10-9s)</li></ul></li><li>Time used to fetch a word from main memory <ul><li>10 ~ 100 cycles</li></ul></li><li>Time used to fetch a block of data from disks <ul><li>10,000 ~ 1,000,000 cycles</li></ul></li></ul><p>The gap\u300C\u95F4\u9699\u300D between CPU, main memory and disks</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/68881ede4ffdd.png" alt="image.png" title="image.png"><p>Solve the problem: a fast CPU is wasted by waiting for slow memory?</p><p>The processor has access to two levels of memory</p><ul><li>Level-1: capacity C1 = 100 words, access time T1 = 0.1s</li><li>Level-2: capacity C2 = 1000 words, access time T2 = 1s</li></ul><p>access mechanism: if some data is in Level-1, directly access the data; \u300C\u8BBF\u95EE\u673A\u5236\uFF1A\u5982\u679C\u67D0\u4E9B\u6570\u636E\u5904\u4E8E\u7EA7\u522B1\uFF0C\u5219\u76F4\u63A5\u8BBF\u95EE\u6570\u636E\uFF1B\u300Dotherwise, move the data from Level-2 to Level-1 first, and then access the data from Level-1\u300C\u5426\u5219\uFF0C\u9996\u5148\u5C06\u6570\u636E\u4ECELevel-2\u79FB\u5230Level-1\uFF0C\u7136\u540E\u4ECELevel-1\u8BBF\u95EE\u6570\u636E\u300D</p><p>T1 vs. (T1 + T2)</p><h3 id="locality" tabindex="-1"><a class="header-anchor" href="#locality" aria-hidden="true">#</a> Locality</h3><h4 id="clustering-effect" tabindex="-1"><a class="header-anchor" href="#clustering-effect" aria-hidden="true">#</a> Clustering effect</h4><p>\u5728\u5185\u5B58\u4E2D\uFF0Cbit\u7EC4\u6210byte\uFF0C\u591A\u884Cbyte\u7EC4\u6210word\uFF0C\u591A\u4E2Aword\u7EC4\u6210block\u3002</p><p>Basic idea: during program execution, memory accesses (for instructions and data) by processor tend to cluster\u300C\u57FA\u672C\u601D\u60F3\uFF1A\u5728\u7A0B\u5E8F\u6267\u884C\u8FC7\u7A0B\u4E2D\uFF0C\u5904\u7406\u5668\u5BF9\u5185\u5B58\u7684\u8BBF\u95EE\uFF08\u7528\u4E8E\u6307\u4EE4\u548C\u6570\u636E\uFF09\u503E\u5411\u4E8E\u805A\u96C6\u300D</p><p>Reasons: programs typically contain loops/subroutines -- repeatedly access a small set of instructions; also, for data, operations on tables and arrays involve access to a clustered set of data\u300C\u539F\u56E0\uFF1A\u7A0B\u5E8F\u901A\u5E38\u5305\u542B\u5FAA\u73AF/\u5B50\u4F8B\u7A0B-\u91CD\u590D\u8BBF\u95EE\u4E00\u5C0F\u7EC4\u6307\u4EE4;\u540C\u6837\uFF0C\u5BF9\u4E8E\u6570\u636E\uFF0C\u5BF9\u8868\u548C\u6570\u7EC4\u7684\u64CD\u4F5C\u6D89\u53CA\u5BF9\u96C6\u7FA4\u6570\u636E\u96C6\u7684\u8BBF\u95EE\u300D</p><p>During some specific time period, processor wants to access a portion of main memory (one cluster)\u300C\u5728\u67D0\u4E2A\u7279\u5B9A\u65F6\u95F4\u6BB5\u5185\uFF0C\u5904\u7406\u5668\u5E0C\u671B\u8BBF\u95EE\u4E3B\u5185\u5B58\u7684\u4E00\u90E8\u5206\uFF08\u4E00\u4E2A\u96C6\u7FA4\uFF09\u300D</p><p>Over time, processor accesses different clusters\u300C\u968F\u7740\u65F6\u95F4\u7684\u6D41\u901D\uFF0C\u5904\u7406\u5668\u8BBF\u95EE\u4E0D\u540C\u7684\u96C6\u7FA4\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/1ad834c46e638.png" alt="image.png" title="image.png"><h4 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h4><ul><li>Principle of locality: Programs tend to use data and instructions with addresses near or equal to those they have used recently\u300C\u672C\u5730\u6027\u539F\u5219\uFF1A\u7A0B\u5E8F\u503E\u5411\u4E8E\u4F7F\u7528\u5730\u5740\u6216\u5730\u5740\u4E0E\u5B83\u4EEC\u6700\u8FD1\u4F7F\u7528\u7684\u5730\u5740\u63A5\u8FD1\u6216\u76F8\u7B49\u7684\u6570\u636E\u548C\u6307\u4EE4\u3002\u300D</li><li>Temporal\u300C\u65F6\u95F4\u300D locality: recently referenced items (data, instructions) are likely to be referenced again in the near future\u300C\u65F6\u95F4\u4F4D\u7F6E\uFF1A\u8FD1\u671F\u5F15\u7528\u7684\u9879\u76EE\uFF08\u6570\u636E\uFF0C\u8BF4\u660E\uFF09\u53EF\u80FD\u4F1A\u5728\u4E0D\u4E45\u7684\u5C06\u6765\u518D\u6B21\u5F15\u7528\u300D</li><li>Spatial\u300C\u7A7A\u95F4\u300D locality: items (data, instructions) with nearby addresses tend to be referenced close together in time\u300C\u7A7A\u95F4\u4F4D\u7F6E\uFF1A\u5177\u6709\u9644\u8FD1\u5730\u5740\u7684\u9879\u76EE\uFF08\u6570\u636E\uFF0C\u6307\u4EE4\uFF09\u5F80\u5F80\u5728\u65F6\u95F4\u4E0A\u9760\u8FD1\u5728\u4E00\u8D77\u5F15\u7528\u300D</li></ul><p>THINK: WHY LOCALITY EXISTS?</p><h4 id="example-two-level-memory" tabindex="-1"><a class="header-anchor" href="#example-two-level-memory" aria-hidden="true">#</a> Example: Two-Level Memory</h4><p>Hit Ratio: the fraction of accesses involving only Level-1</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/7c3301409c48a.png" alt="image.png" title="image.png"><p>Conclusion-- increase the hit ratio</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/3044bb32a2838.png" alt="image.png" title="image.png"><h4 id="examples-of-locality" tabindex="-1"><a class="header-anchor" href="#examples-of-locality" aria-hidden="true">#</a> Examples of locality</h4><p>To compute the sum of all elements in an 2-D array</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/be300de3c3488.png" alt="image.png" title="image.png"><p>\u540C\u65F6\u6211\u4EEC\u53D1\u73B0\u6570\u7EC4\u662F\u6309x-y-z\u7684\u7EF4\u5EA6\u5B58\u50A8\u7684\u3002\u6240\u4EE5\uFF0C\u5F53\u6211\u4EEC\u4F7F\u7528\u4E0B\u9762\u7684\u7B97\u6CD5\u65F6</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/cb956aaadce82.png" alt="image.png" title="image.png" width="240px"><p>\u5C31\u662F BAD LOCALITY</p><h4 id="examples-of-temporal-locality" tabindex="-1"><a class="header-anchor" href="#examples-of-temporal-locality" aria-hidden="true">#</a> Examples of temporal locality</h4><ul><li><p>Data references</p></li><li><ul><li>The access to \u201Csum\u201D in the inner loop</li><li>Once accesses, will be accessed again in the near future\u300C\u4E00\u65E6\u6267\u884C\uFF0C\u5C06\u5728\u4E0D\u4E45\u7684\u5C06\u6765\u518D\u6B21\u6267\u884C\u300D</li></ul></li><li><p>Instruction references</p></li><li><ul><li>The instructions to do \u201Csum += a[][]\u201D</li><li>Once executed, will be executed again in the near future</li></ul></li></ul><p>To understand locality for \u201Cdata\u201D and \u201Cinstructions\u201D:<br> They are essentially the same, as instructions are special data stored in memory</p><h4 id="to-measure-locality" tabindex="-1"><a class="header-anchor" href="#to-measure-locality" aria-hidden="true">#</a> To measure locality</h4><p>\u5982\u4F55\u8BC4\u4EF7\u4E00\u4E2Alocality\u7684\u597D\u574F\u5462\uFF1F</p><ul><li>Stride: The distance of two adjacent data accesses in memory location, in the unit of 1 data element\u300C\u6B65\u5E45\uFF1A\u5185\u5B58\u4F4D\u7F6E\u4E2D\u4E24\u4E2A\u76F8\u90BB\u6570\u636E\u8BBF\u95EE\u7684\u8DDD\u79BB\uFF0C\u4EE51\u4E2A\u6570\u636E\u5143\u7D20\u7684\u957F\u5EA6\u4E3A\u76F8\u540C\u5355\u4F4D\u300D <ul><li>Stride-1 reference pattern: access the data one by one according to their memory addresses, such as the good locality example\u300C\u6839\u636E\u6570\u636E\u7684\u5B58\u50A8\u5730\u5740\u4E00\u4E00\u8BBF\u95EE\u6570\u636E\uFF0C\u4F8B\u5982\u826F\u597D\u7684locality\u793A\u4F8B\u300D</li><li>Stride-k reference pattern: for example, the bad locality example generally has a stride-4 reference pattern\u300C\u4F8B\u5982\uFF0C\u4E0D\u826Flocality\u793A\u4F8B\u901A\u5E38\u5177\u6709 a stride-4 reference pattern\u300D</li></ul></li><li>The smaller the stride, the better the locality\u300C\u6B65\u5E45\u8D8A\u5C0F\uFF0Clocality \u8D8A\u597D\u300D</li></ul><h3 id="cache-memory" tabindex="-1"><a class="header-anchor" href="#cache-memory" aria-hidden="true">#</a> Cache Memory</h3><img src="https://pic.hanjiaming.com.cn/2021/04/07/5cecb7a84188e.png" alt="image.png" title="image.png"><p>\u8FD9\u91CC\u51B0\u7BB1\u5C31\u76F8\u5F53\u4E8E Cache Memory</p><p>Caching idea\uFF1AAdding a small but fast memory inside the CPU</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/0f77d2ce106a8.png" alt="image.png" title="image.png"><p>cache\u662F\u4E00\u884C\u4E00\u884C\u7684\u3002\u6211\u4EEC\u8BA4\u4E3A cache \u6BCF\u884C\u957F\u5EA6 = \u5185\u5B58\u6BCF\u4E2Ablock\u5927\u5C0F\u3002</p><h4 id="concept-1" tabindex="-1"><a class="header-anchor" href="#concept-1" aria-hidden="true">#</a> Concept</h4><img src="https://pic.hanjiaming.com.cn/2021/04/07/e9c84f5447c5a.png" alt="image.png" title="image.png"><p>Cache is fast but has relatively small capacity.\u300C\u7F13\u5B58\u901F\u5EA6\u5FEB\uFF0C\u4F46\u5BB9\u91CF\u76F8\u5BF9\u8F83\u5C0F\u3002\u300D</p><p>Basic mechanism: cache contains the copy of portions of main memory (blocks). \u300C\u57FA\u672C\u673A\u5236\uFF1A\u9AD8\u901F\u7F13\u5B58\u5305\u542B\u4E3B\u5185\u5B58\u90E8\u5206\uFF08\u5757\uFF09\u7684\u526F\u672C\u3002\u300D</p><ul><li>when CPU wants to read a word: <ul><li>if the word is in cache, access the word</li><li>else a block of main memory (containing that word) is read into cache</li></ul></li><li>thenthe word is delivered to CPU\u300C\u5426\u5219\u5C06\u4E00\u5757\u4E3B\u5B58\u50A8\u5668\uFF08\u5305\u542B\u8BE5\u5355\u8BCD\uFF09\u8BFB\u5165\u7F13\u5B58\uFF0C\u7136\u540E\u8FD9\u4E2A\u8BCD\u88AB\u4EA4\u4ED8\u7ED9CPU\u300D</li></ul><p>Due to locality of reference, the hit ratio is high (words can be found in cache with high chance)\u300CDue to locality of reference \u547D\u4E2D\u7387\u5F88\u9AD8\uFF08\u53EF\u4EE5\u5728\u9AD8\u901F\u7F13\u5B58\u4E2D\u627E\u5230\u5355\u8BCD\uFF09\u300D</p><p>As a result, as if there is memory with large capacity and fast access speed\u300C\u7ED3\u679C\uFF0C\u597D\u50CF\u6709\u5927\u5BB9\u91CF\u4E14\u8BBF\u95EE\u901F\u5EA6\u5FEB\u7684\u5185\u5B58\u300D</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><p>Assume When a program executes, it generates 20 memory accesses<br> ABCDCCCDDDEGHGHGHGHB</p><p>The unit of data loading is \u201Cone block\u201D\uFF1AOne block contains two data variables</p><ul><li>Cache size = 2 blocks</li><li>Data access time <ul><li>Cache hit: 1 cycle\u300C\u7F13\u5B58\u547D\u4E2D\uFF1A1\u4E2A\u5468\u671F\u300D</li><li>\u300C\u7F13\u5B58\u672A\u547D\u4E2D\uFF1A200\u4E2A\u5468\u671F\u300D</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/07/a3d302d2fa796.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/07/3292afeed1f5b.png" alt="image.png" title="image.png"><p>Performance with cache\uFF1AAccess time = 1 * 15 + 5 * 200 = 1015 cycles Performance without cache\uFF1AAccess time = 200 * 20 = 4000 cycles</p><p>\u6CE8\uFF1A\u5047\u8BBE\u5224\u65AD\u4E0D\u9700\u8981\u65F6\u95F4\u3002\u4ECE\u5185\u5B58\u63D0\u53D6\u6570\u636E\u7684\u95F4\u9699\u662F 200c \uFF0C\u4ECE cash \u63D0\u53D6\u6570\u636E\u95F4\u9699\u662F 15c</p><p>Multiple-Level Cache Organization \u56FE\u793A</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/7f000345e3c0a.png" alt="image.png" title="image.png"><h4 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> Application</h4><img src="https://pic.hanjiaming.com.cn/2021/04/27/c5fa8774ea8cc.png" alt="CleanShot 2021-04-27 at 12.31.42@2x.png" title="CleanShot 2021-04-27 at 12.31.42@2x.png" width="300px"><h3 id="structure-of-a-cache-main-memory-system" tabindex="-1"><a class="header-anchor" href="#structure-of-a-cache-main-memory-system" aria-hidden="true">#</a> Structure of a Cache/Main-Memory System</h3><img src="https://pic.hanjiaming.com.cn/2021/04/07/305fa65e5042d.png" alt="image.png" title="image.png"><p>The Cache consists of m <strong>lines,</strong> where each line has a length of K words (the size of one block in memory)\u300Ccache \u7531m\u884C\u7EC4\u6210\uFF0C\u5176\u4E2D\u6BCF\u884C\u7684\u957F\u5EA6\u4E3AK\u4E2A\u5B57\uFF08\u5185\u5B58\u4E2D\u4E00\u4E2A\u5757\u7684\u5927\u5C0F\uFF09\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/7ff4348d3fede.png" alt="image.png" title="image.png" width="350px"><p><strong>m lines</strong> in Cache vs. <strong>M blocks</strong> in Memory <strong>(m &lt;&lt;M)</strong></p><p>access mechanism: when we want to access a word in the memory, the whole block containing that word is copied into one line of cache\u300C\u8BBF\u95EE\u673A\u5236\uFF1A\u5F53\u6211\u4EEC\u8981\u8BBF\u95EE\u5185\u5B58\u4E2D\u7684\u4E00\u4E2Aword\u65F6\uFF0C\u5305\u542B\u8BE5word\u7684\u6574\u4E2A\u5757\u88AB\u590D\u5236\u5230\u7F13\u5B58\u7684\u4E00\u884C\u4E2D</p><p>One cache line cannot be permanently allocated to one memory block -- use the tag to indicate which block is stored in cache (more on this later)\u300C\u4E00\u6761\u9AD8\u901F\u7F13\u5B58\u884C\u4E0D\u80FD\u6C38\u4E45\u5206\u914D\u7ED9\u4E00\u4E2A\u5185\u5B58\u5757-\u4F7F\u7528\u6807\u7B7E\u6307\u793A\u54EA\u4E2A\u5757\u5B58\u50A8\u5728\u9AD8\u901F\u7F13\u5B58\u4E2D\uFF08\u7A0D\u540E\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\uFF09\u300D</p><p>Illustration of Cache Read Operation \u5982\u4E0B</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/b886280cea662.png" alt="image.png" title="image.png"><p>Typical Cache Organization \u5982\u4E0B\u56FE</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/fbde1110fca38.png" alt="image.png" title="image.png"><p>Mapping Function\u2014\u2014Basic Elements of Cache Design</p><h4 id="mapping-function" tabindex="-1"><a class="header-anchor" href="#mapping-function" aria-hidden="true">#</a> Mapping Function</h4><p>The essential problem we want to address: map M memory blocks to m cache lines (m &lt;&lt; M)\u2014\u2014mapping function\u300C\u6211\u4EEC\u8981\u89E3\u51B3\u7684\u57FA\u672C\u95EE\u9898\uFF1A\u5C06M\u4E2A\u5185\u5B58\u5757\u6620\u5C04\u5230m\u4E2A\u7F13\u5B58\u884C\uFF08m &lt;&lt; M\uFF09-\u6620\u5C04\u529F\u80FD\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/5836c70fcf801.png" alt="image.png" title="image.png"><p>A mapping function defines where the needed blocks in memory are loaded to Cache (M blocks, m positions)\u300C\u6620\u5C04\u529F\u80FD\u5B9A\u4E49\u5C06\u5185\u5B58\u4E2D\u6240\u9700\u7684\u5757\u52A0\u8F7D\u5230\u9AD8\u901F\u7F13\u5B58\u7684\u4F4D\u7F6E\uFF08M\u4E2A\u5757\uFF0Cm\u4E2A\u4F4D\u7F6E\uFF09\u300D</p><ul><li>direct mapping: a kind of fixed mapping, i.e., blocks in memory are allocated to fixed cache lines <ul><li>Q = M/m, Q blocks are mapped to one single cache line; Q to 1 mapping\u300CQ = M / m\uFF0CQ\u4E2A\u5757\u88AB \u6620\u5C04 \u5230\u4E00\u6761 cache line\uFF1B Q\u5BF91\u6620\u5C04\u300D</li></ul></li><li>associative mapping: any block can go to any cache line\u300C\u5173\u8054\u6620\u5C04\uFF1A\u4EFB\u4F55\u5757 \u90FD\u53EF\u4EE5\u5230 \u4EFB\u4F55 cache line\u300D</li></ul><h5 id="direct-mapping" tabindex="-1"><a class="header-anchor" href="#direct-mapping" aria-hidden="true">#</a> Direct mapping</h5><h6 id="direct-mapping-example" tabindex="-1"><a class="header-anchor" href="#direct-mapping-example" aria-hidden="true">#</a> Direct mapping Example</h6><p>Map all students to 10 seats using direct mapping</p><ul><li>suppose SID has 8 digits, split SID into 2 parts: first 7 digits and the last digit\u300C\u5047\u8BBESID\u67098\u4F4D\u6570\u5B57\uFF0C\u5219\u5C06SID\u5206\u4E3A2\u90E8\u5206\uFF1A\u524D7\u4F4D\u548C\u540E1\u4F4D\u300D</li><li>use your last digit as your seat number -- all students are divided into 10 groups, it is a fixed mapping\u300C\u7528\u60A8\u7684\u6700\u540E\u4E00\u4F4D\u6570\u5B57\u4F5C\u4E3A\u5EA7\u4F4D\u53F7-\u6240\u6709\u5B66\u751F\u5206\u4E3A10\u7EC4\uFF0C\u8FD9\u662F\u4E00\u4E2A\u56FA\u5B9A\u7684\u6620\u5C04\u300D</li></ul><p>How can we know who is currently sitting in seat i (i 0 to 9)?\u300C\u6211\u4EEC\u5982\u4F55\u77E5\u9053\u8C01\u73B0\u5728\u5750\u5728\u5EA7\u4F4Di\uFF08i 0\u52309\uFF09\u4E2D\uFF1F\u300D</p><p>a student can use the first 7 digits as a tag -- the tag is unique for that particular student\u300C\u4E00\u4E2A\u5B66\u751F\u53EF\u4EE5\u4F7F\u7528\u524D7\u4F4D\u6570\u5B57\u4F5C\u4E3A\u6807\u7B7E-\u8BE5\u6807\u7B7E\u5BF9\u4E8E\u8BE5\u7279\u5B9A\u5B66\u751F\u662F\u552F\u4E00\u7684\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/7d57e6b79307c.png" alt="image.png" title="image.png"><p>SID = memory address (tag in cache is a portion of memory address)\u300CSID =\u5185\u5B58\u5730\u5740\uFF08\u7F13\u5B58\u4E2D\u7684\u6807\u7B7E\u662F\u5185\u5B58\u5730\u5740\u7684\u4E00\u90E8\u5206\uFF09\u300D</p><h6 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h6><ul><li>Use main memory address to implement direct mapping\u300C\u4F7F\u7528 main memory address \u5B9E\u73B0\u76F4\u63A5\u6620\u5C04\u300D</li><li>bear in mind that Cache line = Memory Block (they contain the same number of words)\u300C\u8BF7\u8BB0\u4F4F\uFF0C\u7F13\u5B58\u884C=\u5185\u5B58\u5757\uFF08\u5B83\u4EEC\u5305\u542B\u76F8\u540C\u6570\u91CF\u7684\u5B57\uFF09\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/08/e95e52739c8a3.png" alt="image.png" title="image.png"><p>\u6CE8\u610F\uFF1A\u8FD9\u5E76\u4E0D\u8FDD\u80CC\u5730\u5740\u7F16\u53F7\u7684\u76F8\u5173\u77E5\u8BC6\u3002\u539F\u56E0\u662Fs+w\u5E76\u4E0D\u4F1A\u5360\u6EE1\u6240\u6709\u7684\u6BD4\u7279\u4F4D\u3002</p><h6 id="cache-interpret" tabindex="-1"><a class="header-anchor" href="#cache-interpret" aria-hidden="true">#</a> Cache interpret</h6><p>How would the cache interpret\u300C\u89E3\u91CA\u300D main memory address?</p><img src="https://pic.hanjiaming.com.cn/2021/04/08/a3495e9188da5.png" alt="image.png" title="image.png"><p>Example\uFF1As = 4 bits, r = 2 bits</p><ul><li><p>01 11 \u2014 11 determines which line you should go to</p></li><li><p>00 11, 01 11, 10 11, 11 11: the four blocks ending with 11 will go to the same line; they are differentiated by the tag (first two bits)</p></li><li><p>01 11 mod 4 = 3 \u2014 the line with line number 3</p></li></ul><h6 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h6><p>Summary of Mapping Function:</p><ul><li>given a memory address ( s + w) bits\uFF0Cwe know which block it is through the s bits\u300C\u6211\u4EEC\u901A\u8FC7s\u4F4D\u77E5\u9053\u5B83\u662F\u54EA\u4E2A\u5757\u300D <ul><li>among the s bits, there are r bits, which tell us the line number in Cache that stores this block\u300C\u5728s\u4F4D\u4E2D\uFF0C\u6709r\u4F4D\uFF0C\u5B83\u4EEC\u544A\u8BC9\u6211\u4EEC\u5B58\u50A8\u6B64\u5757\u7684Cache\u4E2D\u7684\u884C\u53F7\u300D</li><li>As there are more blocks than lines (s &gt; r), the remaining (s - r) bits serve as a tag for the Cache line, telling us which block this line is currently storing</li></ul></li></ul><p>Multiple Blocks to One Line\uFF1Aaddress s + w bits</p><ul><li>cache will interprete it as three fields: tag (s-r), line (r), word (w) <ul><li>line (r) determines which line in cache the block will map to</li><li>tag (s-r) determines the current block that line is storing CPU can directly check that line, and compare the tag field\u300C\u6BD4\u8F83\u6807\u7B7E\u5B57\u6BB5\u300D to determine whether the block is now in the cache</li></ul></li></ul><p>\u6CE8\uFF1Atag\u4E0D\u662F\u81EA\u5E26\u7684\uFF0C\u662F\u53EF\u4EE5\u88AB\u5199\u5165\u7684\u3002</p><p>How does CPU access a word?</p><ol><li>Given an address (s+w) bits</li><li>Use r bits to locate the line in Cache</li><li>Compare the (s-r) bits with the tag: <ul><li>if (s-r) match, the line stores the desired block; use w bits to identify the desired word</li><li>if (s-r) no match, access the memory, copy the block to the line</li></ul></li></ol><img src="https://pic.hanjiaming.com.cn/2021/04/08/3b73fd74b3948.png" alt="image.png" title="image.png"><h6 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h6><p>Settings\uFF1A</p><ul><li>word = one byte, block = 4 words (4 bytes)</li><li>main memory has 16 Mbytes (note: 1 MB = 1024 KB; 1 KB = 1024B); <ul><li>that is, 2^{24} bytes -&gt; 24 bits for the address</li><li>we have 2^{22} blocks -&gt; s = 22 bits, w = 2 bits</li></ul></li><li>cache has 64 KB = 2^{16} bytes</li></ul><p><strong>R = 14 bits,How many lines are there in the Cache?</strong></p><p>The number of lines are determined by the number of address.</p><p>2^{14} lines -&gt; among the 22 bits, r = 14 bits, 8 bits for the tag</p><h6 id="pros-and-cons" tabindex="-1"><a class="header-anchor" href="#pros-and-cons" aria-hidden="true">#</a> Pros and Cons</h6><ul><li>simple and inexpensive to implement</li><li>main disadvantage: muliptle blocks in memory are mapped to a fixed Cache line <ul><li>if a program happends to access words repeatedly from two different blocks that map into the same line</li><li>the two blocks will be continually swapped in the cache -- low hit ratio</li></ul></li></ul><h5 id="associative-mapping" tabindex="-1"><a class="header-anchor" href="#associative-mapping" aria-hidden="true">#</a> Associative Mapping</h5><p>Key difference from direct mapping:</p><ul><li>a block in memory can be mapped to any line in cache\u300C\u5185\u5B58\u4E2D\u7684\u4E00\u4E2A\u5757\u53EF\u4EE5\u6620\u5C04\u5230\u7F13\u5B58\u4E2D\u7684\u4EFB\u4F55\u884C\u300D</li><li>cache will interpret the address as two fields Tag and Word\u300C\u7F13\u5B58\u4F1A\u5C06\u5730\u5740\u89E3\u91CA\u4E3ATag\u548CWord\u4E24\u4E2A\u5B57\u6BB5\u300D <ul><li>address = s + w bits; 2^s blocks in memory</li><li>s serves as the tag, and it is stored together with the data\u300Cs\u4F5C\u4E3A\u6807\u7B7E\uFF0C\u5B83\u4E0E\u6570\u636E\u4E00\u8D77\u5B58\u50A8\u300D</li></ul></li><li>note: there is no field to determine the line number\u300C\u6CE8\u610F\uFF1A\u6CA1\u6709\u7528\u4E8E\u786E\u5B9A\u884C\u53F7\u7684\u5B57\u6BB5\u300D</li></ul><h6 id="associative-mapping-example" tabindex="-1"><a class="header-anchor" href="#associative-mapping-example" aria-hidden="true">#</a> Associative Mapping Example</h6><p>Settings:</p><ul><li>memory has 2^{22} blocks, each block has 4 bytes (data = 32 bits)</li><li>address is 24 bits = 22 bits (s) + 2 bits (w)</li><li>Tag: 22 bits</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/08/36cf701400133.png" alt="image.png" title="image.png"><h6 id="implementation-1" tabindex="-1"><a class="header-anchor" href="#implementation-1" aria-hidden="true">#</a> Implementation</h6><img src="https://pic.hanjiaming.com.cn/2021/04/08/33bb201d268c5.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/08/15af32c54ea74.png" alt="image.png" title="image.png"><p>A block can be mapped to any line in cache! What if the cache is full?</p><ul><li>For direct mapping, there is no choice.</li><li>For associative mapping, we need to decide which block should be replaced --- replacement algorithms</li></ul><p>The main disadvantage of associative mapping is the complex circuitry required to examine the tags of all cache lines in parallel\u300Cassociative mapping \u7684\u4E3B\u8981\u7F3A\u70B9\u662F\u9700\u8981 \u5E76\u884C\u68C0\u67E5 \u6240\u6709 cache \u884C\u7684\u6807\u7B7E\u7684 \u590D\u6742\u7535\u8DEF\u300D</p><h6 id="replacement-algorithms" tabindex="-1"><a class="header-anchor" href="#replacement-algorithms" aria-hidden="true">#</a> Replacement Algorithms</h6><p><strong>Least Recently Used (LRU)\u2014\u2014Most popular replacement algorithm</strong></p><ul><li>replace the block that has been in the cache longest with no reference to it</li><li>there requires some extra index to record the time when a line is referenced \u2013 the price need to pay</li><li>Simple for two-way set-associative mapping: use a single bit USE to indicate the most recently used line in the set</li></ul><p><strong>Other common replacement algorithms</strong></p><p>First-in-first-out (FIFO): replace that block in the set that has been in the cache longest (what&#39;s the difference from LRU)</p><p>Least Frequently Used (LFU): associate a counter to each line</p><p>Random (not based on usage): randomly pick one to replace \u2013 some papers show that Random is only slightly worse than previous usage-based algorithms</p><h5 id="set-associative-mapping" tabindex="-1"><a class="header-anchor" href="#set-associative-mapping" aria-hidden="true">#</a> Set-Associative Mapping</h5><p>not required</p><h3 id="write-policy" tabindex="-1"><a class="header-anchor" href="#write-policy" aria-hidden="true">#</a> Write Policy</h3><p>Why does inconsistency happen?</p><ul><li>multiple CPUs\u300C\u6BD4\u5982\u5728\u670D\u52A1\u5668\u4E2D\u300D: each CPU has its own cache, which may store the same block in memory</li><li>I/O can directly access main memory</li></ul><p>we need a policy to deal with such inconsistency\u300C\u6211\u4EEC\u9700\u8981\u4E00\u9879\u653F\u7B56\u6765\u5E94\u5BF9\u8FD9\u79CD\u77DB\u76FE\u300D</p><h4 id="write-policy-i-write-through" tabindex="-1"><a class="header-anchor" href="#write-policy-i-write-through" aria-hidden="true">#</a> Write Policy I - Write Through</h4><p>All writes go to cache as well as main memory</p><ul><li>multiple CPUs need to monitor main memory traffic to keep local (with respect to CPU) cache up to date</li><li>lots of traffic</li><li>slows down writes</li></ul><h4 id="write-policy-ii-write-back" tabindex="-1"><a class="header-anchor" href="#write-policy-ii-write-back" aria-hidden="true">#</a> Write Policy II - Write Back</h4><ul><li>Updates initially made in cache only, then memory</li><li>use an extra bit along with each cache line to indicate whether there&#39;s update in this line (set the bit if there&#39;s update)</li><li>when this cache line needs to be replaced, check this bit, write back to memory if the bit is set (such that updates are not lost)</li></ul><p>requirement: I/O has to access cache, not main memory directly</p><h3 id="exploiting-locality" tabindex="-1"><a class="header-anchor" href="#exploiting-locality" aria-hidden="true">#</a> Exploiting locality</h3><h4 id="hints-to-software-developers" tabindex="-1"><a class="header-anchor" href="#hints-to-software-developers" aria-hidden="true">#</a> Hints to software developers</h4><ul><li>Caching leverages locality, good locality make good use of cache\u300C\u7F13\u5B58\u5229\u7528\u4E86\u5C40\u90E8\u6027\uFF0C\u826F\u597D\u7684\u5C40\u90E8\u6027\u5145\u5206\u5229\u7528\u4E86\u9AD8\u901F\u7F13\u5B58\u300D</li><li>General principles to write programs with good locality\u300C\u7F16\u5199\u5177\u6709\u826F\u597D\u672C\u5730\u6027\u7684\u7A0B\u5E8F\u7684\u4E00\u822C\u539F\u5219\u300D <ul><li>Focus your attention on inner loops, where the CPU spends most of the time\u300C\u5C06\u6CE8\u610F\u529B\u96C6\u4E2D\u5728CPU\u5927\u90E8\u5206\u65F6\u95F4\u90FD\u5728\u5176\u4E2D\u7684\u5185\u5FAA\u73AF\u4E0A\u300D</li><li>Try to maximize the spatial locality by reading data objects sequentially, with stride 1, in the order they are stored in memory\u300C\u5C1D\u8BD5\u901A\u8FC7\u8DE8\u6B65\u8BFB\u53D6\u6570\u636E\u5BF9\u8C61\uFF08\u6B65\u957F\u4E3A1\uFF09\uFF0C\u4EE5\u5C06\u5B83\u4EEC\u5B58\u50A8\u5728\u5185\u5B58\u4E2D\u7684\u987A\u5E8F\u6765\u6700\u5927\u5316\u7A7A\u95F4\u5C40\u90E8\u6027</li><li>Try to maximize the temporal locality by using a data object as often as possible once it has been read from memory\u300C\u4ECE\u5185\u5B58\u4E2D\u8BFB\u53D6\u6570\u636E\u5BF9\u8C61\u540E\uFF0C\u5E94\u5C3D\u53EF\u80FD\u9891\u7E41\u5730\u4F7F\u7528\u5B83\u6765\u5C1D\u8BD5\u6700\u5927\u5316\u65F6\u95F4\u5C40\u90E8\u6027\u300D</li></ul></li></ul><h3 id="managing-caches" tabindex="-1"><a class="header-anchor" href="#managing-caches" aria-hidden="true">#</a> Managing caches</h3><p>Design considerations of caches</p><ul><li>Block size <ul><li>Bigger block size exploits spatial locality\u300C\u66F4\u5927\u7684\u5757\u5927\u5C0F\u5229\u7528\u7A7A\u95F4\u5C40\u90E8\u6027\u300D</li><li>Too big, bringing in many data that will not be used, waste of space and time\u300C\u592A\u5927\u4E86\uFF0C\u5E26\u6765\u4E86\u5F88\u591A\u65E0\u6CD5\u4F7F\u7528\u7684\u6570\u636E\uFF0C\u6D6A\u8D39\u4E86\u7A7A\u95F4\u548C\u65F6\u95F4\u300D</li></ul></li><li>Who is in, who is out? <ul><li>Replacement policy: if cache is full, new data going in, evict which data?\u300C\u66FF\u6362\u7B56\u7565\uFF1A\u5982\u679C\u7F13\u5B58\u5DF2\u6EE1\uFF0C\u5219\u6709\u65B0\u6570\u636E\u8FDB\u5165\uFF0C\u9010\u51FA\u54EA\u4E9B\u6570\u636E\uFF1F\u300D <ul><li>Intuition\u300C\u76F4\u89C9\u300D: keep the data being used in the near future in cache\u300C\u76F4\u89C9\uFF1A\u5C06\u6570\u636E\u5728\u4E0D\u4E45\u7684\u5C06\u6765\u4FDD\u5B58\u5728\u7F13\u5B58\u4E2D\u300DBut, how do we know which data will be used in the near future?\u300C\u4F46\u662F\uFF0C\u6211\u4EEC\u5982\u4F55\u77E5\u9053\u4E0D\u4E45\u7684\u5C06\u6765\u5C06\u4F7F\u7528\u54EA\u4E9B\u6570\u636E\uFF1F\u300D</li></ul></li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/07/64de54be53967.png" alt="image.png" title="image.png" width="240px"><ul><li>To efficiently find a data item in the cache <ul><li>Find 1 data in 1000 candidates? Takes too long!</li><li>Partition the cache into groups, map different data into different groups</li><li>To find a data item in a smaller group can be efficient, but space may not be fully utilized</li></ul></li></ul><h4 id="impacts-to-hw-design" tabindex="-1"><a class="header-anchor" href="#impacts-to-hw-design" aria-hidden="true">#</a> Impacts to HW design</h4><p>\u5BF9\u786C\u4EF6\u8BBE\u8BA1\u7684\u5F71\u54CD\u2013\u5B58\u50A8\u5C42\u6B21\u7ED3\u6784</p><img src="https://pic.hanjiaming.com.cn/2021/04/07/28b3ee018d930.png" alt="image.png" title="image.png"><ul><li>Conceptually\u300C\u4ECE\u6982\u5FF5\u4E0A\u8BB2\u300D, level K can be viewed as a cache of level K+1, storing a subset of K&#39;data in level K+1</li><li>If caching policies are smartly designed, most of the time, cache accesses will be hit</li><li>Pretty much like we have a memory system that works at a speed of the highest level, but have the storage space of the lowest level, with reasonably low price\u300C\u4ECE\u6982\u5FF5\u4E0A\u8BB2\uFF0C\u53EF\u4EE5\u5C06\u7EA7\u522BK\u89C6\u4E3A\u7EA7\u522BK + 1\u7684\u7F13\u5B58\uFF0C\u5C06\u6570\u636E\u7684\u5B50\u96C6\u5B58\u50A8\u5728\u7EA7\u522BK + 1\u4E2D \u5982\u679C\u5BF9\u7F13\u5B58\u7B56\u7565\u8FDB\u884C\u4E86\u7CBE\u5FC3\u8BBE\u8BA1\uFF0C\u90A3\u4E48\u5728\u5927\u591A\u6570\u60C5\u51B5\u4E0B\uFF0C\u7F13\u5B58\u8BBF\u95EE\u5C06\u53D7\u5230\u5F71\u54CD \u5C31\u50CF\u6211\u4EEC\u6709\u4E00\u4E2A\u5185\u5B58\u7CFB\u7EDF\u53EF\u4EE5\u4EE5\u6700\u9AD8\u7EA7\u522B\u7684\u901F\u5EA6\u5DE5\u4F5C\uFF0C\u4F46\u62E5\u6709\u6700\u4F4E\u7EA7\u522B\u7684\u5B58\u50A8\u7A7A\u95F4\u5E76\u4E14\u4EF7\u683C\u5374\u76F8\u5F53\u4F4E\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/07/00e40e65b1134.png" alt="image.png" title="image.png"><h2 id="replacement-policy" tabindex="-1"><a class="header-anchor" href="#replacement-policy" aria-hidden="true">#</a> Replacement Policy</h2><h3 id="lru-replacement" tabindex="-1"><a class="header-anchor" href="#lru-replacement" aria-hidden="true">#</a> LRU Replacement</h3><p>\u6700\u8FD1\u6700\u5C11\u4F7F\u7528</p><p>In the Least Recently Used (LRU) page replacement policy, the page that is used least recently will be replaced. Implementation: Add a register to every page frame - contain the last time that the page in that frame was accessed. Use a &quot;logical clock&quot; that advance by 1 tick each time a memory reference is made.\u300C\u5728\u6700\u8FD1\u6700\u5C11\u4F7F\u7528\uFF08LRU\uFF09\u9875\u9762\u66FF\u6362\u7B56\u7565\u4E2D\uFF0C\u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7684\u9875\u9762\u5C06\u88AB\u66FF\u6362\u3002\u5B9E\u73B0\uFF1A\u5728\u6BCF\u4E2A\u9875\u9762\u6846\u67B6\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u5BC4\u5B58\u5668-\u5305\u542B\u6700\u540E\u4E00\u6B21\u8BBF\u95EE\u8BE5\u6846\u67B6\u4E2D\u7684\u9875\u9762\u7684\u65F6\u95F4\u3002\u6BCF\u6B21\u4F7F\u7528\u5185\u5B58\u5F15\u7528\u65F6\uFF0C\u8BF7\u4F7F\u7528\u63D0\u524D1\u6EF4\u7B54\u7684\u201C\u903B\u8F91\u65F6\u949F\u201D\u3002\u300D</p><h3 id="fifo-replacement" tabindex="-1"><a class="header-anchor" href="#fifo-replacement" aria-hidden="true">#</a> FIFO Replacement</h3><p>\u5148\u8FDB\u5148\u51FA\uFF08FIFO\uFF09</p><p>The cache is managed with the FIFO replacement policy: when all the 3 cache blocks are used up and a new data block will be loaded into cache, one data block out of the 3 blocks will be replaced out of the cache. The data block that was earliest loaded into the cache will be replaced. We assume that at the very beginning, the cache is empty.\u300C\u9AD8\u901F\u7F13\u5B58\u901A\u8FC7FIFO\u66FF\u6362\u7B56\u7565\u8FDB\u884C\u7BA1\u7406\uFF1A\u5F533\u4E2A\u9AD8\u901F\u7F13\u5B58\u5757\u5168\u90E8\u7528\u5B8C\u5E76\u4E14\u65B0\u6570\u636E\u5757\u5C06\u88AB\u52A0\u8F7D\u5230\u9AD8\u901F\u7F13\u5B58\u4E2D\u65F6\uFF0C\u8FD93\u4E2A\u5757\u4E2D\u7684\u4E00\u4E2A\u6570\u636E\u5757\u5C06\u4ECE\u9AD8\u901F\u7F13\u5B58\u4E2D\u66FF\u6362\u3002\u6700\u65E9\u52A0\u8F7D\u5230\u7F13\u5B58\u4E2D\u7684\u6570\u636E\u5757\u5C06\u88AB\u66FF\u6362\u3002\u6211\u4EEC\u5047\u8BBE\u4E00\u5F00\u59CB\u7F13\u5B58\u5C31\u4E3A\u7A7A\u3002\u300D</p><p>\u4F7F\u7528\u6B64\u7B97\u6CD5\uFF0C\u9AD8\u901F\u7F13\u5B58\u6309\u6DFB\u52A0\u5757\u7684\u987A\u5E8F\u9010\u51FA\u8BE5\u5757\uFF0C\u800C\u65E0\u9700\u8003\u8651\u5B83\u4EEC\u4E4B\u524D\u88AB\u8BBF\u95EE\u8FC7\u7684\u9891\u7387\u6216\u6B21\u6570\u3002</p><h3 id="lifo-replacement" tabindex="-1"><a class="header-anchor" href="#lifo-replacement" aria-hidden="true">#</a> LIFO Replacement</h3><p>\u540E\u8FDB\u5148\u51FA\uFF08LIFO\uFF09</p><p>\u4F7F\u7528\u6B64\u7B97\u6CD5\uFF0C\u4E0EFIFO\u961F\u5217\u7684\u884C\u4E3A\u6070\u597D\u76F8\u53CD\u3002\u9AD8\u901F\u7F13\u5B58\u9010\u51FA\u6700\u5148\u6DFB\u52A0\u7684\u5757\uFF0C\u800C\u4E0E\u4E4B\u524D\u8BBF\u95EE\u5B83\u7684\u9891\u7387\u6216\u6B21\u6570\u65E0\u5173\u3002</p>',221);function n(l,s){return t}var c=e(i,[["render",n]]);export{c as default};
