import{_ as e,f as a}from"./app.23db12da.js";const i={},t=a('<h1 id="virtual-memory" tabindex="-1"><a class="header-anchor" href="#virtual-memory" aria-hidden="true">#</a> Virtual Memory</h1><h2 id="introduce" tabindex="-1"><a class="header-anchor" href="#introduce" aria-hidden="true">#</a> Introduce</h2><p>Problem: if a program requires 1GB main memory, but we have only 1MB physical main memory, how can execute the program?\u300C\u95EE\u9898\uFF1A\u5982\u679C\u4E00\u4E2A\u7A0B\u5E8F\u9700\u89811 GB\u7684\u4E3B\u5185\u5B58\uFF0C\u800C\u6211\u4EEC\u53EA\u67091 MB\u7684\u7269\u7406\u4E3B\u5185\u5B58\uFF0C\u90A3\u4E48\u5982\u4F55\u6267\u884C\u8BE5\u7A0B\u5E8F\uFF1F\u300D</p><ul><li>1K = 2^10 = 1024</li><li>1M = 2^20 = 1024 * K</li><li>1G = 2^30 = 1024 * M</li><li>1T = 2^40 = 1024 * G</li></ul><p>Virtual memory, a technique that allows to fit the 1GB program into the 1MB physical main memory so that the program can execute</p><h3 id="program-image" tabindex="-1"><a class="header-anchor" href="#program-image" aria-hidden="true">#</a> Program Image</h3><img src="https://pic.hanjiaming.com.cn/2021/04/12/27372e7e8f0d5.png" alt="image.png" title="image.png"><p>The program image is <strong>too large</strong> to be fit into the main memory</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/465d5e22644aa.png" alt="image.png" title="image.png"><h2 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> Process</h2><h3 id="executing-a-program" tabindex="-1"><a class="header-anchor" href="#executing-a-program" aria-hidden="true">#</a> Executing a program</h3><img src="https://pic.hanjiaming.com.cn/2021/04/12/0ecdca1996e51.png" alt="image.png" title="image.png"><h3 id="memory-access-in-program-execution" tabindex="-1"><a class="header-anchor" href="#memory-access-in-program-execution" aria-hidden="true">#</a> Memory access in program execution</h3><p>During execution, the CPU frequently goes to main memory to fetch data (instructions, data)\u300C\u5728\u6267\u884C\u671F\u95F4\uFF0CCPU\u7ECF\u5E38\u8FDB\u5165\u4E3B\u5B58\u50A8\u5668\u4EE5\u83B7\u53D6\u6570\u636E\uFF08\u6307\u4EE4\uFF0C\u6570\u636E\uFF09\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/98085294a7f6f.png" alt="image.png" title="image.png"><h2 id="paging" tabindex="-1"><a class="header-anchor" href="#paging" aria-hidden="true">#</a> Paging</h2><ul><li>Chunk the program image into virtual pages\u300C\u5C06\u7A0B\u5E8F\u6620\u50CF\u5206\u5757\u4E3A\u865A\u62DF\u9875\u9762\u300D</li><li>into physical pages, also called frames\u300C\u5C06\u4E3B\u5185\u5B58\u5206\u6210\u7269\u7406\u9875\u9762\uFF0C\u4E5F\u79F0\u4E3A\u6846\u67B6\u300D</li><li>Each time, load a page into a specific frame of the main memory\u300C\u6BCF\u6B21\u5C06\u9875\u9762\u52A0\u8F7D\u5230\u4E3B\u5B58\u50A8\u5668\u7684\u7279\u5B9A\u5E27\u4E2D\u300D</li></ul><p>Each time, load a page into a frame of the main memory</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/756daafbe10c7.gif" alt="CleanShot 2021-04-12 at 23.24.12.gif" title="CleanShot 2021-04-12 at 23.24.12.gif"><p>Page 2 will use the physical address that has been used by Page 0</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/a368ddf43940b.png" alt="image.png" title="image.png"><p>Issue 1: needs to remember which page is put into which frame Page table: a mapping from virtual pages to frames</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/d77b0fd8a7746.png" alt="image.png" title="image.png" width="300px"><p>Issue 2: if the memory is full, and a new page will be loaded, which old page to replace?</p><ul><li>Similar to cache</li><li>Many replacement policies, leveraging locality</li></ul><h3 id="page-table" tabindex="-1"><a class="header-anchor" href="#page-table" aria-hidden="true">#</a> Page table</h3><p>\u9875\u8868\u7684\u5927\u5C0F\u662F Number of page table entries\u300C\u9875\u8868\u6761\u76EE\u6570\u300D</p><p>\u4E00\u822C\u7684\uFF0C\u4E00\u884C\u6709\u4E00\u4E2A\u6761\u76EE\u300Centires\u300D</p><p>\u4F53\u79EF\u5927\u5C0F</p><ul><li>Page entry size = virtual page bits + physical page bits</li><li>Page table size = Number of page table entries * entries</li></ul><h2 id="general-address-translation" tabindex="-1"><a class="header-anchor" href="#general-address-translation" aria-hidden="true">#</a> General Address translation</h2><p>If I want to use a data item in my executable file, which has been loaded to main memory, how do I know the physical address of the data item?\u300C\u5982\u679C\u8981\u5728\u53EF\u6267\u884C\u6587\u4EF6\u4E2D\u4F7F\u7528\u5DF2\u52A0\u8F7D\u5230\u4E3B\u5B58\u50A8\u5668\u4E2D\u7684\u6570\u636E\u9879\uFF0C\u6211\u5982\u4F55\u77E5\u9053\u8BE5\u6570\u636E\u9879\u7684\u7269\u7406\u5730\u5740\uFF1F\u300D</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/c83c163dcb70b.png" alt="image.png" title="image.png"><p>To access \u201CG\u201D in physical main memory</p><ul><li>That is, to determine the physical address of \u201CG\u201D</li><li>Which page is \u201CG\u201D in? -&gt; page 1</li><li>Where is page 1 loaded to? -&gt; frame 3</li><li>What\u2019s G\u2019s offset in page 1? -&gt; 0x10 away for the start of page 1</li><li>Physical address = start address of frame 3 + G\u2019s offset <ul><li>0x0100 + 0x10 = 0x0110</li></ul></li><li>Go to main memory with address 0x0110, you will get data item G</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/264a7ec07952c.png" alt="image.png" title="image.png"><h3 id="general-steps" tabindex="-1"><a class="header-anchor" href="#general-steps" aria-hidden="true">#</a> General steps</h3><p>\u6211\u4EEC\u5728\u7CFB\u7EDF\u5C42\u9762\u770B\u5230\u7684\u90FD\u662F\u865A\u62DF\u5730\u5740\u3002</p><ul><li>Virtual address (x) \u7531 page number (x) \u548C offset (x) \u7EC4\u6210</li><li>Check page table, page number (x) -&gt; frame number (x)</li><li>Frame number (x) -&gt; starting address (x)</li><li>Starting address (x) + offset (x) = physical address (x)</li></ul><p>If we want to access \u201Cb\u201D which is in page 2. When we check the page table, do not find page 2 (page fault)</p><ul><li>page 2 has not been loaded into physical memory</li><li>load page 2 into main memory</li><li>if no space, kick out some old page</li><li>do address translation for b, get b\u2019s physical address</li><li>fetch b from main memory to CPU</li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><ul><li>Assume we use 24bits for an Virtual address</li><li>Assume the first virtual page/physical page is numbered from 0</li><li>In a paging system, the size of one page is <strong>1KB</strong></li></ul><p>1KB = 1024 Bytes = 2^10 bytes \u6211\u4EEC\u9700\u898110\u4F4D\u6765\u5B58\u50A8 offset (x)</p><p>\u5269\u4E0B\u7684 24-10 = 14\u4F4D \u6765\u5B58\u50A8Page number</p><img src="https://pic.hanjiaming.com.cn/2021/04/27/79c3c0aa421cd.png" alt="image.png" title="image.png" width="500px"><img src="https://pic.hanjiaming.com.cn/2021/04/27/ea9d310438c02.png" alt="image.png" title="image.png" width="500px"><p>\u5728Page Table\u91CC\uFF0C\u6211\u4EEC\u53EA\u9700\u8BB0\u5F55 Virtual Page Number \u3002\u5728\u6BCF\u4E2APage\u91CC\uFF0C\u6BCF\u4E2A\u6761\u76EE\u7684\u524D14\u4F4D\u76F8\u540C\u3002</p><img src="https://pic.hanjiaming.com.cn/2021/04/27/4778824fe581e.png" alt="image.png" title="image.png"><p>offset \u7528\u4E8E\u8868\u793A\u504F\u5DEE</p><img src="https://pic.hanjiaming.com.cn/2021/04/27/801e87826c490.png" alt="image.png" title="image.png"><h3 id="memory-management-unit" tabindex="-1"><a class="header-anchor" href="#memory-management-unit" aria-hidden="true">#</a> Memory Management Unit</h3><p>Address translation is done by a special hardware in CPU called Memory Management Unit (MMU)\u300C\u5730\u5740\u8F6C\u6362\u7531CPU\u4E2D\u79F0\u4E3A\u5185\u5B58\u7BA1\u7406\u5355\u5143\uFF08MMU\uFF09\u7684\u7279\u6B8A\u786C\u4EF6\u5B8C\u6210\u3002\u300D</p><ul><li>Address translation is too complex and slow</li><li>We need a fast worker to do the job</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/39cb0eaf72110.png" alt="image.png" title="image.png"><h3 id="translation-lookaside-buffer" tabindex="-1"><a class="header-anchor" href="#translation-lookaside-buffer" aria-hidden="true">#</a> Translation lookaside buffer</h3><p>Accessing page table in main memory is slow</p><p>Translation lookaside buffer (TLB): a cache for page table in the CPU chip</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/c79e4bff4996e.png" alt="image.png" title="image.png"><h2 id="other-question" tabindex="-1"><a class="header-anchor" href="#other-question" aria-hidden="true">#</a> Other question</h2><p>VM as a way for memory management\u300CVM\u4F5C\u4E3A\u5185\u5B58\u7BA1\u7406\u7684\u4E00\u79CD\u65B9\u5F0F\u300D</p><ul><li>The need for memory management <ul><li>There are multiple processes in the system sharing the memory</li><li>Memory space is generally insufficient for all the processes</li></ul></li><li>Targets of memory management <ul><li>How to allocate memory space to concurrent processes?\u300C\u5982\u4F55\u4E3A\u5E76\u53D1\u8FDB\u7A0B\u5206\u914D\u5185\u5B58\u7A7A\u95F4\uFF1F\u300D <ul><li>Space efficiency</li></ul></li><li>How to provide protection so that process A cannot access the data of process B?\u300C\u5982\u4F55\u63D0\u4F9B\u4FDD\u62A4\uFF0C\u4EE5\u4F7F\u8FDB\u7A0BA\u65E0\u6CD5\u8BBF\u95EE\u8FDB\u7A0BB\u7684\u6570\u636E\uFF1F\u300D</li></ul></li></ul><h3 id="memory-allocation-to-multiple-processes" tabindex="-1"><a class="header-anchor" href="#memory-allocation-to-multiple-processes" aria-hidden="true">#</a> Memory allocation to multiple processes</h3><p>Memory allocation for multiple processes\u300C\u591A\u4E2A\u8FDB\u7A0B\u7684\u5185\u5B58\u5206\u914D\u300D</p><ul><li>Each process can use a specific amount of physical pages\u300C\u6BCF\u4E2A\u8FC7\u7A0B\u53EF\u4EE5\u4F7F\u7528\u7279\u5B9A\u6570\u91CF\u7684\u7269\u7406\u9875\u9762\u300D</li><li>Each virtual page can be mapped to any physical page\u300C\u6BCF\u4E2A\u865A\u62DF\u9875\u9762\u90FD\u53EF\u4EE5\u6620\u5C04\u5230\u4EFB\u4F55\u7269\u7406\u9875\u9762\u300D</li><li>A virtual page can be stored in different physical pages at different times\u300C\u865A\u62DF\u9875\u9762\u53EF\u4EE5\u5728\u4E0D\u540C\u65F6\u95F4\u5B58\u50A8\u5728\u4E0D\u540C\u7684\u7269\u7406\u9875\u9762\u4E2D\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/2186dff0b0798.png" alt="image.png" title="image.png"><h3 id="memory-protection" tabindex="-1"><a class="header-anchor" href="#memory-protection" aria-hidden="true">#</a> Memory protection</h3><ul><li>Extend page table entries with permission bits</li><li>MMU will check these bits on each access</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/83eb5ce4447a4.png" alt="image.png" title="image.png"><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>COMP1411&#39;s PowerPoint</li></ul>',71);function n(r,l){return t}var o=e(i,[["render",n]]);export{o as default};
