import{_ as n,f as s}from"./app.cb06bc71.js";const a={},t=s(`<h1 id="block-collection" tabindex="-1"><a class="header-anchor" href="#block-collection" aria-hidden="true">#</a> Block Collection</h1><h2 id="\u5B9A\u4E49-\u58F0\u660E-\u548C-\u8D4B\u503C\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49-\u58F0\u660E-\u548C-\u8D4B\u503C\u53D8\u91CF" aria-hidden="true">#</a> \u5B9A\u4E49(\u58F0\u660E) \u548C \u8D4B\u503C\u53D8\u91CF</h2><table><thead><tr><th></th><th>\u5BF9\u6216\u8005\u9519\uFF0C\u9519\u8BEF\u539F\u56E0</th></tr></thead><tbody><tr><td>int 3;</td><td>cannot start with digit int a=3;</td></tr><tr><td>double;</td><td>double b;</td></tr><tr><td>int = 19;</td><td>int c=19;</td></tr><tr><td>float myten = 10.23;</td><td>\u6B63\u786E</td></tr><tr><td>double_sum = 2.2;</td><td>double sum = 2.2;</td></tr><tr><td>int that_value 212;</td><td>int that_value = 212;</td></tr></tbody></table><table><thead><tr><th>Invalid variable naming</th><th>Valid variable naming</th><th>Description</th></tr></thead><tbody><tr><td>int monthly income</td><td>int monthly_income</td><td>Monthly income of integer type</td></tr><tr><td>---</td><td>int counter**;**</td><td>Counter of integer type</td></tr><tr><td>double %scale</td><td>double scale**;**</td><td>Scale of double type</td></tr><tr><td>---</td><td>double bike_sales**;**</td><td>Sales of bike of double type</td></tr></tbody></table><table><thead><tr><th>Program Segment</th><th>User input</th><th>Answer</th></tr></thead><tbody><tr><td>int first, second, third;cin &gt;&gt; first &gt;&gt; second &gt;&gt; third;</td><td>24 25 26</td><td>\u6B63\u786E</td></tr><tr><td>double fourth, fifth, sixth;cin &gt;&gt; fourth &gt;&gt; fifth &gt;&gt; sixth;</td><td>24.4 25.5 26</td><td>\u6B63\u786E</td></tr><tr><td>int seventh, eighth, ninth;cin &gt;&gt; seventh &gt;&gt; eighth &gt;&gt; ninth;</td><td>24.4 25.5 26.6</td><td>\xD7</td></tr><tr><td>double tenth, eleventh, twelfth;cin &gt;&gt; tenth &gt;&gt; eleventh &gt;&gt; twelfth;</td><td>23.4 24.5</td><td>\xD7</td></tr></tbody></table><p>\u63D0\u793A\uFF1A\u957F\u4F4D\u5411\u6BB5\u4F4D\u517C\u5BB9</p><table><thead><tr><th>Program Segment</th><th>Answer</th></tr></thead><tbody><tr><td>int d = 4;</td><td>\u221A</td></tr><tr><td>double a; int d = d * (6 + d);</td><td>\xD7</td></tr><tr><td>double d = &quot;3&quot;;</td><td>\xD7</td></tr></tbody></table><h2 id="\u8BA1\u7B97\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u7B97\u8BED\u53E5" aria-hidden="true">#</a> \u8BA1\u7B97\u8BED\u53E5</h2><table><thead><tr><th>Program Segment</th><th>Answer</th></tr></thead><tbody><tr><td>int z = 9 + 2;</td><td>11</td></tr><tr><td>int z = 9 - 2;</td><td>7</td></tr><tr><td>int z = 5 * 2;</td><td>10</td></tr><tr><td>int z = 8 / 4;</td><td>2</td></tr><tr><td>int z = 9 / 4;</td><td><strong>2</strong></td></tr><tr><td>double z = 9 / 4;</td><td><strong>2</strong></td></tr><tr><td>int z = 222 / 300;</td><td>0</td></tr><tr><td>double z = 222.0 / 300.0;</td><td>0.74</td></tr><tr><td>int z = 222 / 300.00;</td><td>0</td></tr><tr><td>double z = pow(3, 6);</td><td><strong>729</strong></td></tr></tbody></table><h3 id="\u5E38\u7528\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u5E38\u7528\u4EE3\u7801" aria-hidden="true">#</a> \u5E38\u7528\u4EE3\u7801</h3><h4 id="\u6570\u7EC4\u4ECE\u5927\u5230\u5C0F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u4ECE\u5927\u5230\u5C0F\u6392\u5E8F" aria-hidden="true">#</a> \u6570\u7EC4\u4ECE\u5927\u5230\u5C0F\u6392\u5E8F</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span>
using namespace std<span class="token punctuation">;</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> ARRAY_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> data<span class="token punctuation">[</span>ARRAY_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> insert<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Data items in original order\\n&quot;</span><span class="token punctuation">;</span> 
  
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ARRAY_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> next <span class="token operator">&lt;</span> ARRAY_SIZE<span class="token punctuation">;</span> next<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		insert <span class="token operator">=</span> data<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> moveItem <span class="token operator">=</span> next<span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>moveItem <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>moveItem <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> insert<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6539\u6210\u5927\u4E8E\u53F7\u540E\u53D8\u6210\u7531\u5C0F\u5230\u5927\u6392\u5E8F</span>
    	data<span class="token punctuation">[</span>moveItem<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>moveItem <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			moveItem<span class="token operator">--</span><span class="token punctuation">;</span>
  		<span class="token punctuation">}</span>
    
		data<span class="token punctuation">[</span>moveItem<span class="token punctuation">]</span> <span class="token operator">=</span> insert<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nData items in new order\\n&quot;</span><span class="token punctuation">;</span> 
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ARRAY_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  	<span class="token punctuation">}</span>
  
	cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="\u7EDF\u8BA1\u4E00\u4E2A\u8303\u56F4\u5185\u7684\u8D28\u6570\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#\u7EDF\u8BA1\u4E00\u4E2A\u8303\u56F4\u5185\u7684\u8D28\u6570\u4E2A\u6570" aria-hidden="true">#</a> \u7EDF\u8BA1\u4E00\u4E2A\u8303\u56F4\u5185\u7684\u8D28\u6570\u4E2A\u6570</h4><p>Counting Prime Numbers</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

bool <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> false<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">countPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// general case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">countPrime</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">countPrime</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> input<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please enter an integer: &quot;</span><span class="token punctuation">;</span> 
cin <span class="token operator">&gt;&gt;</span> input<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Total number of prime between 1 and &quot;</span> <span class="token operator">&lt;&lt;</span> input <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">countPrime</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="\u4E09\u76EE\u8FD0\u7B97" tabindex="-1"><a class="header-anchor" href="#\u4E09\u76EE\u8FD0\u7B97" aria-hidden="true">#</a> \u4E09\u76EE\u8FD0\u7B97</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//b\u5927\u4E8Ec\uFF0C\u6240\u4EE5a=b=3</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a=&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> b <span class="token operator">&gt;</span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">;</span>      <span class="token comment">//b\u5C0F\u4E8Ec\uFF0C\u6240\u4EE5a=c=2</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a=&quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="call-by-pointer" tabindex="-1"><a class="header-anchor" href="#call-by-pointer" aria-hidden="true">#</a> Call by Pointer</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">swp</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span> xp<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">*</span> yp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token operator">*</span>xp<span class="token punctuation">;</span>
    <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token operator">*</span>yp<span class="token punctuation">;</span>
    <span class="token operator">*</span>xp <span class="token operator">=</span> t1<span class="token punctuation">;</span>
    <span class="token operator">*</span>yp <span class="token operator">=</span> t0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">swp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="size-of" tabindex="-1"><a class="header-anchor" href="#size-of" aria-hidden="true">#</a> size of()</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of char : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of short : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of int : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of long  : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of float : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of double : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of long double : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Size of bool : &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u7ED3\u679C\uFF08\u5355\u4F4D\u4E3Abyte\uFF09</p><blockquote><p>Size of char : 1 Size of short : 2 Size of int : 4 Size of long : 8 Size of float : 4 Size of double : 8 Size of long double : 16 Size of bool : 1</p></blockquote><p>sizeof() \u4E0D\u9700\u8981\u7528\u5230\u5176\u4ED6\u4EFB\u4F55\u5E93</p>`,25);function p(e,o){return t}var l=n(a,[["render",p]]);export{l as default};
