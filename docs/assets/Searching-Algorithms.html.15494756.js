import{_ as n,f as s}from"./app.9c46293c.js";const a={},e=s(`<h1 id="searching-algorithms" tabindex="-1"><a class="header-anchor" href="#searching-algorithms" aria-hidden="true">#</a> Searching Algorithms</h1><h2 id="goal" tabindex="-1"><a class="header-anchor" href="#goal" aria-hidden="true">#</a> Goal</h2><p>Given an array A of n numbers (in ascending order)</p><ul><li>Find the position of a key k from the array A</li><li>return \u20131 if not found</li></ul><p>A: | 1 | 3 | 8 | 12 | 17 | 23 | 35</p><h2 id="algorithm-1-linear-search" tabindex="-1"><a class="header-anchor" href="#algorithm-1-linear-search" aria-hidden="true">#</a> Algorithm 1: Linear search</h2><p>Assume k appears at most once in the array. Once k is found, the algorithm stops.</p><ul><li>Best Case: K is in the first element</li><li>Worse Case: K is in the last element; element not found</li><li>Average case: Half of the array is searched</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    returni<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>Worse Case: O(n): K is in the last element/element not found</li><li>Best Case: O(1): K is in the first element</li><li>Average case: O(n): Half of the array is searched</li><li>Overall, the running time of linear search is O(n): Most of the time we are interested in the worse case: You know for certain that the algorithm must perform at least that well\u300C\u603B\u4F53\u800C\u8A00\uFF0C\u7EBF\u6027\u641C\u7D22\u7684\u8FD0\u884C\u65F6\u95F4\u4E3AO\uFF08n\uFF09\uFF1A\u5728\u5927\u591A\u6570\u60C5\u51B5\u4E0B\uFF0C\u6211\u4EEC\u5BF9\u6700\u574F\u7684\u60C5\u51B5\u611F\u5174\u8DA3\uFF1A\u60A8\u53EF\u4EE5\u80AF\u5B9A\u5730\u77E5\u9053\u8BE5\u7B97\u6CD5\u81F3\u5C11\u5FC5\u987B\u8868\u73B0\u5F97\u5F88\u597D\u300D</li></ul><h2 id="algorithm-2-binary-search" tabindex="-1"><a class="header-anchor" href="#algorithm-2-binary-search" aria-hidden="true">#</a> Algorithm 2: Binary search</h2><ul><li>Suppose someone picks a number k between 1 and 100</li><li>You are allowed to ask questions of the form \u201CIs k greater than x\u201D, where x is an integer you choose</li><li>Ask as few questions as possible</li></ul><p><strong>Binary search for a sorted array</strong></p><ul><li>Comparing a search key K with the array\u2019s middle element A[m]\u300C\u5C06\u641C\u7D22\u952EK\u4E0E\u6570\u7EC4\u7684\u4E2D\u95F4\u5143\u7D20A [m]\u8FDB\u884C\u6BD4\u8F83\u300D <ul><li>If they match, the algorithm stops;\u300C\u5982\u679C\u5B83\u4EEC\u5339\u914D\uFF0C\u5219\u7B97\u6CD5\u505C\u6B62\u300D</li><li>Otherwise, the same operation is repeated for the first half of the array if K &lt;A[m] , or for the second half if K&gt;A[m]</li></ul></li><li>When to stop: If the remaining array to be searched is empty, then the key cannot be found and return -1\u300C\u5982\u679C\u8981\u641C\u7D22\u7684\u5176\u4F59\u6570\u7EC4\u4E3A\u7A7A\uFF0C\u5219\u627E\u4E0D\u5230\u952E\u5E76\u8FD4\u56DE-1\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/05/13/990cd785d8d30.png" alt="1620891792710.png" title="1620891792710.png"><h3 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//init the array and target value</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

    <span class="token comment">// sort the array</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> ARRAY_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> data <span class="token operator">=</span> arr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> insert<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> next <span class="token operator">&lt;</span> ARRAY_SIZE<span class="token punctuation">;</span> next<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        insert <span class="token operator">=</span> data<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> moveItem <span class="token operator">=</span> next<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>moveItem <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>moveItem <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> insert<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">[</span>moveItem<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>moveItem <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            moveItem<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        data<span class="token punctuation">[</span>moveItem<span class="token punctuation">]</span> <span class="token operator">=</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// show the sorted array</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// search</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span> ARRAY_SIZE<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
        m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><img src="https://pic.hanjiaming.com.cn/2021/05/13/cd8b27066aa84.png" alt="1620891910294.png" title="1620891910294.png"><img src="https://pic.hanjiaming.com.cn/2021/05/13/3d9e44365568c.png" alt="1620891946016.png" title="1620891946016.png"><h3 id="time-complexity-of-binary-search" tabindex="-1"><a class="header-anchor" href="#time-complexity-of-binary-search" aria-hidden="true">#</a> Time complexity of binary search</h3><ul><li>Basic operation: The number of times the search key is compared with an element of the array\u300C\u641C\u7D22\u952E\u4E0E\u6570\u7EC4\u5143\u7D20\u8FDB\u884C\u6BD4\u8F83\u7684\u6B21\u6570\u300D</li><li>Assume three-way comparison: after one comparison of K with A[m], the algorithm can determine whether K is smaller, equal to, or larger than A[m]\u300C\u5728\u5C06K\u4E0EA [m]\u8FDB\u884C\u4E00\u6B21\u6BD4\u8F83\u4E4B\u540E\uFF0C\u8BE5\u7B97\u6CD5\u53EF\u4EE5\u786E\u5B9AK\u662F\u5C0F\u4E8E\uFF0C\u7B49\u4E8E\u8FD8\u662F\u5927\u4E8EA [m]\u300D</li><li>Worse case: The key is not in the array\u300C\u5BC6\u94A5\u4E0D\u5728\u6570\u7EC4\u4E2D\u300D</li></ul><img src="https://pic.hanjiaming.com.cn/2021/05/13/bf5395c442ba5.png" alt="1620892133875.png" title="1620892133875.png"><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>COMP1011 @ PolyU&#39;s PowerPoint</li></ul>`,25);function p(t,o){return e}var l=n(a,[["render",p]]);export{l as default};
