import{_ as t,f as e}from"./app.7b38032b.js";const a={},i=e('<h1 id="combinational-logic-1" tabindex="-1"><a class="header-anchor" href="#combinational-logic-1" aria-hidden="true">#</a> Combinational Logic 1</h1><h2 id="digital-logic" tabindex="-1"><a class="header-anchor" href="#digital-logic" aria-hidden="true">#</a> Digital Logic</h2><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h3><p>Digital Logic \u6570\u5B57\u903B\u8F91</p><p>\u8BA1\u7B97\u673A\u4E2D\u7684\u64CD\u4F5C\u57FA\u4E8E\u6570\u5B57/\u4E8C\u8FDB\u5236\u6570\u636E\u7684\u5904\u7406\u3002</p><img src="https://pic.hanjiaming.com.cn/2021/02/23/4bf230b6788be.png" alt="CleanShot 2021-02-23 at 21.39.49@2x.png" title="CleanShot 2021-02-23 at 21.39.49@2x.png"><p>\u6570\u5B57\u903B\u8F91\uFF1A\u5206\u6790\u8BA1\u7B97\u673A\u7CFB\u7EDF\u4E2D\u7684\u79BB\u6563(discrete)/\u4E8C\u8FDB\u5236\u6570\u636E</p><ul><li>\u5C06\u73B0\u5B9E\u4E16\u754C\u7684\u4FE1\u53F7(signals)\u8868\u793A\u4E3A\u4E8C\u8FDB\u5236\u6570\u636E</li><li>\u5BF9\u4E8C\u8FDB\u5236\u6570\u636E\u8FDB\u884C\u903B\u8F91\u8FD0\u7B97</li><li>\u6570\u5B57\u7535\u8DEF(gigital circuit)\u7684\u8BBE\u8BA1(implement)\u548C\u5B9E\u73B0\uFF1A\u903B\u8F91\u95E8(logic gates)\uFF0C\u57FA\u672C\u7EC4\u4EF6\uFF08\u52A0\u6CD5\u5668\u300Cadder\u300D\uFF0C\u89E3\u7801\u5668\u300Cdecoder\u300D\u7B49\uFF09\uFF0C\u7535\u8DEF\uFF08circuits\uFF09</li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>\u73B0\u5B9E\u95EE\u9898\uFF1A\u8003\u8651\u4E00\u4E2A0\u52309\u5C42\u7684\u7535\u68AF\uFF0C\u5982\u679C\u60A8\u6309\u4E00\u4E2A\u6309\u94AE\uFF080-9\uFF09\uFF0C\u5219\u8981\u663E\u793A\u6570\u5B57\uFF0CHow to implement(\u5B9E\u73B0) this real-world functionality(\u529F\u80FD)?</p><img src="https://pic.hanjiaming.com.cn/2021/02/23/157ce2a2563dd.png" alt="CleanShot 2021-02-23 at 21.46.58@2x.png" title="CleanShot 2021-02-23 at 21.46.58@2x.png"><p>\u4F7F\u7528\u7EC4\u5408\u903B\u8F91\u5B9E\u73B0</p><img src="https://pic.hanjiaming.com.cn/2021/02/23/0661de87886d6.png" alt="CleanShot 2021-02-23 at 21.48.05@2x.png" title="CleanShot 2021-02-23 at 21.48.05@2x.png"><img src="https://pic.hanjiaming.com.cn/2021/02/23/3fd69df908fcf.png" alt="CleanShot 2021-02-23 at 21.49.09@2x.png" title="CleanShot 2021-02-23 at 21.49.09@2x.png"><h3 id="the-overview" tabindex="-1"><a class="header-anchor" href="#the-overview" aria-hidden="true">#</a> The Overview</h3><img src="https://pic.hanjiaming.com.cn/2021/02/23/1979434c89151.png" alt="CleanShot 2021-02-23 at 21.53.53@2x.png" title="CleanShot 2021-02-23 at 21.53.53@2x.png"><h2 id="boolean-algebra" tabindex="-1"><a class="header-anchor" href="#boolean-algebra" aria-hidden="true">#</a> Boolean Algebra</h2><p>In working with logic relations in digital form, we need a set of rules for symbolic manipulation which will enable us to simplify complex expressions and solve for unknowns. Originally, Boolean algebra which was formulated by George Boole, an English mathematician (1815-1864) described propositions whose outcome would be either true or false. In computer work it is used in addition to describe circuits whose state can be either 1 (true) or 0 (false).Using the relations defined in the AND, OR and NOT operation......</p><p>Boolean Algebra is useful from both aspects(\u4ECE\u4E24\u4E2A\u65B9\u9762\u6765\u8BB2)</p><ul><li><p>implementation (design of digital circuit): given a desired boolean function, Boolean algebra can be applied to develop a simplified implementation of that function\u300C\u5B9E\u73B0\uFF08\u6570\u5B57\u7535\u8DEF\u8BBE\u8BA1\uFF09\uFF1A\u7ED9\u5B9A\u6240\u9700\u7684\u5E03\u5C14\u51FD\u6570\uFF0C\u5E03\u5C14\u4EE3\u6570\u53EF\u7528\u4E8E\u5F00\u53D1\u8BE5\u51FD\u6570\u7684\u7B80\u5316\u5B9E\u73B0\u300D</p></li><li><p>analysis: Boolean algebra provides an efficient way to describe the function of a digital circuit\u300C\u5206\u6790\uFF1A\u5E03\u5C14\u4EE3\u6570\u63D0\u4F9B\u4E86\u4E00\u79CD\u63CF\u8FF0\u6570\u5B57\u7535\u8DEF\u529F\u80FD\u7684\u6709\u6548\u65B9\u6CD5\u300D</p></li><li><p><strong>P1 : X = 0 or X = 1</strong></p></li><li><p><strong>P2 : 0 0 = 0</strong></p></li><li><p><strong>P3 : 1 + 1 = 1</strong></p></li><li><p><strong>P4 : 0 + 0 = 0</strong></p></li><li><p><strong>P5 : 1 1 = 1</strong></p></li><li><p><strong>P6 : 1 0 = 0 1 = 0</strong></p></li><li><p><strong>P7 : 1 + 0 = 0 + 1 = 1</strong></p></li></ul><h3 id="variables-and-logic-operations" tabindex="-1"><a class="header-anchor" href="#variables-and-logic-operations" aria-hidden="true">#</a> Variables and Logic Operations</h3><p>A variable may take on the value 1 (True) or 0 (False)</p><h4 id="basic-logical-operations" tabindex="-1"><a class="header-anchor" href="#basic-logical-operations" aria-hidden="true">#</a> Basic logical operations</h4><img src="https://pic.hanjiaming.com.cn/2021/02/24/d6bd9d1bec107.png" alt="CleanShot 2021-02-24 at 11.12.40@2x.png" title="CleanShot 2021-02-24 at 11.12.40@2x.png"><p><strong>\u5F18\u6811\u7684\u6279\u6CE8\uFF1A\u4E58\u53F7\uFF08and\uFF09\u8868\u793A\u4E14\uFF0C\u52A0\u53F7\uFF08or\uFF09\u8868\u793A\u6216\u3002\u975E\u4E14\uFF08XAND\uFF09\uFF0C\u975E\u6216\uFF08NOR\uFF09\u3002\u601D\u60F3\u4E0ANOR\u8868\u793A\u5148\u6216\u518D\u5168\u5426</strong></p><img src="https://pic.hanjiaming.com.cn/2021/02/24/666f2bb529cd4.png" alt="CleanShot 2021-02-24 at 11.16.10@2x.png" title="CleanShot 2021-02-24 at 11.16.10@2x.png"><h3 id="switching-functions" tabindex="-1"><a class="header-anchor" href="#switching-functions" aria-hidden="true">#</a> Switching Functions</h3><p>We can use all the logical operations to construct a switching function Z = f (A,B, C, \u2026)</p><ul><li><p>input takes value 0 or 1, output also takes value 0 or 1 \u2014 this is why it\u2019s called \u201Cswitch\u201D</p></li><li><p>switch function defines a mapping from a combination of input values to an output value</p></li></ul><p>example Z = f (A,B); there are four different combinations of input values (0,0), (0,1), (1,0), (1,1) \u2014 different way of mapping defines different switching functions</p><h3 id="truth-table" tabindex="-1"><a class="header-anchor" href="#truth-table" aria-hidden="true">#</a> Truth Table</h3><p>A truth table defines the mapping from the combination of input values to output</p><img src="https://pic.hanjiaming.com.cn/2021/02/24/1c30f24588e96.png" alt="CleanShot 2021-02-24 at 11.40.37@2x.png" title="CleanShot 2021-02-24 at 11.40.37@2x.png"><p>Consider switching functions defined over N variables, how many possible switching functions could we have?</p><p>That is, how many different truth tables can we construct?</p><p>Hint: first check how many rows in the truth table (= number of combinations of input values)</p><img src="https://pic.hanjiaming.com.cn/2021/02/24/365b213c51b28.png" alt="CleanShot 2021-02-24 at 11.45.04@2x.png" title="CleanShot 2021-02-24 at 11.45.04@2x.png"><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3><p>Properties\u300C\u7279\u6027\u300D</p><h4 id="basic-postulates-\u2014-stated-without-proof" tabindex="-1"><a class="header-anchor" href="#basic-postulates-\u2014-stated-without-proof" aria-hidden="true">#</a> Basic Postulates \u2014 stated without proof</h4><p>Basic Postulates\u2014 stated without proof\u300C\u516C\u7406\uFF0C\u65E0\u9700\u8BC1\u660E\u300D</p><ul><li>some other properties that could be proved from postulates</li><li>in any case, you can check this properties by truth table</li></ul><p>note the difference from ordinary algebra: some are very similar; others are quite different</p><h4 id="basic-postulates" tabindex="-1"><a class="header-anchor" href="#basic-postulates" aria-hidden="true">#</a> Basic Postulates</h4><p>The under table provides the basic postulates. Each theorem is described by two parts that are duals of each other.</p><img src="https://pic.hanjiaming.com.cn/2021/02/24/a54cc685e5378.png" alt="CleanShot 2021-02-24 at 12.14.18@2x.png" title="CleanShot 2021-02-24 at 12.14.18@2x.png"><ul><li>Commutative law\uFF08\u4EA4\u6362\u5F8B\uFF09 implies that the order of the input does not matter (image two wires to a gate)</li><li>Distributive law: similar to algebra, multiplication (AND) has the distributive property over adding (OR); different to algebra, OR has the distributive property over AND \u2014 A +BC = (A+B)(A+C)</li></ul><h4 id="duality" tabindex="-1"><a class="header-anchor" href="#duality" aria-hidden="true">#</a> Duality</h4><p>The <strong>dual</strong> of a Boolean expression is the expression one obtains by interchanging addition and multiplication and interchanging 0&#39;s and 1&#39;s.\u300C\u5E03\u5C14\u8868\u8FBE\u5F0F\u7684\u5BF9\u5076\u662F\u901A\u8FC7\u4E92\u6362\u52A0\u6CD5\u548C\u4E58\u6CD5\u4EE5\u53CA\u4E92\u63620\u548C1\u83B7\u5F97\u7684\u8868\u8FBE\u5F0F\u3002\u300D</p><p><strong>If one expression is correct, its dual is also correct</strong></p><p>Example, in the previous table, AB = BA and A+B = B+A</p><p><strong>How to get the dual of an expression?</strong></p><ul><li>replace AND with OR; replace OR with AND</li><li>replace constant 1 with 0; replace constant 0 with 1</li><li>check duality in the previous table</li></ul><h4 id="other-properties" tabindex="-1"><a class="header-anchor" href="#other-properties" aria-hidden="true">#</a> Other Properties</h4><p>Note the duality in the first and second column (for NOT, there\u2019s no dual operation, thus no duality)</p><img src="https://pic.hanjiaming.com.cn/2021/02/24/372d079aec41e.png" alt="CleanShot 2021-02-24 at 12.31.57@2x.png" title="CleanShot 2021-02-24 at 12.31.57@2x.png"><p><strong>De Morgan&#39;s Theorem \u300C\u5FB7\u6469\u6839\u5B9A\u7406\u300D is important!!!</strong></p><img src="https://pic.hanjiaming.com.cn/2021/03/21/22138a3005dc0.png" alt="image.png" title="image.png"><ul><li>in the first equation, no AND operation (change AND to OR)</li><li>in the second equation, no OR operation (change OR to AND)</li><li>reduce the types of operations \u2014 important for implementation</li><li>completeness of functionality \u2014 a set of operations (gates) that can be</li><li>used to implement all logical expressions</li></ul><img src="https://pic.hanjiaming.com.cn/2021/02/24/e728f67b9a4de.png" alt="CleanShot 2021-02-24 at 12.54.23@2x.png" title="CleanShot 2021-02-24 at 12.54.23@2x.png"><h4 id="learning-meaning" tabindex="-1"><a class="header-anchor" href="#learning-meaning" aria-hidden="true">#</a> learning meaning</h4><p>Transform one expression to another form with specific features\u300C\u5C06\u4E00\u4E2A\u8868\u8FBE\u5F0F\u8F6C\u6362\u4E3A\u5177\u6709\u7279\u5B9A\u529F\u80FD\u7684\u53E6\u4E00\u79CD\u5F62\u5F0F\u300D</p><ul><li>Simplification (Absorption theorem\u300CAbsorption theorem\u300D and Consensus Theorem\u300CConsensus Theorem\u300D)</li><li>Contain only certain operations in the expression (DeMorgan\u2019s theorem)</li><li>Easy to implement\u300C\u8868\u8FBE\u5F0F\u4E2D\u4EC5\u5305\u542B\u67D0\u4E9B\u8FD0\u7B97\uFF08\u5FB7\u6469\u6839\u5B9A\u7406\uFF09\u300D</li></ul><p>Generally, we call this process as Algebraic Simplification\u300C\u4EE3\u6570\u7B80\u5316\u300D</p><ul><li>different people may have different results</li><li>depending on the purpose, we may need different results</li></ul><h4 id="absorption-theorem\u300C\u5438\u6536\u5B9A\u7406\u300D" tabindex="-1"><a class="header-anchor" href="#absorption-theorem\u300C\u5438\u6536\u5B9A\u7406\u300D" aria-hidden="true">#</a> Absorption Theorem\u300C\u5438\u6536\u5B9A\u7406\u300D</h4><p>Eg</p><p>A (A+B) = A; A+AB = A no B in the expression \u2014 simplified, less input</p><h4 id="consensus-theorem-\u300C\u5171\u8BC6\u5B9A\u7406\u300D" tabindex="-1"><a class="header-anchor" href="#consensus-theorem-\u300C\u5171\u8BC6\u5B9A\u7406\u300D" aria-hidden="true">#</a> Consensus Theorem \u300C\u5171\u8BC6\u5B9A\u7406\u300D</h4><img src="https://pic.hanjiaming.com.cn/2021/03/21/7c9217d1d4bd5.png" width="240px"><img src="https://pic.hanjiaming.com.cn/2021/03/21/bc66bf14bfc54.png" alt="image.png" title="image.png"><p>simplified, less operations\u300C\u7B80\u5316\uFF0C\u51CF\u5C11\u64CD\u4F5C\u300D</p><h3 id="completeness-of-functionality" tabindex="-1"><a class="header-anchor" href="#completeness-of-functionality" aria-hidden="true">#</a> Completeness of Functionality</h3><p>Functionally Complete Sets of Gates</p><ul><li>AND, OR, NOT: self evident</li><li>AND, NOT: question, can OR be expressed by AND and NOT? Yes</li><li>OR, NOT: same as above</li><li>NAND</li><li>NOR</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/21/84da7c228f98c.png" alt="image.png" title="image.png"><h4 id="prove-and-not-is-a-complete-set-of-gates" tabindex="-1"><a class="header-anchor" href="#prove-and-not-is-a-complete-set-of-gates" aria-hidden="true">#</a> Prove (AND, NOT) is a Complete Set of Gates</h4><img src="https://pic.hanjiaming.com.cn/2021/03/21/e6a62f8438aad.png" alt="image.png" title="image.png"><h4 id="prove-nand-is-a-complete-set-of-gates" tabindex="-1"><a class="header-anchor" href="#prove-nand-is-a-complete-set-of-gates" aria-hidden="true">#</a> Prove (NAND) is a Complete Set of Gates</h4><img src="https://pic.hanjiaming.com.cn/2021/03/21/249c5630ab857.png" alt="image.png" title="image.png"><h4 id="use-nand-to-express-a-or-b" tabindex="-1"><a class="header-anchor" href="#use-nand-to-express-a-or-b" aria-hidden="true">#</a> Use NAND to express A OR B</h4><p>\u5F85\u8865\u5145</p><h4 id="show-nor-is-a-complete-set-of-gates" tabindex="-1"><a class="header-anchor" href="#show-nor-is-a-complete-set-of-gates" aria-hidden="true">#</a> Show NOR is a complete set of gates</h4><p>\u5F85\u8865\u5145</p><h4 id="two-rules-of-thumbs" tabindex="-1"><a class="header-anchor" href="#two-rules-of-thumbs" aria-hidden="true">#</a> Two Rules of Thumbs</h4><p>We can write the same logical expression in different forms (algebraic simplification)</p><p>There are two general rules</p><ul><li><p>less operations (gates)</p></li><li><p>less types of operations (gates)</p></li></ul><p>There is a trade-off between these two rules\u300C\u5728\u8FD9\u4E24\u4E2A\u89C4\u5219\u4E4B\u95F4\u9700\u8981\u6743\u8861\u53D6\u820D\u300D</p><h2 id="\u9644\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u9644\u4EF6" aria-hidden="true">#</a> \u9644\u4EF6</h2><h3 id="laws-and-theorems-of-boolean-algebra" tabindex="-1"><a class="header-anchor" href="#laws-and-theorems-of-boolean-algebra" aria-hidden="true">#</a> Laws and Theorems of Boolean Algebra</h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;">1a.</td><td style="text-align:center;">X \u2022 0 = 0</td><td style="text-align:center;">1b.</td><td style="text-align:center;">X + 1 = 1</td><td style="text-align:center;">Annulment Law</td></tr><tr><td style="text-align:center;">2a.</td><td style="text-align:center;">X \u2022 1 = X</td><td style="text-align:center;">2b.</td><td style="text-align:center;">X + 0 = X</td><td style="text-align:center;">Identity Law</td></tr><tr><td style="text-align:center;">3a.</td><td style="text-align:center;">X \u2022 X = X</td><td style="text-align:center;">3b.</td><td style="text-align:center;">X + X = X</td><td style="text-align:center;">Idempotent Law</td></tr><tr><td style="text-align:center;">4a.</td><td style="text-align:center;">X \u2022 X = 0</td><td style="text-align:center;">4b.</td><td style="text-align:center;">X + X = 1</td><td style="text-align:center;">Complement Law</td></tr><tr><td style="text-align:center;">5.</td><td style="text-align:center;">X = X</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Double Negation Law</td></tr><tr><td style="text-align:center;">6a.</td><td style="text-align:center;">X \u2022 Y = Y \u2022 X</td><td style="text-align:center;">6b.</td><td style="text-align:center;">X + Y = Y + X</td><td style="text-align:center;">Commutative Law</td></tr><tr><td style="text-align:center;">7a.</td><td style="text-align:center;">X (Y Z) = (X Y) Z = (X Z) Y = X Y Z</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Associative Law</td></tr><tr><td style="text-align:center;">7b.</td><td style="text-align:center;">X + (Y + Z) = (X + Y) + Z = (X + Z) + Y = X + Y + Z</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Associative Law</td></tr><tr><td style="text-align:center;">8a.</td><td style="text-align:center;">X \u2022 (Y + Z) = X Y + X Z</td><td style="text-align:center;">8b.</td><td style="text-align:center;">X + Y Z = (X + Y) \u2022 (X + Z)</td><td style="text-align:center;">Distributive Law</td></tr><tr><td style="text-align:center;">9a.</td><td style="text-align:center;">X \u2022 Y = X + Y</td><td style="text-align:center;">9b.</td><td style="text-align:center;">X + Y = X \u2022 Y</td><td style="text-align:center;">de Morgan&#39;s Theorem</td></tr><tr><td style="text-align:center;">10a.</td><td style="text-align:center;">X \u2022 (X + Y) = X</td><td style="text-align:center;">10b.</td><td style="text-align:center;">X + X Y = X</td><td style="text-align:center;">Absorption Law</td></tr><tr><td style="text-align:center;">11a.</td><td style="text-align:center;">(X + Y) \u2022 (X + Y) = X</td><td style="text-align:center;">11b.</td><td style="text-align:center;">X Y + X Y = X</td><td style="text-align:center;">Redundancy Law</td></tr><tr><td style="text-align:center;">12a.</td><td style="text-align:center;">(X + Y) \u2022 Y = XY</td><td style="text-align:center;">12b.</td><td style="text-align:center;">X Y + Y = X + Y</td><td style="text-align:center;">Redundancy Law</td></tr><tr><td style="text-align:center;">13a.</td><td style="text-align:center;">(X + Y) \u2022 (X + Z) \u2022 (Y + Z) = (X + Y) \u2022 (X + Z)</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Consensus Law</td></tr><tr><td style="text-align:center;">13b.</td><td style="text-align:center;">X Y + X Z + Y Z = X Y + X Z</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">Consensus Law</td></tr><tr><td style="text-align:center;">14a.</td><td style="text-align:center;">X \u2295 Y = (X + Y) \u2022 (X + Y)</td><td style="text-align:center;">14b.</td><td style="text-align:center;">X \u2295 Y = X Y + X Y</td><td style="text-align:center;">XOR Gate</td></tr><tr><td style="text-align:center;">15a.</td><td style="text-align:center;">X \u2299 Y = (X + Y) \u2022 (X \u2022 Y)</td><td style="text-align:center;">15b.</td><td style="text-align:center;">X \u2299 Y = X Y + X Y</td><td style="text-align:center;">XNOR Gate</td></tr><tr><td style="text-align:center;">15c.</td><td style="text-align:center;">X \u2299 Y = (X + Y) \u2022 (X + Y)</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">XNOR Gate</td></tr></tbody></table><h2 id="\u63A8\u8350\u7F51\u7AD9" tabindex="-1"><a class="header-anchor" href="#\u63A8\u8350\u7F51\u7AD9" aria-hidden="true">#</a> \u63A8\u8350\u7F51\u7AD9</h2><ul><li>https://www.eduhk.hk/has/phys/de/</li><li>https://www.eduhk.hk/has/phys/de/de-ba.htm#introduction</li><li>https://www.cs.fsu.edu/~lacher/courses/MAD3105/lectures/s4_1boolfn.pdf</li><li>https://www.mi.mun.ca/users/cchaulk/misc/boolean.htm</li></ul><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2><ul><li>https://www.eduhk.hk/has/phys/de/</li><li>https://www.eduhk.hk/has/phys/de/de-ba.htm#introduction</li><li>https://www.cs.fsu.edu/~lacher/courses/MAD3105/lectures/s4_1boolfn.pdf</li><li>https://www.mi.mun.ca/users/cchaulk/misc/boolean.htm</li></ul>',96);function n(l,r){return i}var o=t(a,[["render",n]]);export{o as default};
